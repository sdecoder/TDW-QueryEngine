/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftHiveMetastore {

  /**
   * This interface is live.
   */
  public interface Iface extends com.facebook.fb303.FacebookService.Iface {

    public boolean create_database(String name, String description) throws AlreadyExistsException, MetaException, TException;

    public Database get_database(String name) throws NoSuchObjectException, MetaException, TException;

    public boolean drop_database(String name) throws MetaException, TException;

    public List<String> get_databases() throws MetaException, TException;

    public Type get_type(String name) throws MetaException, TException;

    public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException;

    public boolean drop_type(String type) throws MetaException, TException;

    public Map<String,Type> get_type_all(String name) throws MetaException, TException;

    public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

    public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

    public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException;

    public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_tables(String db_name, String pattern) throws MetaException, TException;

    public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException;

    public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException;

    public Partition get_partition(String db_name, String tbl_name, int level) throws MetaException, TException;

    public List<Partition> get_partitions(String db_name, String tbl_name) throws NoSuchObjectException, MetaException, TException;

    public void alter_partition(String db_name, String tbl_name, Partition new_part) throws InvalidOperationException, MetaException, TException;

    public tdw_sys_table_statistics add_table_statistics(tdw_sys_table_statistics new_table_statistics) throws AlreadyExistsException, MetaException, TException;

    public boolean delete_table_statistics(String table_statistics_name) throws NoSuchObjectException, MetaException, TException;

    public tdw_sys_table_statistics get_table_statistics(String table_statistics_name) throws MetaException, TException;

    public List<tdw_sys_table_statistics> get_table_statistics_multi(int max_parts) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_table_statistics_names(int max_parts) throws NoSuchObjectException, MetaException, TException;

    public tdw_sys_fields_statistics add_fields_statistics(tdw_sys_fields_statistics new_fields_statistics) throws AlreadyExistsException, MetaException, TException;

    public boolean delete_fields_statistics(String stat_table_name, String stat_field_name) throws NoSuchObjectException, MetaException, TException;

    public tdw_sys_fields_statistics get_fields_statistics(String stat_table_name, String stat_field_name) throws MetaException, TException;

    public List<tdw_sys_fields_statistics> get_fields_statistics_multi(String stat_table_name, int max_parts) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_fields_statistics_names(String stat_table_name, int max_parts) throws NoSuchObjectException, MetaException, TException;

    public boolean create_user(String byWho, String newUser, String passwd) throws AlreadyExistsException, MetaException, TException;

    public boolean drop_user(String byWho, String userName) throws NoSuchObjectException, MetaException, TException;

    public User get_user(String byWho, String userName) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_users_all(String byWho) throws MetaException, TException;

    public boolean set_passwd(String byWho, String forWho, String newPasswd) throws NoSuchObjectException, MetaException, TException;

    public boolean is_a_user(String userName, String passwd) throws MetaException, TException;

    public boolean is_a_role(String roleName) throws MetaException, TException;

    public boolean create_role(String byWho, String roleName) throws AlreadyExistsException, MetaException, TException;

    public boolean drop_role(String byWho, String roleName) throws NoSuchObjectException, MetaException, TException;

    public Role get_role(String byWho, String roleName) throws NoSuchObjectException, MetaException, TException;

    public List<String> get_roles_all(String byWho) throws MetaException, TException;

    public boolean grant_auth_sys(String byWho, String userName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean grant_auth_role_sys(String byWho, String roleName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean grant_role_to_user(String byWho, String userName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean grant_role_to_role(String byWho, String roleName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean grant_auth_on_db(String byWho, String forWho, List<String> privileges, String db) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean grant_auth_on_tbl(String byWho, String forWho, List<String> privileges, String db, String tbl) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public DbPriv get_auth_on_db(String byWho, String who, String db) throws MetaException, TException;

    public List<DbPriv> get_auth_on_dbs(String byWho, String who) throws MetaException, TException;

    public List<DbPriv> get_db_auth(String byWho, String db) throws MetaException, TException;

    public List<DbPriv> get_db_auth_all(String byWho) throws MetaException, TException;

    public TblPriv get_auth_on_tbl(String byWho, String who, String db, String tbl) throws MetaException, TException;

    public List<TblPriv> get_auth_on_tbls(String byWho, String who) throws MetaException, TException;

    public List<TblPriv> get_tbl_auth(String byWho, String db, String tbl) throws MetaException, TException;

    public List<TblPriv> get_tbl_auth_all(String byWho) throws MetaException, TException;

    public boolean revoke_auth_sys(String byWho, String userName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean revoke_auth_role_sys(String byWho, String roleName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean revoke_role_from_user(String byWho, String userName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean revoke_role_from_role(String byWho, String roleName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean revoke_auth_on_db(String byWho, String who, List<String> privileges, String db) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean revoke_auth_on_tbl(String byWho, String who, List<String> privileges, String db, String tbl) throws NoSuchObjectException, InvalidObjectException, MetaException, TException;

    public boolean drop_auth_on_db(String byWho, String forWho, String db) throws MetaException, TException;

    public boolean drop_auth_in_db(String byWho, String forWho) throws MetaException, TException;

    public boolean drop_auth_on_tbl(String byWho, String forWho, String db, String tbl) throws MetaException, TException;

    public boolean drop_auth_in_tbl(String byWho, String forWho) throws MetaException, TException;

    public boolean create_index(IndexItem index) throws MetaException, TException;

    public boolean drop_index(String db, String table, String name) throws MetaException, TException;

    public int get_index_num(String db, String table) throws MetaException, TException;

    public int get_index_type(String db, String table, String name) throws MetaException, TException;

    public String get_index_field(String db, String table, String name) throws MetaException, TException;

    public String get_index_location(String db, String table, String name) throws MetaException, TException;

    public boolean set_index_location(String db, String table, String name, String location) throws MetaException, TException;

    public boolean set_index_status(String db, String table, String name, int status) throws MetaException, TException;

    public List<IndexItem> get_all_index_table(String db, String table) throws MetaException, TException;

    public IndexItem get_index_info(String db, String table, String name) throws MetaException, TException;

    public List<IndexItem> get_all_index_sys() throws MetaException, TException;

  }

  public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public boolean create_database(String name, String description) throws AlreadyExistsException, MetaException, TException
    {
      send_create_database(name, description);
      return recv_create_database();
    }

    public void send_create_database(String name, String description) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_database", TMessageType.CALL, seqid_));
      create_database_args args = new create_database_args();
      args.name = name;
      args.description = description;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_create_database() throws AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_database_result result = new create_database_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_database failed: unknown result");
    }

    public Database get_database(String name) throws NoSuchObjectException, MetaException, TException
    {
      send_get_database(name);
      return recv_get_database();
    }

    public void send_get_database(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_database", TMessageType.CALL, seqid_));
      get_database_args args = new get_database_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Database recv_get_database() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_database_result result = new get_database_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_database failed: unknown result");
    }

    public boolean drop_database(String name) throws MetaException, TException
    {
      send_drop_database(name);
      return recv_drop_database();
    }

    public void send_drop_database(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_database", TMessageType.CALL, seqid_));
      drop_database_args args = new drop_database_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_database() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_database_result result = new drop_database_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_database failed: unknown result");
    }

    public List<String> get_databases() throws MetaException, TException
    {
      send_get_databases();
      return recv_get_databases();
    }

    public void send_get_databases() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_databases", TMessageType.CALL, seqid_));
      get_databases_args args = new get_databases_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_databases() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_databases_result result = new get_databases_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_databases failed: unknown result");
    }

    public Type get_type(String name) throws MetaException, TException
    {
      send_get_type(name);
      return recv_get_type();
    }

    public void send_get_type(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_type", TMessageType.CALL, seqid_));
      get_type_args args = new get_type_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Type recv_get_type() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_type_result result = new get_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_type failed: unknown result");
    }

    public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException
    {
      send_create_type(type);
      return recv_create_type();
    }

    public void send_create_type(Type type) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_type", TMessageType.CALL, seqid_));
      create_type_args args = new create_type_args();
      args.type = type;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_create_type() throws AlreadyExistsException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_type_result result = new create_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_type failed: unknown result");
    }

    public boolean drop_type(String type) throws MetaException, TException
    {
      send_drop_type(type);
      return recv_drop_type();
    }

    public void send_drop_type(String type) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_type", TMessageType.CALL, seqid_));
      drop_type_args args = new drop_type_args();
      args.type = type;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_type() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_type_result result = new drop_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_type failed: unknown result");
    }

    public Map<String,Type> get_type_all(String name) throws MetaException, TException
    {
      send_get_type_all(name);
      return recv_get_type_all();
    }

    public void send_get_type_all(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_type_all", TMessageType.CALL, seqid_));
      get_type_all_args args = new get_type_all_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,Type> recv_get_type_all() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_type_all_result result = new get_type_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_type_all failed: unknown result");
    }

    public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      send_get_fields(db_name, table_name);
      return recv_get_fields();
    }

    public void send_get_fields(String db_name, String table_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_fields", TMessageType.CALL, seqid_));
      get_fields_args args = new get_fields_args();
      args.db_name = db_name;
      args.table_name = table_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<FieldSchema> recv_get_fields() throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_fields_result result = new get_fields_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields failed: unknown result");
    }

    public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      send_get_schema(db_name, table_name);
      return recv_get_schema();
    }

    public void send_get_schema(String db_name, String table_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_schema", TMessageType.CALL, seqid_));
      get_schema_args args = new get_schema_args();
      args.db_name = db_name;
      args.table_name = table_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<FieldSchema> recv_get_schema() throws MetaException, UnknownTableException, UnknownDBException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_schema_result result = new get_schema_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
    }

    public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
    {
      send_create_table(tbl);
      recv_create_table();
    }

    public void send_create_table(Table tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_table", TMessageType.CALL, seqid_));
      create_table_args args = new create_table_args();
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_create_table() throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_table_result result = new create_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      if (result.o4 != null) {
        throw result.o4;
      }
      return;
    }

    public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_table(dbname, name, deleteData);
      recv_drop_table();
    }

    public void send_drop_table(String dbname, String name, boolean deleteData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_table", TMessageType.CALL, seqid_));
      drop_table_args args = new drop_table_args();
      args.dbname = dbname;
      args.name = name;
      args.deleteData = deleteData;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_drop_table() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_table_result result = new drop_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      return;
    }

    public List<String> get_tables(String db_name, String pattern) throws MetaException, TException
    {
      send_get_tables(db_name, pattern);
      return recv_get_tables();
    }

    public void send_get_tables(String db_name, String pattern) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_tables", TMessageType.CALL, seqid_));
      get_tables_args args = new get_tables_args();
      args.db_name = db_name;
      args.pattern = pattern;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_tables() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_tables_result result = new get_tables_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tables failed: unknown result");
    }

    public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException
    {
      send_get_table(dbname, tbl_name);
      return recv_get_table();
    }

    public void send_get_table(String dbname, String tbl_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_table", TMessageType.CALL, seqid_));
      get_table_args args = new get_table_args();
      args.dbname = dbname;
      args.tbl_name = tbl_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Table recv_get_table() throws MetaException, NoSuchObjectException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_table_result result = new get_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table failed: unknown result");
    }

    public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException
    {
      send_alter_table(dbname, tbl_name, new_tbl);
      recv_alter_table();
    }

    public void send_alter_table(String dbname, String tbl_name, Table new_tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("alter_table", TMessageType.CALL, seqid_));
      alter_table_args args = new alter_table_args();
      args.dbname = dbname;
      args.tbl_name = tbl_name;
      args.new_tbl = new_tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_alter_table() throws InvalidOperationException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      alter_table_result result = new alter_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      return;
    }

    public Partition get_partition(String db_name, String tbl_name, int level) throws MetaException, TException
    {
      send_get_partition(db_name, tbl_name, level);
      return recv_get_partition();
    }

    public void send_get_partition(String db_name, String tbl_name, int level) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partition", TMessageType.CALL, seqid_));
      get_partition_args args = new get_partition_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.level = level;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Partition recv_get_partition() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partition_result result = new get_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partition failed: unknown result");
    }

    public List<Partition> get_partitions(String db_name, String tbl_name) throws NoSuchObjectException, MetaException, TException
    {
      send_get_partitions(db_name, tbl_name);
      return recv_get_partitions();
    }

    public void send_get_partitions(String db_name, String tbl_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_partitions", TMessageType.CALL, seqid_));
      get_partitions_args args = new get_partitions_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Partition> recv_get_partitions() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_partitions_result result = new get_partitions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partitions failed: unknown result");
    }

    public void alter_partition(String db_name, String tbl_name, Partition new_part) throws InvalidOperationException, MetaException, TException
    {
      send_alter_partition(db_name, tbl_name, new_part);
      recv_alter_partition();
    }

    public void send_alter_partition(String db_name, String tbl_name, Partition new_part) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("alter_partition", TMessageType.CALL, seqid_));
      alter_partition_args args = new alter_partition_args();
      args.db_name = db_name;
      args.tbl_name = tbl_name;
      args.new_part = new_part;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_alter_partition() throws InvalidOperationException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      alter_partition_result result = new alter_partition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      return;
    }

    public tdw_sys_table_statistics add_table_statistics(tdw_sys_table_statistics new_table_statistics) throws AlreadyExistsException, MetaException, TException
    {
      send_add_table_statistics(new_table_statistics);
      return recv_add_table_statistics();
    }

    public void send_add_table_statistics(tdw_sys_table_statistics new_table_statistics) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("add_table_statistics", TMessageType.CALL, seqid_));
      add_table_statistics_args args = new add_table_statistics_args();
      args.new_table_statistics = new_table_statistics;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public tdw_sys_table_statistics recv_add_table_statistics() throws AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      add_table_statistics_result result = new add_table_statistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "add_table_statistics failed: unknown result");
    }

    public boolean delete_table_statistics(String table_statistics_name) throws NoSuchObjectException, MetaException, TException
    {
      send_delete_table_statistics(table_statistics_name);
      return recv_delete_table_statistics();
    }

    public void send_delete_table_statistics(String table_statistics_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("delete_table_statistics", TMessageType.CALL, seqid_));
      delete_table_statistics_args args = new delete_table_statistics_args();
      args.table_statistics_name = table_statistics_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_delete_table_statistics() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      delete_table_statistics_result result = new delete_table_statistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "delete_table_statistics failed: unknown result");
    }

    public tdw_sys_table_statistics get_table_statistics(String table_statistics_name) throws MetaException, TException
    {
      send_get_table_statistics(table_statistics_name);
      return recv_get_table_statistics();
    }

    public void send_get_table_statistics(String table_statistics_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_table_statistics", TMessageType.CALL, seqid_));
      get_table_statistics_args args = new get_table_statistics_args();
      args.table_statistics_name = table_statistics_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public tdw_sys_table_statistics recv_get_table_statistics() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_table_statistics_result result = new get_table_statistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table_statistics failed: unknown result");
    }

    public List<tdw_sys_table_statistics> get_table_statistics_multi(int max_parts) throws NoSuchObjectException, MetaException, TException
    {
      send_get_table_statistics_multi(max_parts);
      return recv_get_table_statistics_multi();
    }

    public void send_get_table_statistics_multi(int max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_table_statistics_multi", TMessageType.CALL, seqid_));
      get_table_statistics_multi_args args = new get_table_statistics_multi_args();
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<tdw_sys_table_statistics> recv_get_table_statistics_multi() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_table_statistics_multi_result result = new get_table_statistics_multi_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table_statistics_multi failed: unknown result");
    }

    public List<String> get_table_statistics_names(int max_parts) throws NoSuchObjectException, MetaException, TException
    {
      send_get_table_statistics_names(max_parts);
      return recv_get_table_statistics_names();
    }

    public void send_get_table_statistics_names(int max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_table_statistics_names", TMessageType.CALL, seqid_));
      get_table_statistics_names_args args = new get_table_statistics_names_args();
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_table_statistics_names() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_table_statistics_names_result result = new get_table_statistics_names_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table_statistics_names failed: unknown result");
    }

    public tdw_sys_fields_statistics add_fields_statistics(tdw_sys_fields_statistics new_fields_statistics) throws AlreadyExistsException, MetaException, TException
    {
      send_add_fields_statistics(new_fields_statistics);
      return recv_add_fields_statistics();
    }

    public void send_add_fields_statistics(tdw_sys_fields_statistics new_fields_statistics) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("add_fields_statistics", TMessageType.CALL, seqid_));
      add_fields_statistics_args args = new add_fields_statistics_args();
      args.new_fields_statistics = new_fields_statistics;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public tdw_sys_fields_statistics recv_add_fields_statistics() throws AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      add_fields_statistics_result result = new add_fields_statistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "add_fields_statistics failed: unknown result");
    }

    public boolean delete_fields_statistics(String stat_table_name, String stat_field_name) throws NoSuchObjectException, MetaException, TException
    {
      send_delete_fields_statistics(stat_table_name, stat_field_name);
      return recv_delete_fields_statistics();
    }

    public void send_delete_fields_statistics(String stat_table_name, String stat_field_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("delete_fields_statistics", TMessageType.CALL, seqid_));
      delete_fields_statistics_args args = new delete_fields_statistics_args();
      args.stat_table_name = stat_table_name;
      args.stat_field_name = stat_field_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_delete_fields_statistics() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      delete_fields_statistics_result result = new delete_fields_statistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "delete_fields_statistics failed: unknown result");
    }

    public tdw_sys_fields_statistics get_fields_statistics(String stat_table_name, String stat_field_name) throws MetaException, TException
    {
      send_get_fields_statistics(stat_table_name, stat_field_name);
      return recv_get_fields_statistics();
    }

    public void send_get_fields_statistics(String stat_table_name, String stat_field_name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_fields_statistics", TMessageType.CALL, seqid_));
      get_fields_statistics_args args = new get_fields_statistics_args();
      args.stat_table_name = stat_table_name;
      args.stat_field_name = stat_field_name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public tdw_sys_fields_statistics recv_get_fields_statistics() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_fields_statistics_result result = new get_fields_statistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields_statistics failed: unknown result");
    }

    public List<tdw_sys_fields_statistics> get_fields_statistics_multi(String stat_table_name, int max_parts) throws NoSuchObjectException, MetaException, TException
    {
      send_get_fields_statistics_multi(stat_table_name, max_parts);
      return recv_get_fields_statistics_multi();
    }

    public void send_get_fields_statistics_multi(String stat_table_name, int max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_fields_statistics_multi", TMessageType.CALL, seqid_));
      get_fields_statistics_multi_args args = new get_fields_statistics_multi_args();
      args.stat_table_name = stat_table_name;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<tdw_sys_fields_statistics> recv_get_fields_statistics_multi() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_fields_statistics_multi_result result = new get_fields_statistics_multi_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields_statistics_multi failed: unknown result");
    }

    public List<String> get_fields_statistics_names(String stat_table_name, int max_parts) throws NoSuchObjectException, MetaException, TException
    {
      send_get_fields_statistics_names(stat_table_name, max_parts);
      return recv_get_fields_statistics_names();
    }

    public void send_get_fields_statistics_names(String stat_table_name, int max_parts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_fields_statistics_names", TMessageType.CALL, seqid_));
      get_fields_statistics_names_args args = new get_fields_statistics_names_args();
      args.stat_table_name = stat_table_name;
      args.max_parts = max_parts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_fields_statistics_names() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_fields_statistics_names_result result = new get_fields_statistics_names_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields_statistics_names failed: unknown result");
    }

    public boolean create_user(String byWho, String newUser, String passwd) throws AlreadyExistsException, MetaException, TException
    {
      send_create_user(byWho, newUser, passwd);
      return recv_create_user();
    }

    public void send_create_user(String byWho, String newUser, String passwd) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_user", TMessageType.CALL, seqid_));
      create_user_args args = new create_user_args();
      args.byWho = byWho;
      args.newUser = newUser;
      args.passwd = passwd;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_create_user() throws AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_user_result result = new create_user_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_user failed: unknown result");
    }

    public boolean drop_user(String byWho, String userName) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_user(byWho, userName);
      return recv_drop_user();
    }

    public void send_drop_user(String byWho, String userName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_user", TMessageType.CALL, seqid_));
      drop_user_args args = new drop_user_args();
      args.byWho = byWho;
      args.userName = userName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_user() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_user_result result = new drop_user_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_user failed: unknown result");
    }

    public User get_user(String byWho, String userName) throws NoSuchObjectException, MetaException, TException
    {
      send_get_user(byWho, userName);
      return recv_get_user();
    }

    public void send_get_user(String byWho, String userName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_user", TMessageType.CALL, seqid_));
      get_user_args args = new get_user_args();
      args.byWho = byWho;
      args.userName = userName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public User recv_get_user() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_user_result result = new get_user_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_user failed: unknown result");
    }

    public List<String> get_users_all(String byWho) throws MetaException, TException
    {
      send_get_users_all(byWho);
      return recv_get_users_all();
    }

    public void send_get_users_all(String byWho) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_users_all", TMessageType.CALL, seqid_));
      get_users_all_args args = new get_users_all_args();
      args.byWho = byWho;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_users_all() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_users_all_result result = new get_users_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_users_all failed: unknown result");
    }

    public boolean set_passwd(String byWho, String forWho, String newPasswd) throws NoSuchObjectException, MetaException, TException
    {
      send_set_passwd(byWho, forWho, newPasswd);
      return recv_set_passwd();
    }

    public void send_set_passwd(String byWho, String forWho, String newPasswd) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("set_passwd", TMessageType.CALL, seqid_));
      set_passwd_args args = new set_passwd_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.newPasswd = newPasswd;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_set_passwd() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      set_passwd_result result = new set_passwd_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "set_passwd failed: unknown result");
    }

    public boolean is_a_user(String userName, String passwd) throws MetaException, TException
    {
      send_is_a_user(userName, passwd);
      return recv_is_a_user();
    }

    public void send_is_a_user(String userName, String passwd) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("is_a_user", TMessageType.CALL, seqid_));
      is_a_user_args args = new is_a_user_args();
      args.userName = userName;
      args.passwd = passwd;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_is_a_user() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      is_a_user_result result = new is_a_user_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "is_a_user failed: unknown result");
    }

    public boolean is_a_role(String roleName) throws MetaException, TException
    {
      send_is_a_role(roleName);
      return recv_is_a_role();
    }

    public void send_is_a_role(String roleName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("is_a_role", TMessageType.CALL, seqid_));
      is_a_role_args args = new is_a_role_args();
      args.roleName = roleName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_is_a_role() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      is_a_role_result result = new is_a_role_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "is_a_role failed: unknown result");
    }

    public boolean create_role(String byWho, String roleName) throws AlreadyExistsException, MetaException, TException
    {
      send_create_role(byWho, roleName);
      return recv_create_role();
    }

    public void send_create_role(String byWho, String roleName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_role", TMessageType.CALL, seqid_));
      create_role_args args = new create_role_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_create_role() throws AlreadyExistsException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_role_result result = new create_role_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_role failed: unknown result");
    }

    public boolean drop_role(String byWho, String roleName) throws NoSuchObjectException, MetaException, TException
    {
      send_drop_role(byWho, roleName);
      return recv_drop_role();
    }

    public void send_drop_role(String byWho, String roleName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_role", TMessageType.CALL, seqid_));
      drop_role_args args = new drop_role_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_role() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_role_result result = new drop_role_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_role failed: unknown result");
    }

    public Role get_role(String byWho, String roleName) throws NoSuchObjectException, MetaException, TException
    {
      send_get_role(byWho, roleName);
      return recv_get_role();
    }

    public void send_get_role(String byWho, String roleName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_role", TMessageType.CALL, seqid_));
      get_role_args args = new get_role_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Role recv_get_role() throws NoSuchObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_role_result result = new get_role_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_role failed: unknown result");
    }

    public List<String> get_roles_all(String byWho) throws MetaException, TException
    {
      send_get_roles_all(byWho);
      return recv_get_roles_all();
    }

    public void send_get_roles_all(String byWho) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_roles_all", TMessageType.CALL, seqid_));
      get_roles_all_args args = new get_roles_all_args();
      args.byWho = byWho;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_roles_all() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_roles_all_result result = new get_roles_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_roles_all failed: unknown result");
    }

    public boolean grant_auth_sys(String byWho, String userName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_grant_auth_sys(byWho, userName, privileges);
      return recv_grant_auth_sys();
    }

    public void send_grant_auth_sys(String byWho, String userName, List<String> privileges) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("grant_auth_sys", TMessageType.CALL, seqid_));
      grant_auth_sys_args args = new grant_auth_sys_args();
      args.byWho = byWho;
      args.userName = userName;
      args.privileges = privileges;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_grant_auth_sys() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      grant_auth_sys_result result = new grant_auth_sys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "grant_auth_sys failed: unknown result");
    }

    public boolean grant_auth_role_sys(String byWho, String roleName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_grant_auth_role_sys(byWho, roleName, privileges);
      return recv_grant_auth_role_sys();
    }

    public void send_grant_auth_role_sys(String byWho, String roleName, List<String> privileges) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("grant_auth_role_sys", TMessageType.CALL, seqid_));
      grant_auth_role_sys_args args = new grant_auth_role_sys_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.privileges = privileges;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_grant_auth_role_sys() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      grant_auth_role_sys_result result = new grant_auth_role_sys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "grant_auth_role_sys failed: unknown result");
    }

    public boolean grant_role_to_user(String byWho, String userName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_grant_role_to_user(byWho, userName, roleNames);
      return recv_grant_role_to_user();
    }

    public void send_grant_role_to_user(String byWho, String userName, List<String> roleNames) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("grant_role_to_user", TMessageType.CALL, seqid_));
      grant_role_to_user_args args = new grant_role_to_user_args();
      args.byWho = byWho;
      args.userName = userName;
      args.roleNames = roleNames;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_grant_role_to_user() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      grant_role_to_user_result result = new grant_role_to_user_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "grant_role_to_user failed: unknown result");
    }

    public boolean grant_role_to_role(String byWho, String roleName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_grant_role_to_role(byWho, roleName, roleNames);
      return recv_grant_role_to_role();
    }

    public void send_grant_role_to_role(String byWho, String roleName, List<String> roleNames) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("grant_role_to_role", TMessageType.CALL, seqid_));
      grant_role_to_role_args args = new grant_role_to_role_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.roleNames = roleNames;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_grant_role_to_role() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      grant_role_to_role_result result = new grant_role_to_role_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "grant_role_to_role failed: unknown result");
    }

    public boolean grant_auth_on_db(String byWho, String forWho, List<String> privileges, String db) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_grant_auth_on_db(byWho, forWho, privileges, db);
      return recv_grant_auth_on_db();
    }

    public void send_grant_auth_on_db(String byWho, String forWho, List<String> privileges, String db) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("grant_auth_on_db", TMessageType.CALL, seqid_));
      grant_auth_on_db_args args = new grant_auth_on_db_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.privileges = privileges;
      args.db = db;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_grant_auth_on_db() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      grant_auth_on_db_result result = new grant_auth_on_db_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "grant_auth_on_db failed: unknown result");
    }

    public boolean grant_auth_on_tbl(String byWho, String forWho, List<String> privileges, String db, String tbl) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_grant_auth_on_tbl(byWho, forWho, privileges, db, tbl);
      return recv_grant_auth_on_tbl();
    }

    public void send_grant_auth_on_tbl(String byWho, String forWho, List<String> privileges, String db, String tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("grant_auth_on_tbl", TMessageType.CALL, seqid_));
      grant_auth_on_tbl_args args = new grant_auth_on_tbl_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.privileges = privileges;
      args.db = db;
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_grant_auth_on_tbl() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      grant_auth_on_tbl_result result = new grant_auth_on_tbl_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "grant_auth_on_tbl failed: unknown result");
    }

    public DbPriv get_auth_on_db(String byWho, String who, String db) throws MetaException, TException
    {
      send_get_auth_on_db(byWho, who, db);
      return recv_get_auth_on_db();
    }

    public void send_get_auth_on_db(String byWho, String who, String db) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_auth_on_db", TMessageType.CALL, seqid_));
      get_auth_on_db_args args = new get_auth_on_db_args();
      args.byWho = byWho;
      args.who = who;
      args.db = db;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public DbPriv recv_get_auth_on_db() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_auth_on_db_result result = new get_auth_on_db_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_auth_on_db failed: unknown result");
    }

    public List<DbPriv> get_auth_on_dbs(String byWho, String who) throws MetaException, TException
    {
      send_get_auth_on_dbs(byWho, who);
      return recv_get_auth_on_dbs();
    }

    public void send_get_auth_on_dbs(String byWho, String who) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_auth_on_dbs", TMessageType.CALL, seqid_));
      get_auth_on_dbs_args args = new get_auth_on_dbs_args();
      args.byWho = byWho;
      args.who = who;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<DbPriv> recv_get_auth_on_dbs() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_auth_on_dbs_result result = new get_auth_on_dbs_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_auth_on_dbs failed: unknown result");
    }

    public List<DbPriv> get_db_auth(String byWho, String db) throws MetaException, TException
    {
      send_get_db_auth(byWho, db);
      return recv_get_db_auth();
    }

    public void send_get_db_auth(String byWho, String db) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_db_auth", TMessageType.CALL, seqid_));
      get_db_auth_args args = new get_db_auth_args();
      args.byWho = byWho;
      args.db = db;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<DbPriv> recv_get_db_auth() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_db_auth_result result = new get_db_auth_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_db_auth failed: unknown result");
    }

    public List<DbPriv> get_db_auth_all(String byWho) throws MetaException, TException
    {
      send_get_db_auth_all(byWho);
      return recv_get_db_auth_all();
    }

    public void send_get_db_auth_all(String byWho) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_db_auth_all", TMessageType.CALL, seqid_));
      get_db_auth_all_args args = new get_db_auth_all_args();
      args.byWho = byWho;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<DbPriv> recv_get_db_auth_all() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_db_auth_all_result result = new get_db_auth_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_db_auth_all failed: unknown result");
    }

    public TblPriv get_auth_on_tbl(String byWho, String who, String db, String tbl) throws MetaException, TException
    {
      send_get_auth_on_tbl(byWho, who, db, tbl);
      return recv_get_auth_on_tbl();
    }

    public void send_get_auth_on_tbl(String byWho, String who, String db, String tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_auth_on_tbl", TMessageType.CALL, seqid_));
      get_auth_on_tbl_args args = new get_auth_on_tbl_args();
      args.byWho = byWho;
      args.who = who;
      args.db = db;
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TblPriv recv_get_auth_on_tbl() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_auth_on_tbl_result result = new get_auth_on_tbl_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_auth_on_tbl failed: unknown result");
    }

    public List<TblPriv> get_auth_on_tbls(String byWho, String who) throws MetaException, TException
    {
      send_get_auth_on_tbls(byWho, who);
      return recv_get_auth_on_tbls();
    }

    public void send_get_auth_on_tbls(String byWho, String who) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_auth_on_tbls", TMessageType.CALL, seqid_));
      get_auth_on_tbls_args args = new get_auth_on_tbls_args();
      args.byWho = byWho;
      args.who = who;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<TblPriv> recv_get_auth_on_tbls() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_auth_on_tbls_result result = new get_auth_on_tbls_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_auth_on_tbls failed: unknown result");
    }

    public List<TblPriv> get_tbl_auth(String byWho, String db, String tbl) throws MetaException, TException
    {
      send_get_tbl_auth(byWho, db, tbl);
      return recv_get_tbl_auth();
    }

    public void send_get_tbl_auth(String byWho, String db, String tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_tbl_auth", TMessageType.CALL, seqid_));
      get_tbl_auth_args args = new get_tbl_auth_args();
      args.byWho = byWho;
      args.db = db;
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<TblPriv> recv_get_tbl_auth() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_tbl_auth_result result = new get_tbl_auth_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tbl_auth failed: unknown result");
    }

    public List<TblPriv> get_tbl_auth_all(String byWho) throws MetaException, TException
    {
      send_get_tbl_auth_all(byWho);
      return recv_get_tbl_auth_all();
    }

    public void send_get_tbl_auth_all(String byWho) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_tbl_auth_all", TMessageType.CALL, seqid_));
      get_tbl_auth_all_args args = new get_tbl_auth_all_args();
      args.byWho = byWho;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<TblPriv> recv_get_tbl_auth_all() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_tbl_auth_all_result result = new get_tbl_auth_all_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tbl_auth_all failed: unknown result");
    }

    public boolean revoke_auth_sys(String byWho, String userName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_revoke_auth_sys(byWho, userName, privileges);
      return recv_revoke_auth_sys();
    }

    public void send_revoke_auth_sys(String byWho, String userName, List<String> privileges) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revoke_auth_sys", TMessageType.CALL, seqid_));
      revoke_auth_sys_args args = new revoke_auth_sys_args();
      args.byWho = byWho;
      args.userName = userName;
      args.privileges = privileges;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_revoke_auth_sys() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      revoke_auth_sys_result result = new revoke_auth_sys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "revoke_auth_sys failed: unknown result");
    }

    public boolean revoke_auth_role_sys(String byWho, String roleName, List<String> privileges) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_revoke_auth_role_sys(byWho, roleName, privileges);
      return recv_revoke_auth_role_sys();
    }

    public void send_revoke_auth_role_sys(String byWho, String roleName, List<String> privileges) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revoke_auth_role_sys", TMessageType.CALL, seqid_));
      revoke_auth_role_sys_args args = new revoke_auth_role_sys_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.privileges = privileges;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_revoke_auth_role_sys() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      revoke_auth_role_sys_result result = new revoke_auth_role_sys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "revoke_auth_role_sys failed: unknown result");
    }

    public boolean revoke_role_from_user(String byWho, String userName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_revoke_role_from_user(byWho, userName, roleNames);
      return recv_revoke_role_from_user();
    }

    public void send_revoke_role_from_user(String byWho, String userName, List<String> roleNames) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revoke_role_from_user", TMessageType.CALL, seqid_));
      revoke_role_from_user_args args = new revoke_role_from_user_args();
      args.byWho = byWho;
      args.userName = userName;
      args.roleNames = roleNames;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_revoke_role_from_user() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      revoke_role_from_user_result result = new revoke_role_from_user_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "revoke_role_from_user failed: unknown result");
    }

    public boolean revoke_role_from_role(String byWho, String roleName, List<String> roleNames) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_revoke_role_from_role(byWho, roleName, roleNames);
      return recv_revoke_role_from_role();
    }

    public void send_revoke_role_from_role(String byWho, String roleName, List<String> roleNames) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revoke_role_from_role", TMessageType.CALL, seqid_));
      revoke_role_from_role_args args = new revoke_role_from_role_args();
      args.byWho = byWho;
      args.roleName = roleName;
      args.roleNames = roleNames;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_revoke_role_from_role() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      revoke_role_from_role_result result = new revoke_role_from_role_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "revoke_role_from_role failed: unknown result");
    }

    public boolean revoke_auth_on_db(String byWho, String who, List<String> privileges, String db) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_revoke_auth_on_db(byWho, who, privileges, db);
      return recv_revoke_auth_on_db();
    }

    public void send_revoke_auth_on_db(String byWho, String who, List<String> privileges, String db) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revoke_auth_on_db", TMessageType.CALL, seqid_));
      revoke_auth_on_db_args args = new revoke_auth_on_db_args();
      args.byWho = byWho;
      args.who = who;
      args.privileges = privileges;
      args.db = db;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_revoke_auth_on_db() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      revoke_auth_on_db_result result = new revoke_auth_on_db_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "revoke_auth_on_db failed: unknown result");
    }

    public boolean revoke_auth_on_tbl(String byWho, String who, List<String> privileges, String db, String tbl) throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      send_revoke_auth_on_tbl(byWho, who, privileges, db, tbl);
      return recv_revoke_auth_on_tbl();
    }

    public void send_revoke_auth_on_tbl(String byWho, String who, List<String> privileges, String db, String tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revoke_auth_on_tbl", TMessageType.CALL, seqid_));
      revoke_auth_on_tbl_args args = new revoke_auth_on_tbl_args();
      args.byWho = byWho;
      args.who = who;
      args.privileges = privileges;
      args.db = db;
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_revoke_auth_on_tbl() throws NoSuchObjectException, InvalidObjectException, MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      revoke_auth_on_tbl_result result = new revoke_auth_on_tbl_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      if (result.o2 != null) {
        throw result.o2;
      }
      if (result.o3 != null) {
        throw result.o3;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "revoke_auth_on_tbl failed: unknown result");
    }

    public boolean drop_auth_on_db(String byWho, String forWho, String db) throws MetaException, TException
    {
      send_drop_auth_on_db(byWho, forWho, db);
      return recv_drop_auth_on_db();
    }

    public void send_drop_auth_on_db(String byWho, String forWho, String db) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_auth_on_db", TMessageType.CALL, seqid_));
      drop_auth_on_db_args args = new drop_auth_on_db_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.db = db;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_auth_on_db() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_auth_on_db_result result = new drop_auth_on_db_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_auth_on_db failed: unknown result");
    }

    public boolean drop_auth_in_db(String byWho, String forWho) throws MetaException, TException
    {
      send_drop_auth_in_db(byWho, forWho);
      return recv_drop_auth_in_db();
    }

    public void send_drop_auth_in_db(String byWho, String forWho) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_auth_in_db", TMessageType.CALL, seqid_));
      drop_auth_in_db_args args = new drop_auth_in_db_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_auth_in_db() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_auth_in_db_result result = new drop_auth_in_db_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_auth_in_db failed: unknown result");
    }

    public boolean drop_auth_on_tbl(String byWho, String forWho, String db, String tbl) throws MetaException, TException
    {
      send_drop_auth_on_tbl(byWho, forWho, db, tbl);
      return recv_drop_auth_on_tbl();
    }

    public void send_drop_auth_on_tbl(String byWho, String forWho, String db, String tbl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_auth_on_tbl", TMessageType.CALL, seqid_));
      drop_auth_on_tbl_args args = new drop_auth_on_tbl_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.db = db;
      args.tbl = tbl;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_auth_on_tbl() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_auth_on_tbl_result result = new drop_auth_on_tbl_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_auth_on_tbl failed: unknown result");
    }

    public boolean drop_auth_in_tbl(String byWho, String forWho) throws MetaException, TException
    {
      send_drop_auth_in_tbl(byWho, forWho);
      return recv_drop_auth_in_tbl();
    }

    public void send_drop_auth_in_tbl(String byWho, String forWho) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_auth_in_tbl", TMessageType.CALL, seqid_));
      drop_auth_in_tbl_args args = new drop_auth_in_tbl_args();
      args.byWho = byWho;
      args.forWho = forWho;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_auth_in_tbl() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_auth_in_tbl_result result = new drop_auth_in_tbl_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_auth_in_tbl failed: unknown result");
    }

    public boolean create_index(IndexItem index) throws MetaException, TException
    {
      send_create_index(index);
      return recv_create_index();
    }

    public void send_create_index(IndexItem index) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_index", TMessageType.CALL, seqid_));
      create_index_args args = new create_index_args();
      args.index = index;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_create_index() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_index_result result = new create_index_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_index failed: unknown result");
    }

    public boolean drop_index(String db, String table, String name) throws MetaException, TException
    {
      send_drop_index(db, table, name);
      return recv_drop_index();
    }

    public void send_drop_index(String db, String table, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_index", TMessageType.CALL, seqid_));
      drop_index_args args = new drop_index_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_drop_index() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_index_result result = new drop_index_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_index failed: unknown result");
    }

    public int get_index_num(String db, String table) throws MetaException, TException
    {
      send_get_index_num(db, table);
      return recv_get_index_num();
    }

    public void send_get_index_num(String db, String table) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_num", TMessageType.CALL, seqid_));
      get_index_num_args args = new get_index_num_args();
      args.db = db;
      args.table = table;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_get_index_num() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_num_result result = new get_index_num_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_num failed: unknown result");
    }

    public int get_index_type(String db, String table, String name) throws MetaException, TException
    {
      send_get_index_type(db, table, name);
      return recv_get_index_type();
    }

    public void send_get_index_type(String db, String table, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_type", TMessageType.CALL, seqid_));
      get_index_type_args args = new get_index_type_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_get_index_type() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_type_result result = new get_index_type_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_type failed: unknown result");
    }

    public String get_index_field(String db, String table, String name) throws MetaException, TException
    {
      send_get_index_field(db, table, name);
      return recv_get_index_field();
    }

    public void send_get_index_field(String db, String table, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_field", TMessageType.CALL, seqid_));
      get_index_field_args args = new get_index_field_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_get_index_field() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_field_result result = new get_index_field_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_field failed: unknown result");
    }

    public String get_index_location(String db, String table, String name) throws MetaException, TException
    {
      send_get_index_location(db, table, name);
      return recv_get_index_location();
    }

    public void send_get_index_location(String db, String table, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_location", TMessageType.CALL, seqid_));
      get_index_location_args args = new get_index_location_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_get_index_location() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_location_result result = new get_index_location_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_location failed: unknown result");
    }

    public boolean set_index_location(String db, String table, String name, String location) throws MetaException, TException
    {
      send_set_index_location(db, table, name, location);
      return recv_set_index_location();
    }

    public void send_set_index_location(String db, String table, String name, String location) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("set_index_location", TMessageType.CALL, seqid_));
      set_index_location_args args = new set_index_location_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.location = location;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_set_index_location() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      set_index_location_result result = new set_index_location_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "set_index_location failed: unknown result");
    }

    public boolean set_index_status(String db, String table, String name, int status) throws MetaException, TException
    {
      send_set_index_status(db, table, name, status);
      return recv_set_index_status();
    }

    public void send_set_index_status(String db, String table, String name, int status) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("set_index_status", TMessageType.CALL, seqid_));
      set_index_status_args args = new set_index_status_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.status = status;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_set_index_status() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      set_index_status_result result = new set_index_status_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "set_index_status failed: unknown result");
    }

    public List<IndexItem> get_all_index_table(String db, String table) throws MetaException, TException
    {
      send_get_all_index_table(db, table);
      return recv_get_all_index_table();
    }

    public void send_get_all_index_table(String db, String table) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_all_index_table", TMessageType.CALL, seqid_));
      get_all_index_table_args args = new get_all_index_table_args();
      args.db = db;
      args.table = table;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<IndexItem> recv_get_all_index_table() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_all_index_table_result result = new get_all_index_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_all_index_table failed: unknown result");
    }

    public IndexItem get_index_info(String db, String table, String name) throws MetaException, TException
    {
      send_get_index_info(db, table, name);
      return recv_get_index_info();
    }

    public void send_get_index_info(String db, String table, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_index_info", TMessageType.CALL, seqid_));
      get_index_info_args args = new get_index_info_args();
      args.db = db;
      args.table = table;
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IndexItem recv_get_index_info() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_index_info_result result = new get_index_info_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_index_info failed: unknown result");
    }

    public List<IndexItem> get_all_index_sys() throws MetaException, TException
    {
      send_get_all_index_sys();
      return recv_get_all_index_sys();
    }

    public void send_get_all_index_sys() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_all_index_sys", TMessageType.CALL, seqid_));
      get_all_index_sys_args args = new get_all_index_sys_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<IndexItem> recv_get_all_index_sys() throws MetaException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_all_index_sys_result result = new get_all_index_sys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.o1 != null) {
        throw result.o1;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_all_index_sys failed: unknown result");
    }

  }
  public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor {
    private static final Logger LOGGER = Logger.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("create_database", new create_database());
      processMap_.put("get_database", new get_database());
      processMap_.put("drop_database", new drop_database());
      processMap_.put("get_databases", new get_databases());
      processMap_.put("get_type", new get_type());
      processMap_.put("create_type", new create_type());
      processMap_.put("drop_type", new drop_type());
      processMap_.put("get_type_all", new get_type_all());
      processMap_.put("get_fields", new get_fields());
      processMap_.put("get_schema", new get_schema());
      processMap_.put("create_table", new create_table());
      processMap_.put("drop_table", new drop_table());
      processMap_.put("get_tables", new get_tables());
      processMap_.put("get_table", new get_table());
      processMap_.put("alter_table", new alter_table());
      processMap_.put("get_partition", new get_partition());
      processMap_.put("get_partitions", new get_partitions());
      processMap_.put("alter_partition", new alter_partition());
      processMap_.put("add_table_statistics", new add_table_statistics());
      processMap_.put("delete_table_statistics", new delete_table_statistics());
      processMap_.put("get_table_statistics", new get_table_statistics());
      processMap_.put("get_table_statistics_multi", new get_table_statistics_multi());
      processMap_.put("get_table_statistics_names", new get_table_statistics_names());
      processMap_.put("add_fields_statistics", new add_fields_statistics());
      processMap_.put("delete_fields_statistics", new delete_fields_statistics());
      processMap_.put("get_fields_statistics", new get_fields_statistics());
      processMap_.put("get_fields_statistics_multi", new get_fields_statistics_multi());
      processMap_.put("get_fields_statistics_names", new get_fields_statistics_names());
      processMap_.put("create_user", new create_user());
      processMap_.put("drop_user", new drop_user());
      processMap_.put("get_user", new get_user());
      processMap_.put("get_users_all", new get_users_all());
      processMap_.put("set_passwd", new set_passwd());
      processMap_.put("is_a_user", new is_a_user());
      processMap_.put("is_a_role", new is_a_role());
      processMap_.put("create_role", new create_role());
      processMap_.put("drop_role", new drop_role());
      processMap_.put("get_role", new get_role());
      processMap_.put("get_roles_all", new get_roles_all());
      processMap_.put("grant_auth_sys", new grant_auth_sys());
      processMap_.put("grant_auth_role_sys", new grant_auth_role_sys());
      processMap_.put("grant_role_to_user", new grant_role_to_user());
      processMap_.put("grant_role_to_role", new grant_role_to_role());
      processMap_.put("grant_auth_on_db", new grant_auth_on_db());
      processMap_.put("grant_auth_on_tbl", new grant_auth_on_tbl());
      processMap_.put("get_auth_on_db", new get_auth_on_db());
      processMap_.put("get_auth_on_dbs", new get_auth_on_dbs());
      processMap_.put("get_db_auth", new get_db_auth());
      processMap_.put("get_db_auth_all", new get_db_auth_all());
      processMap_.put("get_auth_on_tbl", new get_auth_on_tbl());
      processMap_.put("get_auth_on_tbls", new get_auth_on_tbls());
      processMap_.put("get_tbl_auth", new get_tbl_auth());
      processMap_.put("get_tbl_auth_all", new get_tbl_auth_all());
      processMap_.put("revoke_auth_sys", new revoke_auth_sys());
      processMap_.put("revoke_auth_role_sys", new revoke_auth_role_sys());
      processMap_.put("revoke_role_from_user", new revoke_role_from_user());
      processMap_.put("revoke_role_from_role", new revoke_role_from_role());
      processMap_.put("revoke_auth_on_db", new revoke_auth_on_db());
      processMap_.put("revoke_auth_on_tbl", new revoke_auth_on_tbl());
      processMap_.put("drop_auth_on_db", new drop_auth_on_db());
      processMap_.put("drop_auth_in_db", new drop_auth_in_db());
      processMap_.put("drop_auth_on_tbl", new drop_auth_on_tbl());
      processMap_.put("drop_auth_in_tbl", new drop_auth_in_tbl());
      processMap_.put("create_index", new create_index());
      processMap_.put("drop_index", new drop_index());
      processMap_.put("get_index_num", new get_index_num());
      processMap_.put("get_index_type", new get_index_type());
      processMap_.put("get_index_field", new get_index_field());
      processMap_.put("get_index_location", new get_index_location());
      processMap_.put("set_index_location", new set_index_location());
      processMap_.put("set_index_status", new set_index_status());
      processMap_.put("get_all_index_table", new get_all_index_table());
      processMap_.put("get_index_info", new get_index_info());
      processMap_.put("get_all_index_sys", new get_all_index_sys());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class create_database implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_database_args args = new create_database_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_database_result result = new create_database_result();
        try {
          result.success = iface_.create_database(args.name, args.description);
          result.__isset.success = true;
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_database", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_database");
          oprot.writeMessageBegin(new TMessage("create_database", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_database", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_database implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_database_args args = new get_database_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_database_result result = new get_database_result();
        try {
          result.success = iface_.get_database(args.name);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_database", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_database");
          oprot.writeMessageBegin(new TMessage("get_database", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_database", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_database implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_database_args args = new drop_database_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_database_result result = new drop_database_result();
        try {
          result.success = iface_.drop_database(args.name);
          result.__isset.success = true;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_database", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_database");
          oprot.writeMessageBegin(new TMessage("drop_database", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_database", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_databases implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_databases_args args = new get_databases_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_databases_result result = new get_databases_result();
        try {
          result.success = iface_.get_databases();
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_databases", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_databases");
          oprot.writeMessageBegin(new TMessage("get_databases", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_databases", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_type_args args = new get_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_type_result result = new get_type_result();
        try {
          result.success = iface_.get_type(args.name);
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_type");
          oprot.writeMessageBegin(new TMessage("get_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_type_args args = new create_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_type_result result = new create_type_result();
        try {
          result.success = iface_.create_type(args.type);
          result.__isset.success = true;
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_type");
          oprot.writeMessageBegin(new TMessage("create_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_type_args args = new drop_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_type_result result = new drop_type_result();
        try {
          result.success = iface_.drop_type(args.type);
          result.__isset.success = true;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_type");
          oprot.writeMessageBegin(new TMessage("drop_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_type_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_type_all_args args = new get_type_all_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_type_all_result result = new get_type_all_result();
        try {
          result.success = iface_.get_type_all(args.name);
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_type_all", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_type_all");
          oprot.writeMessageBegin(new TMessage("get_type_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_type_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_fields implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_fields_args args = new get_fields_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_fields_result result = new get_fields_result();
        try {
          result.success = iface_.get_fields(args.db_name, args.table_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (UnknownTableException o2) {
          result.o2 = o2;
        } catch (UnknownDBException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_fields", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_fields");
          oprot.writeMessageBegin(new TMessage("get_fields", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_fields", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_schema implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_schema_args args = new get_schema_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_schema_result result = new get_schema_result();
        try {
          result.success = iface_.get_schema(args.db_name, args.table_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (UnknownTableException o2) {
          result.o2 = o2;
        } catch (UnknownDBException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_schema", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_schema");
          oprot.writeMessageBegin(new TMessage("get_schema", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_schema", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_table_args args = new create_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_table_result result = new create_table_result();
        try {
          iface_.create_table(args.tbl);
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (NoSuchObjectException o4) {
          result.o4 = o4;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_table");
          oprot.writeMessageBegin(new TMessage("create_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_table_args args = new drop_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_table_result result = new drop_table_result();
        try {
          iface_.drop_table(args.dbname, args.name, args.deleteData);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_table");
          oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_tables implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_tables_args args = new get_tables_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_tables_result result = new get_tables_result();
        try {
          result.success = iface_.get_tables(args.db_name, args.pattern);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_tables", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_tables");
          oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_table_args args = new get_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_table_result result = new get_table_result();
        try {
          result.success = iface_.get_table(args.dbname, args.tbl_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (NoSuchObjectException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_table");
          oprot.writeMessageBegin(new TMessage("get_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class alter_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        alter_table_args args = new alter_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        alter_table_result result = new alter_table_result();
        try {
          iface_.alter_table(args.dbname, args.tbl_name, args.new_tbl);
        } catch (InvalidOperationException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing alter_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing alter_table");
          oprot.writeMessageBegin(new TMessage("alter_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("alter_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partition_args args = new get_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partition_result result = new get_partition_result();
        try {
          result.success = iface_.get_partition(args.db_name, args.tbl_name, args.level);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partition");
          oprot.writeMessageBegin(new TMessage("get_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_partitions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_partitions_args args = new get_partitions_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_partitions_result result = new get_partitions_result();
        try {
          result.success = iface_.get_partitions(args.db_name, args.tbl_name);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_partitions", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_partitions");
          oprot.writeMessageBegin(new TMessage("get_partitions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_partitions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class alter_partition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        alter_partition_args args = new alter_partition_args();
        args.read(iprot);
        iprot.readMessageEnd();
        alter_partition_result result = new alter_partition_result();
        try {
          iface_.alter_partition(args.db_name, args.tbl_name, args.new_part);
        } catch (InvalidOperationException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing alter_partition", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing alter_partition");
          oprot.writeMessageBegin(new TMessage("alter_partition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("alter_partition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class add_table_statistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        add_table_statistics_args args = new add_table_statistics_args();
        args.read(iprot);
        iprot.readMessageEnd();
        add_table_statistics_result result = new add_table_statistics_result();
        try {
          result.success = iface_.add_table_statistics(args.new_table_statistics);
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing add_table_statistics", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing add_table_statistics");
          oprot.writeMessageBegin(new TMessage("add_table_statistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("add_table_statistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class delete_table_statistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        delete_table_statistics_args args = new delete_table_statistics_args();
        args.read(iprot);
        iprot.readMessageEnd();
        delete_table_statistics_result result = new delete_table_statistics_result();
        try {
          result.success = iface_.delete_table_statistics(args.table_statistics_name);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing delete_table_statistics", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing delete_table_statistics");
          oprot.writeMessageBegin(new TMessage("delete_table_statistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("delete_table_statistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_table_statistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_table_statistics_args args = new get_table_statistics_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_table_statistics_result result = new get_table_statistics_result();
        try {
          result.success = iface_.get_table_statistics(args.table_statistics_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_table_statistics", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_table_statistics");
          oprot.writeMessageBegin(new TMessage("get_table_statistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_table_statistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_table_statistics_multi implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_table_statistics_multi_args args = new get_table_statistics_multi_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_table_statistics_multi_result result = new get_table_statistics_multi_result();
        try {
          result.success = iface_.get_table_statistics_multi(args.max_parts);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_table_statistics_multi", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_table_statistics_multi");
          oprot.writeMessageBegin(new TMessage("get_table_statistics_multi", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_table_statistics_multi", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_table_statistics_names implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_table_statistics_names_args args = new get_table_statistics_names_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_table_statistics_names_result result = new get_table_statistics_names_result();
        try {
          result.success = iface_.get_table_statistics_names(args.max_parts);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_table_statistics_names", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_table_statistics_names");
          oprot.writeMessageBegin(new TMessage("get_table_statistics_names", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_table_statistics_names", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class add_fields_statistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        add_fields_statistics_args args = new add_fields_statistics_args();
        args.read(iprot);
        iprot.readMessageEnd();
        add_fields_statistics_result result = new add_fields_statistics_result();
        try {
          result.success = iface_.add_fields_statistics(args.new_fields_statistics);
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing add_fields_statistics", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing add_fields_statistics");
          oprot.writeMessageBegin(new TMessage("add_fields_statistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("add_fields_statistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class delete_fields_statistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        delete_fields_statistics_args args = new delete_fields_statistics_args();
        args.read(iprot);
        iprot.readMessageEnd();
        delete_fields_statistics_result result = new delete_fields_statistics_result();
        try {
          result.success = iface_.delete_fields_statistics(args.stat_table_name, args.stat_field_name);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing delete_fields_statistics", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing delete_fields_statistics");
          oprot.writeMessageBegin(new TMessage("delete_fields_statistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("delete_fields_statistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_fields_statistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_fields_statistics_args args = new get_fields_statistics_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_fields_statistics_result result = new get_fields_statistics_result();
        try {
          result.success = iface_.get_fields_statistics(args.stat_table_name, args.stat_field_name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_fields_statistics", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_fields_statistics");
          oprot.writeMessageBegin(new TMessage("get_fields_statistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_fields_statistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_fields_statistics_multi implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_fields_statistics_multi_args args = new get_fields_statistics_multi_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_fields_statistics_multi_result result = new get_fields_statistics_multi_result();
        try {
          result.success = iface_.get_fields_statistics_multi(args.stat_table_name, args.max_parts);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_fields_statistics_multi", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_fields_statistics_multi");
          oprot.writeMessageBegin(new TMessage("get_fields_statistics_multi", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_fields_statistics_multi", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_fields_statistics_names implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_fields_statistics_names_args args = new get_fields_statistics_names_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_fields_statistics_names_result result = new get_fields_statistics_names_result();
        try {
          result.success = iface_.get_fields_statistics_names(args.stat_table_name, args.max_parts);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_fields_statistics_names", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_fields_statistics_names");
          oprot.writeMessageBegin(new TMessage("get_fields_statistics_names", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_fields_statistics_names", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_user implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_user_args args = new create_user_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_user_result result = new create_user_result();
        try {
          result.success = iface_.create_user(args.byWho, args.newUser, args.passwd);
          result.__isset.success = true;
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_user", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_user");
          oprot.writeMessageBegin(new TMessage("create_user", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_user", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_user implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_user_args args = new drop_user_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_user_result result = new drop_user_result();
        try {
          result.success = iface_.drop_user(args.byWho, args.userName);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_user", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_user");
          oprot.writeMessageBegin(new TMessage("drop_user", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_user", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_user implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_user_args args = new get_user_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_user_result result = new get_user_result();
        try {
          result.success = iface_.get_user(args.byWho, args.userName);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_user", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_user");
          oprot.writeMessageBegin(new TMessage("get_user", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_user", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_users_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_users_all_args args = new get_users_all_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_users_all_result result = new get_users_all_result();
        try {
          result.success = iface_.get_users_all(args.byWho);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_users_all", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_users_all");
          oprot.writeMessageBegin(new TMessage("get_users_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_users_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class set_passwd implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        set_passwd_args args = new set_passwd_args();
        args.read(iprot);
        iprot.readMessageEnd();
        set_passwd_result result = new set_passwd_result();
        try {
          result.success = iface_.set_passwd(args.byWho, args.forWho, args.newPasswd);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing set_passwd", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing set_passwd");
          oprot.writeMessageBegin(new TMessage("set_passwd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("set_passwd", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class is_a_user implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        is_a_user_args args = new is_a_user_args();
        args.read(iprot);
        iprot.readMessageEnd();
        is_a_user_result result = new is_a_user_result();
        try {
          result.success = iface_.is_a_user(args.userName, args.passwd);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing is_a_user", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing is_a_user");
          oprot.writeMessageBegin(new TMessage("is_a_user", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("is_a_user", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class is_a_role implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        is_a_role_args args = new is_a_role_args();
        args.read(iprot);
        iprot.readMessageEnd();
        is_a_role_result result = new is_a_role_result();
        try {
          result.success = iface_.is_a_role(args.roleName);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing is_a_role", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing is_a_role");
          oprot.writeMessageBegin(new TMessage("is_a_role", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("is_a_role", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_role implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_role_args args = new create_role_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_role_result result = new create_role_result();
        try {
          result.success = iface_.create_role(args.byWho, args.roleName);
          result.__isset.success = true;
        } catch (AlreadyExistsException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_role", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_role");
          oprot.writeMessageBegin(new TMessage("create_role", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_role", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_role implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_role_args args = new drop_role_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_role_result result = new drop_role_result();
        try {
          result.success = iface_.drop_role(args.byWho, args.roleName);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_role", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_role");
          oprot.writeMessageBegin(new TMessage("drop_role", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_role", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_role implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_role_args args = new get_role_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_role_result result = new get_role_result();
        try {
          result.success = iface_.get_role(args.byWho, args.roleName);
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (MetaException o2) {
          result.o2 = o2;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_role", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_role");
          oprot.writeMessageBegin(new TMessage("get_role", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_role", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_roles_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_roles_all_args args = new get_roles_all_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_roles_all_result result = new get_roles_all_result();
        try {
          result.success = iface_.get_roles_all(args.byWho);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_roles_all", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_roles_all");
          oprot.writeMessageBegin(new TMessage("get_roles_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_roles_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class grant_auth_sys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        grant_auth_sys_args args = new grant_auth_sys_args();
        args.read(iprot);
        iprot.readMessageEnd();
        grant_auth_sys_result result = new grant_auth_sys_result();
        try {
          result.success = iface_.grant_auth_sys(args.byWho, args.userName, args.privileges);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grant_auth_sys", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grant_auth_sys");
          oprot.writeMessageBegin(new TMessage("grant_auth_sys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grant_auth_sys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class grant_auth_role_sys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        grant_auth_role_sys_args args = new grant_auth_role_sys_args();
        args.read(iprot);
        iprot.readMessageEnd();
        grant_auth_role_sys_result result = new grant_auth_role_sys_result();
        try {
          result.success = iface_.grant_auth_role_sys(args.byWho, args.roleName, args.privileges);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grant_auth_role_sys", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grant_auth_role_sys");
          oprot.writeMessageBegin(new TMessage("grant_auth_role_sys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grant_auth_role_sys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class grant_role_to_user implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        grant_role_to_user_args args = new grant_role_to_user_args();
        args.read(iprot);
        iprot.readMessageEnd();
        grant_role_to_user_result result = new grant_role_to_user_result();
        try {
          result.success = iface_.grant_role_to_user(args.byWho, args.userName, args.roleNames);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grant_role_to_user", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grant_role_to_user");
          oprot.writeMessageBegin(new TMessage("grant_role_to_user", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grant_role_to_user", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class grant_role_to_role implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        grant_role_to_role_args args = new grant_role_to_role_args();
        args.read(iprot);
        iprot.readMessageEnd();
        grant_role_to_role_result result = new grant_role_to_role_result();
        try {
          result.success = iface_.grant_role_to_role(args.byWho, args.roleName, args.roleNames);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grant_role_to_role", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grant_role_to_role");
          oprot.writeMessageBegin(new TMessage("grant_role_to_role", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grant_role_to_role", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class grant_auth_on_db implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        grant_auth_on_db_args args = new grant_auth_on_db_args();
        args.read(iprot);
        iprot.readMessageEnd();
        grant_auth_on_db_result result = new grant_auth_on_db_result();
        try {
          result.success = iface_.grant_auth_on_db(args.byWho, args.forWho, args.privileges, args.db);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grant_auth_on_db", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grant_auth_on_db");
          oprot.writeMessageBegin(new TMessage("grant_auth_on_db", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grant_auth_on_db", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class grant_auth_on_tbl implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        grant_auth_on_tbl_args args = new grant_auth_on_tbl_args();
        args.read(iprot);
        iprot.readMessageEnd();
        grant_auth_on_tbl_result result = new grant_auth_on_tbl_result();
        try {
          result.success = iface_.grant_auth_on_tbl(args.byWho, args.forWho, args.privileges, args.db, args.tbl);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grant_auth_on_tbl", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grant_auth_on_tbl");
          oprot.writeMessageBegin(new TMessage("grant_auth_on_tbl", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grant_auth_on_tbl", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_auth_on_db implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_auth_on_db_args args = new get_auth_on_db_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_auth_on_db_result result = new get_auth_on_db_result();
        try {
          result.success = iface_.get_auth_on_db(args.byWho, args.who, args.db);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_auth_on_db", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_auth_on_db");
          oprot.writeMessageBegin(new TMessage("get_auth_on_db", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_auth_on_db", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_auth_on_dbs implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_auth_on_dbs_args args = new get_auth_on_dbs_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_auth_on_dbs_result result = new get_auth_on_dbs_result();
        try {
          result.success = iface_.get_auth_on_dbs(args.byWho, args.who);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_auth_on_dbs", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_auth_on_dbs");
          oprot.writeMessageBegin(new TMessage("get_auth_on_dbs", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_auth_on_dbs", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_db_auth implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_db_auth_args args = new get_db_auth_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_db_auth_result result = new get_db_auth_result();
        try {
          result.success = iface_.get_db_auth(args.byWho, args.db);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_db_auth", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_db_auth");
          oprot.writeMessageBegin(new TMessage("get_db_auth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_db_auth", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_db_auth_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_db_auth_all_args args = new get_db_auth_all_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_db_auth_all_result result = new get_db_auth_all_result();
        try {
          result.success = iface_.get_db_auth_all(args.byWho);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_db_auth_all", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_db_auth_all");
          oprot.writeMessageBegin(new TMessage("get_db_auth_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_db_auth_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_auth_on_tbl implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_auth_on_tbl_args args = new get_auth_on_tbl_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_auth_on_tbl_result result = new get_auth_on_tbl_result();
        try {
          result.success = iface_.get_auth_on_tbl(args.byWho, args.who, args.db, args.tbl);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_auth_on_tbl", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_auth_on_tbl");
          oprot.writeMessageBegin(new TMessage("get_auth_on_tbl", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_auth_on_tbl", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_auth_on_tbls implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_auth_on_tbls_args args = new get_auth_on_tbls_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_auth_on_tbls_result result = new get_auth_on_tbls_result();
        try {
          result.success = iface_.get_auth_on_tbls(args.byWho, args.who);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_auth_on_tbls", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_auth_on_tbls");
          oprot.writeMessageBegin(new TMessage("get_auth_on_tbls", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_auth_on_tbls", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_tbl_auth implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_tbl_auth_args args = new get_tbl_auth_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_tbl_auth_result result = new get_tbl_auth_result();
        try {
          result.success = iface_.get_tbl_auth(args.byWho, args.db, args.tbl);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_tbl_auth", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_tbl_auth");
          oprot.writeMessageBegin(new TMessage("get_tbl_auth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_tbl_auth", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_tbl_auth_all implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_tbl_auth_all_args args = new get_tbl_auth_all_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_tbl_auth_all_result result = new get_tbl_auth_all_result();
        try {
          result.success = iface_.get_tbl_auth_all(args.byWho);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_tbl_auth_all", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_tbl_auth_all");
          oprot.writeMessageBegin(new TMessage("get_tbl_auth_all", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_tbl_auth_all", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revoke_auth_sys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revoke_auth_sys_args args = new revoke_auth_sys_args();
        args.read(iprot);
        iprot.readMessageEnd();
        revoke_auth_sys_result result = new revoke_auth_sys_result();
        try {
          result.success = iface_.revoke_auth_sys(args.byWho, args.userName, args.privileges);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revoke_auth_sys", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revoke_auth_sys");
          oprot.writeMessageBegin(new TMessage("revoke_auth_sys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revoke_auth_sys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revoke_auth_role_sys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revoke_auth_role_sys_args args = new revoke_auth_role_sys_args();
        args.read(iprot);
        iprot.readMessageEnd();
        revoke_auth_role_sys_result result = new revoke_auth_role_sys_result();
        try {
          result.success = iface_.revoke_auth_role_sys(args.byWho, args.roleName, args.privileges);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revoke_auth_role_sys", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revoke_auth_role_sys");
          oprot.writeMessageBegin(new TMessage("revoke_auth_role_sys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revoke_auth_role_sys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revoke_role_from_user implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revoke_role_from_user_args args = new revoke_role_from_user_args();
        args.read(iprot);
        iprot.readMessageEnd();
        revoke_role_from_user_result result = new revoke_role_from_user_result();
        try {
          result.success = iface_.revoke_role_from_user(args.byWho, args.userName, args.roleNames);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revoke_role_from_user", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revoke_role_from_user");
          oprot.writeMessageBegin(new TMessage("revoke_role_from_user", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revoke_role_from_user", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revoke_role_from_role implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revoke_role_from_role_args args = new revoke_role_from_role_args();
        args.read(iprot);
        iprot.readMessageEnd();
        revoke_role_from_role_result result = new revoke_role_from_role_result();
        try {
          result.success = iface_.revoke_role_from_role(args.byWho, args.roleName, args.roleNames);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revoke_role_from_role", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revoke_role_from_role");
          oprot.writeMessageBegin(new TMessage("revoke_role_from_role", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revoke_role_from_role", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revoke_auth_on_db implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revoke_auth_on_db_args args = new revoke_auth_on_db_args();
        args.read(iprot);
        iprot.readMessageEnd();
        revoke_auth_on_db_result result = new revoke_auth_on_db_result();
        try {
          result.success = iface_.revoke_auth_on_db(args.byWho, args.who, args.privileges, args.db);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revoke_auth_on_db", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revoke_auth_on_db");
          oprot.writeMessageBegin(new TMessage("revoke_auth_on_db", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revoke_auth_on_db", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revoke_auth_on_tbl implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revoke_auth_on_tbl_args args = new revoke_auth_on_tbl_args();
        args.read(iprot);
        iprot.readMessageEnd();
        revoke_auth_on_tbl_result result = new revoke_auth_on_tbl_result();
        try {
          result.success = iface_.revoke_auth_on_tbl(args.byWho, args.who, args.privileges, args.db, args.tbl);
          result.__isset.success = true;
        } catch (NoSuchObjectException o1) {
          result.o1 = o1;
        } catch (InvalidObjectException o2) {
          result.o2 = o2;
        } catch (MetaException o3) {
          result.o3 = o3;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revoke_auth_on_tbl", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revoke_auth_on_tbl");
          oprot.writeMessageBegin(new TMessage("revoke_auth_on_tbl", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revoke_auth_on_tbl", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_auth_on_db implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_auth_on_db_args args = new drop_auth_on_db_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_auth_on_db_result result = new drop_auth_on_db_result();
        try {
          result.success = iface_.drop_auth_on_db(args.byWho, args.forWho, args.db);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_auth_on_db", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_auth_on_db");
          oprot.writeMessageBegin(new TMessage("drop_auth_on_db", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_auth_on_db", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_auth_in_db implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_auth_in_db_args args = new drop_auth_in_db_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_auth_in_db_result result = new drop_auth_in_db_result();
        try {
          result.success = iface_.drop_auth_in_db(args.byWho, args.forWho);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_auth_in_db", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_auth_in_db");
          oprot.writeMessageBegin(new TMessage("drop_auth_in_db", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_auth_in_db", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_auth_on_tbl implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_auth_on_tbl_args args = new drop_auth_on_tbl_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_auth_on_tbl_result result = new drop_auth_on_tbl_result();
        try {
          result.success = iface_.drop_auth_on_tbl(args.byWho, args.forWho, args.db, args.tbl);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_auth_on_tbl", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_auth_on_tbl");
          oprot.writeMessageBegin(new TMessage("drop_auth_on_tbl", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_auth_on_tbl", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_auth_in_tbl implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_auth_in_tbl_args args = new drop_auth_in_tbl_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_auth_in_tbl_result result = new drop_auth_in_tbl_result();
        try {
          result.success = iface_.drop_auth_in_tbl(args.byWho, args.forWho);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_auth_in_tbl", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_auth_in_tbl");
          oprot.writeMessageBegin(new TMessage("drop_auth_in_tbl", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_auth_in_tbl", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class create_index implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_index_args args = new create_index_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_index_result result = new create_index_result();
        try {
          result.success = iface_.create_index(args.index);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing create_index", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing create_index");
          oprot.writeMessageBegin(new TMessage("create_index", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("create_index", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_index implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_index_args args = new drop_index_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_index_result result = new drop_index_result();
        try {
          result.success = iface_.drop_index(args.db, args.table, args.name);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing drop_index", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing drop_index");
          oprot.writeMessageBegin(new TMessage("drop_index", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("drop_index", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_num implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_num_args args = new get_index_num_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_num_result result = new get_index_num_result();
        try {
          result.success = iface_.get_index_num(args.db, args.table);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_num", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_num");
          oprot.writeMessageBegin(new TMessage("get_index_num", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_num", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_type implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_type_args args = new get_index_type_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_type_result result = new get_index_type_result();
        try {
          result.success = iface_.get_index_type(args.db, args.table, args.name);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_type", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_type");
          oprot.writeMessageBegin(new TMessage("get_index_type", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_type", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_field implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_field_args args = new get_index_field_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_field_result result = new get_index_field_result();
        try {
          result.success = iface_.get_index_field(args.db, args.table, args.name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_field", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_field");
          oprot.writeMessageBegin(new TMessage("get_index_field", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_field", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_location implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_location_args args = new get_index_location_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_location_result result = new get_index_location_result();
        try {
          result.success = iface_.get_index_location(args.db, args.table, args.name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_location", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_location");
          oprot.writeMessageBegin(new TMessage("get_index_location", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_location", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class set_index_location implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        set_index_location_args args = new set_index_location_args();
        args.read(iprot);
        iprot.readMessageEnd();
        set_index_location_result result = new set_index_location_result();
        try {
          result.success = iface_.set_index_location(args.db, args.table, args.name, args.location);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing set_index_location", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing set_index_location");
          oprot.writeMessageBegin(new TMessage("set_index_location", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("set_index_location", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class set_index_status implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        set_index_status_args args = new set_index_status_args();
        args.read(iprot);
        iprot.readMessageEnd();
        set_index_status_result result = new set_index_status_result();
        try {
          result.success = iface_.set_index_status(args.db, args.table, args.name, args.status);
          result.__isset.success = true;
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing set_index_status", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing set_index_status");
          oprot.writeMessageBegin(new TMessage("set_index_status", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("set_index_status", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_all_index_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_all_index_table_args args = new get_all_index_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_all_index_table_result result = new get_all_index_table_result();
        try {
          result.success = iface_.get_all_index_table(args.db, args.table);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_all_index_table", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_all_index_table");
          oprot.writeMessageBegin(new TMessage("get_all_index_table", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_all_index_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_index_info implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_index_info_args args = new get_index_info_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_index_info_result result = new get_index_info_result();
        try {
          result.success = iface_.get_index_info(args.db, args.table, args.name);
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_index_info", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_index_info");
          oprot.writeMessageBegin(new TMessage("get_index_info", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_index_info", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_all_index_sys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_all_index_sys_args args = new get_all_index_sys_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_all_index_sys_result result = new get_all_index_sys_result();
        try {
          result.success = iface_.get_all_index_sys();
        } catch (MetaException o1) {
          result.o1 = o1;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_all_index_sys", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_all_index_sys");
          oprot.writeMessageBegin(new TMessage("get_all_index_sys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_all_index_sys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class create_database_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_database_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
    private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)2);

    private String name;
    public static final int NAME = 1;
    private String description;
    public static final int DESCRIPTION = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_database_args.class, metaDataMap);
    }

    public create_database_args() {
    }

    public create_database_args(
      String name,
      String description)
    {
      this();
      this.name = name;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_database_args(create_database_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    @Override
    public create_database_args clone() {
      return new create_database_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public String getDescription() {
      return this.description;
    }

    public void setDescription(String description) {
      this.description = description;
    }

    public void unsetDescription() {
      this.description = null;
    }

    // Returns true if field description is set (has been asigned a value) and false otherwise
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      case DESCRIPTION:
        return getDescription();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      case DESCRIPTION:
        return isSetDescription();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_database_args)
        return this.equals((create_database_args)that);
      return false;
    }

    public boolean equals(create_database_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DESCRIPTION:
            if (field.type == TType.STRING) {
              this.description = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(this.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_database_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_database_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_database_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_database_result.class, metaDataMap);
    }

    public create_database_result() {
    }

    public create_database_result(
      boolean success,
      AlreadyExistsException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_database_result(create_database_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public create_database_result clone() {
      return new create_database_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_database_result)
        return this.equals((create_database_result)that);
      return false;
    }

    public boolean equals(create_database_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_database_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_database_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_database_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_database_args.class, metaDataMap);
    }

    public get_database_args() {
    }

    public get_database_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_database_args(get_database_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_database_args clone() {
      return new get_database_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_database_args)
        return this.equals((get_database_args)that);
      return false;
    }

    public boolean equals(get_database_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_database_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_database_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_database_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Database success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Database.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_database_result.class, metaDataMap);
    }

    public get_database_result() {
    }

    public get_database_result(
      Database success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_database_result(get_database_result other) {
      if (other.isSetSuccess()) {
        this.success = new Database(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_database_result clone() {
      return new get_database_result(this);
    }

    public Database getSuccess() {
      return this.success;
    }

    public void setSuccess(Database success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Database)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_database_result)
        return this.equals((get_database_result)that);
      return false;
    }

    public boolean equals(get_database_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Database();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_database_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_database_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_database_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_database_args.class, metaDataMap);
    }

    public drop_database_args() {
    }

    public drop_database_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_database_args(drop_database_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public drop_database_args clone() {
      return new drop_database_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_database_args)
        return this.equals((drop_database_args)that);
      return false;
    }

    public boolean equals(drop_database_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_database_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_database_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_database_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_database_result.class, metaDataMap);
    }

    public drop_database_result() {
    }

    public drop_database_result(
      boolean success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_database_result(drop_database_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_database_result clone() {
      return new drop_database_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_database_result)
        return this.equals((drop_database_result)that);
      return false;
    }

    public boolean equals(drop_database_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_database_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_databases_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_databases_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_databases_args.class, metaDataMap);
    }

    public get_databases_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_databases_args(get_databases_args other) {
    }

    @Override
    public get_databases_args clone() {
      return new get_databases_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_databases_args)
        return this.equals((get_databases_args)that);
      return false;
    }

    public boolean equals(get_databases_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_databases_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_databases_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_databases_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_databases_result.class, metaDataMap);
    }

    public get_databases_result() {
    }

    public get_databases_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_databases_result(get_databases_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_databases_result clone() {
      return new get_databases_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_databases_result)
        return this.equals((get_databases_result)that);
      return false;
    }

    public boolean equals(get_databases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list65 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list65.size);
                for (int _i66 = 0; _i66 < _list65.size; ++_i66)
                {
                  String _elem67;
                  _elem67 = iprot.readString();
                  this.success.add(_elem67);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter68 : this.success)          {
            oprot.writeString(_iter68);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_databases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_args.class, metaDataMap);
    }

    public get_type_args() {
    }

    public get_type_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_args(get_type_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_type_args clone() {
      return new get_type_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_args)
        return this.equals((get_type_args)that);
      return false;
    }

    public boolean equals(get_type_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)1);

    private Type success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Type.class)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_result.class, metaDataMap);
    }

    public get_type_result() {
    }

    public get_type_result(
      Type success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_result(get_type_result other) {
      if (other.isSetSuccess()) {
        this.success = new Type(other.success);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_type_result clone() {
      return new get_type_result(this);
    }

    public Type getSuccess() {
      return this.success;
    }

    public void setSuccess(Type success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Type)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_result)
        return this.equals((get_type_result)that);
      return false;
    }

    public boolean equals(get_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Type();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_type_args");
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRUCT, (short)1);

    private Type type;
    public static final int TYPE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Type.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_type_args.class, metaDataMap);
    }

    public create_type_args() {
    }

    public create_type_args(
      Type type)
    {
      this();
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_type_args(create_type_args other) {
      if (other.isSetType()) {
        this.type = new Type(other.type);
      }
    }

    @Override
    public create_type_args clone() {
      return new create_type_args(this);
    }

    public Type getType() {
      return this.type;
    }

    public void setType(Type type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    // Returns true if field type is set (has been asigned a value) and false otherwise
    public boolean isSetType() {
      return this.type != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Type)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return getType();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return isSetType();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_type_args)
        return this.equals((create_type_args)that);
      return false;
    }

    public boolean equals(create_type_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TYPE:
            if (field.type == TType.STRUCT) {
              this.type = new Type();
              this.type.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        this.type.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_type_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_type_result.class, metaDataMap);
    }

    public create_type_result() {
    }

    public create_type_result(
      boolean success,
      AlreadyExistsException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_type_result(create_type_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public create_type_result clone() {
      return new create_type_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_type_result)
        return this.equals((create_type_result)that);
      return false;
    }

    public boolean equals(create_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_type_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_type_args");
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)1);

    private String type;
    public static final int TYPE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_type_args.class, metaDataMap);
    }

    public drop_type_args() {
    }

    public drop_type_args(
      String type)
    {
      this();
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_type_args(drop_type_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    @Override
    public drop_type_args clone() {
      return new drop_type_args(this);
    }

    public String getType() {
      return this.type;
    }

    public void setType(String type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    // Returns true if field type is set (has been asigned a value) and false otherwise
    public boolean isSetType() {
      return this.type != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return getType();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TYPE:
        return isSetType();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_type_args)
        return this.equals((drop_type_args)that);
      return false;
    }

    public boolean equals(drop_type_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TYPE:
            if (field.type == TType.STRING) {
              this.type = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(this.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_type_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_type_result.class, metaDataMap);
    }

    public drop_type_result() {
    }

    public drop_type_result(
      boolean success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_type_result(drop_type_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_type_result clone() {
      return new drop_type_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_type_result)
        return this.equals((drop_type_result)that);
      return false;
    }

    public boolean equals(drop_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_type_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_all_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_all_args");
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);

    private String name;
    public static final int NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_all_args.class, metaDataMap);
    }

    public get_type_all_args() {
    }

    public get_type_all_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_all_args(get_type_all_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_type_all_args clone() {
      return new get_type_all_args(this);
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_all_args)
        return this.equals((get_type_all_args)that);
      return false;
    }

    public boolean equals(get_type_all_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_all_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_type_all_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_type_all_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)1);

    private Map<String,Type> success;
    public static final int SUCCESS = 0;
    private MetaException o2;
    public static final int O2 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new StructMetaData(TType.STRUCT, Type.class))));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_type_all_result.class, metaDataMap);
    }

    public get_type_all_result() {
    }

    public get_type_all_result(
      Map<String,Type> success,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_type_all_result(get_type_all_result other) {
      if (other.isSetSuccess()) {
        Map<String,Type> __this__success = new HashMap<String,Type>();
        for (Map.Entry<String, Type> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Type other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Type __this__success_copy_value = new Type(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_type_all_result clone() {
      return new get_type_all_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Type val) {
      if (this.success == null) {
        this.success = new HashMap<String,Type>();
      }
      this.success.put(key, val);
    }

    public Map<String,Type> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,Type> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Type>)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_type_all_result)
        return this.equals((get_type_all_result)that);
      return false;
    }

    public boolean equals(get_type_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.MAP) {
              {
                TMap _map69 = iprot.readMapBegin();
                this.success = new HashMap<String,Type>(2*_map69.size);
                for (int _i70 = 0; _i70 < _map69.size; ++_i70)
                {
                  String _key71;
                  Type _val72;
                  _key71 = iprot.readString();
                  _val72 = new Type();
                  _val72.read(iprot);
                  this.success.put(_key71, _val72);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Map.Entry<String, Type> _iter73 : this.success.entrySet())          {
            oprot.writeString(_iter73.getKey());
            _iter73.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_type_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("table_name", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String table_name;
    public static final int TABLE_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE_NAME, new FieldMetaData("table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_args.class, metaDataMap);
    }

    public get_fields_args() {
    }

    public get_fields_args(
      String db_name,
      String table_name)
    {
      this();
      this.db_name = db_name;
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_args(get_fields_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    @Override
    public get_fields_args clone() {
      return new get_fields_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTable_name() {
      return this.table_name;
    }

    public void setTable_name(String table_name) {
      this.table_name = table_name;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    // Returns true if field table_name is set (has been asigned a value) and false otherwise
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TABLE_NAME:
        return getTable_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TABLE_NAME:
        return isSetTable_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_args)
        return this.equals((get_fields_args)that);
      return false;
    }

    public boolean equals(get_fields_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE_NAME:
            if (field.type == TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private List<FieldSchema> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private UnknownTableException o2;
    public static final int O2 = 2;
    private UnknownDBException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, FieldSchema.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_result.class, metaDataMap);
    }

    public get_fields_result() {
    }

    public get_fields_result(
      List<FieldSchema> success,
      MetaException o1,
      UnknownTableException o2,
      UnknownDBException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_result(get_fields_result other) {
      if (other.isSetSuccess()) {
        List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
        for (FieldSchema other_element : other.success) {
          __this__success.add(new FieldSchema(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new UnknownTableException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new UnknownDBException(other.o3);
      }
    }

    @Override
    public get_fields_result clone() {
      return new get_fields_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FieldSchema> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FieldSchema elem) {
      if (this.success == null) {
        this.success = new ArrayList<FieldSchema>();
      }
      this.success.add(elem);
    }

    public List<FieldSchema> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<FieldSchema> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public UnknownTableException getO2() {
      return this.o2;
    }

    public void setO2(UnknownTableException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public UnknownDBException getO3() {
      return this.o3;
    }

    public void setO3(UnknownDBException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FieldSchema>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((UnknownTableException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((UnknownDBException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_result)
        return this.equals((get_fields_result)that);
      return false;
    }

    public boolean equals(get_fields_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list74 = iprot.readListBegin();
                this.success = new ArrayList<FieldSchema>(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  FieldSchema _elem76;
                  _elem76 = new FieldSchema();
                  _elem76.read(iprot);
                  this.success.add(_elem76);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new UnknownTableException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new UnknownDBException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (FieldSchema _iter77 : this.success)          {
            _iter77.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_schema_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_schema_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("table_name", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String table_name;
    public static final int TABLE_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE_NAME, new FieldMetaData("table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_schema_args.class, metaDataMap);
    }

    public get_schema_args() {
    }

    public get_schema_args(
      String db_name,
      String table_name)
    {
      this();
      this.db_name = db_name;
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_args(get_schema_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    @Override
    public get_schema_args clone() {
      return new get_schema_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTable_name() {
      return this.table_name;
    }

    public void setTable_name(String table_name) {
      this.table_name = table_name;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    // Returns true if field table_name is set (has been asigned a value) and false otherwise
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TABLE_NAME:
        return getTable_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TABLE_NAME:
        return isSetTable_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_args)
        return this.equals((get_schema_args)that);
      return false;
    }

    public boolean equals(get_schema_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE_NAME:
            if (field.type == TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_schema_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_schema_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private List<FieldSchema> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private UnknownTableException o2;
    public static final int O2 = 2;
    private UnknownDBException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, FieldSchema.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_schema_result.class, metaDataMap);
    }

    public get_schema_result() {
    }

    public get_schema_result(
      List<FieldSchema> success,
      MetaException o1,
      UnknownTableException o2,
      UnknownDBException o3)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_result(get_schema_result other) {
      if (other.isSetSuccess()) {
        List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
        for (FieldSchema other_element : other.success) {
          __this__success.add(new FieldSchema(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new UnknownTableException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new UnknownDBException(other.o3);
      }
    }

    @Override
    public get_schema_result clone() {
      return new get_schema_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FieldSchema> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FieldSchema elem) {
      if (this.success == null) {
        this.success = new ArrayList<FieldSchema>();
      }
      this.success.add(elem);
    }

    public List<FieldSchema> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<FieldSchema> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public UnknownTableException getO2() {
      return this.o2;
    }

    public void setO2(UnknownTableException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public UnknownDBException getO3() {
      return this.o3;
    }

    public void setO3(UnknownDBException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FieldSchema>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((UnknownTableException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((UnknownDBException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_result)
        return this.equals((get_schema_result)that);
      return false;
    }

    public boolean equals(get_schema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list78 = iprot.readListBegin();
                this.success = new ArrayList<FieldSchema>(_list78.size);
                for (int _i79 = 0; _i79 < _list78.size; ++_i79)
                {
                  FieldSchema _elem80;
                  _elem80 = new FieldSchema();
                  _elem80.read(iprot);
                  this.success.add(_elem80);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new UnknownTableException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new UnknownDBException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (FieldSchema _iter81 : this.success)          {
            _iter81.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_table_args");
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRUCT, (short)1);

    private Table tbl;
    public static final int TBL = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_table_args.class, metaDataMap);
    }

    public create_table_args() {
    }

    public create_table_args(
      Table tbl)
    {
      this();
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_args(create_table_args other) {
      if (other.isSetTbl()) {
        this.tbl = new Table(other.tbl);
      }
    }

    @Override
    public create_table_args clone() {
      return new create_table_args(this);
    }

    public Table getTbl() {
      return this.tbl;
    }

    public void setTbl(Table tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((Table)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_args)
        return this.equals((create_table_args)that);
      return false;
    }

    public boolean equals(create_table_args that) {
      if (that == null)
        return false;

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TBL:
            if (field.type == TType.STRUCT) {
              this.tbl = new Table();
              this.tbl.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        this.tbl.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_args(");
      boolean first = true;

      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_table_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);
    private static final TField O4_FIELD_DESC = new TField("o4", TType.STRUCT, (short)4);

    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;
    private NoSuchObjectException o4;
    public static final int O4 = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O4, new FieldMetaData("o4", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_table_result.class, metaDataMap);
    }

    public create_table_result() {
    }

    public create_table_result(
      AlreadyExistsException o1,
      InvalidObjectException o2,
      MetaException o3,
      NoSuchObjectException o4)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
      this.o4 = o4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_result(create_table_result other) {
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
      if (other.isSetO4()) {
        this.o4 = new NoSuchObjectException(other.o4);
      }
    }

    @Override
    public create_table_result clone() {
      return new create_table_result(this);
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public NoSuchObjectException getO4() {
      return this.o4;
    }

    public void setO4(NoSuchObjectException o4) {
      this.o4 = o4;
    }

    public void unsetO4() {
      this.o4 = null;
    }

    // Returns true if field o4 is set (has been asigned a value) and false otherwise
    public boolean isSetO4() {
      return this.o4 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      case O4:
        if (value == null) {
          unsetO4();
        } else {
          setO4((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      case O4:
        return getO4();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      case O4:
        return isSetO4();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_result)
        return this.equals((create_table_result)that);
      return false;
    }

    public boolean equals(create_table_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      boolean this_present_o4 = true && this.isSetO4();
      boolean that_present_o4 = true && that.isSetO4();
      if (this_present_o4 || that_present_o4) {
        if (!(this_present_o4 && that_present_o4))
          return false;
        if (!this.o4.equals(that.o4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O4:
            if (field.type == TType.STRUCT) {
              this.o4 = new NoSuchObjectException();
              this.o4.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO4()) {
        oprot.writeFieldBegin(O4_FIELD_DESC);
        this.o4.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o4:");
      if (this.o4 == null) {
        sb.append("null");
      } else {
        sb.append(this.o4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_table_args");
    private static final TField DBNAME_FIELD_DESC = new TField("dbname", TType.STRING, (short)1);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
    private static final TField DELETE_DATA_FIELD_DESC = new TField("deleteData", TType.BOOL, (short)3);

    private String dbname;
    public static final int DBNAME = 1;
    private String name;
    public static final int NAME = 2;
    private boolean deleteData;
    public static final int DELETEDATA = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean deleteData = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DBNAME, new FieldMetaData("dbname", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DELETEDATA, new FieldMetaData("deleteData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_table_args.class, metaDataMap);
    }

    public drop_table_args() {
    }

    public drop_table_args(
      String dbname,
      String name,
      boolean deleteData)
    {
      this();
      this.dbname = dbname;
      this.name = name;
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_args(drop_table_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      __isset.deleteData = other.__isset.deleteData;
      this.deleteData = other.deleteData;
    }

    @Override
    public drop_table_args clone() {
      return new drop_table_args(this);
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    // Returns true if field dbname is set (has been asigned a value) and false otherwise
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public boolean isDeleteData() {
      return this.deleteData;
    }

    public void setDeleteData(boolean deleteData) {
      this.deleteData = deleteData;
      this.__isset.deleteData = true;
    }

    public void unsetDeleteData() {
      this.__isset.deleteData = false;
    }

    // Returns true if field deleteData is set (has been asigned a value) and false otherwise
    public boolean isSetDeleteData() {
      return this.__isset.deleteData;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DELETEDATA:
        if (value == null) {
          unsetDeleteData();
        } else {
          setDeleteData((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return getDbname();

      case NAME:
        return getName();

      case DELETEDATA:
        return new Boolean(isDeleteData());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return isSetDbname();
      case NAME:
        return isSetName();
      case DELETEDATA:
        return isSetDeleteData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_args)
        return this.equals((drop_table_args)that);
      return false;
    }

    public boolean equals(drop_table_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_deleteData = true;
      boolean that_present_deleteData = true;
      if (this_present_deleteData || that_present_deleteData) {
        if (!(this_present_deleteData && that_present_deleteData))
          return false;
        if (this.deleteData != that.deleteData)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DBNAME:
            if (field.type == TType.STRING) {
              this.dbname = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DELETEDATA:
            if (field.type == TType.BOOL) {
              this.deleteData = iprot.readBool();
              this.__isset.deleteData = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(this.dbname);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);
      oprot.writeBool(this.deleteData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deleteData:");
      sb.append(this.deleteData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_table_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)2);

    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o3;
    public static final int O3 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_table_result.class, metaDataMap);
    }

    public drop_table_result() {
    }

    public drop_table_result(
      NoSuchObjectException o1,
      MetaException o3)
    {
      this();
      this.o1 = o1;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_result(drop_table_result other) {
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public drop_table_result clone() {
      return new drop_table_result(this);
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_result)
        return this.equals((drop_table_result)that);
      return false;
    }

    public boolean equals(drop_table_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tables_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tables_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField PATTERN_FIELD_DESC = new TField("pattern", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String pattern;
    public static final int PATTERN = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PATTERN, new FieldMetaData("pattern", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tables_args.class, metaDataMap);
    }

    public get_tables_args() {
    }

    public get_tables_args(
      String db_name,
      String pattern)
    {
      this();
      this.db_name = db_name;
      this.pattern = pattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_args(get_tables_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetPattern()) {
        this.pattern = other.pattern;
      }
    }

    @Override
    public get_tables_args clone() {
      return new get_tables_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getPattern() {
      return this.pattern;
    }

    public void setPattern(String pattern) {
      this.pattern = pattern;
    }

    public void unsetPattern() {
      this.pattern = null;
    }

    // Returns true if field pattern is set (has been asigned a value) and false otherwise
    public boolean isSetPattern() {
      return this.pattern != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case PATTERN:
        if (value == null) {
          unsetPattern();
        } else {
          setPattern((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case PATTERN:
        return getPattern();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case PATTERN:
        return isSetPattern();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_args)
        return this.equals((get_tables_args)that);
      return false;
    }

    public boolean equals(get_tables_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_pattern = true && this.isSetPattern();
      boolean that_present_pattern = true && that.isSetPattern();
      if (this_present_pattern || that_present_pattern) {
        if (!(this_present_pattern && that_present_pattern))
          return false;
        if (!this.pattern.equals(that.pattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PATTERN:
            if (field.type == TType.STRING) {
              this.pattern = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.pattern != null) {
        oprot.writeFieldBegin(PATTERN_FIELD_DESC);
        oprot.writeString(this.pattern);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pattern:");
      if (this.pattern == null) {
        sb.append("null");
      } else {
        sb.append(this.pattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tables_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tables_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tables_result.class, metaDataMap);
    }

    public get_tables_result() {
    }

    public get_tables_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_result(get_tables_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_tables_result clone() {
      return new get_tables_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_result)
        return this.equals((get_tables_result)that);
      return false;
    }

    public boolean equals(get_tables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list82 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list82.size);
                for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                {
                  String _elem84;
                  _elem84 = iprot.readString();
                  this.success.add(_elem84);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter85 : this.success)          {
            oprot.writeString(_iter85);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_args");
    private static final TField DBNAME_FIELD_DESC = new TField("dbname", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);

    private String dbname;
    public static final int DBNAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DBNAME, new FieldMetaData("dbname", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_args.class, metaDataMap);
    }

    public get_table_args() {
    }

    public get_table_args(
      String dbname,
      String tbl_name)
    {
      this();
      this.dbname = dbname;
      this.tbl_name = tbl_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_args(get_table_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
    }

    @Override
    public get_table_args clone() {
      return new get_table_args(this);
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    // Returns true if field dbname is set (has been asigned a value) and false otherwise
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return getDbname();

      case TBL_NAME:
        return getTbl_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return isSetDbname();
      case TBL_NAME:
        return isSetTbl_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_args)
        return this.equals((get_table_args)that);
      return false;
    }

    public boolean equals(get_table_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DBNAME:
            if (field.type == TType.STRING) {
              this.dbname = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(this.dbname);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Table success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;
    private NoSuchObjectException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_result.class, metaDataMap);
    }

    public get_table_result() {
    }

    public get_table_result(
      Table success,
      MetaException o1,
      NoSuchObjectException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_result(get_table_result other) {
      if (other.isSetSuccess()) {
        this.success = new Table(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new NoSuchObjectException(other.o2);
      }
    }

    @Override
    public get_table_result clone() {
      return new get_table_result(this);
    }

    public Table getSuccess() {
      return this.success;
    }

    public void setSuccess(Table success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public NoSuchObjectException getO2() {
      return this.o2;
    }

    public void setO2(NoSuchObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Table)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((NoSuchObjectException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_result)
        return this.equals((get_table_result)that);
      return false;
    }

    public boolean equals(get_table_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Table();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new NoSuchObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_table_args");
    private static final TField DBNAME_FIELD_DESC = new TField("dbname", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField NEW_TBL_FIELD_DESC = new TField("new_tbl", TType.STRUCT, (short)3);

    private String dbname;
    public static final int DBNAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private Table new_tbl;
    public static final int NEW_TBL = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DBNAME, new FieldMetaData("dbname", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NEW_TBL, new FieldMetaData("new_tbl", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Table.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_table_args.class, metaDataMap);
    }

    public alter_table_args() {
    }

    public alter_table_args(
      String dbname,
      String tbl_name,
      Table new_tbl)
    {
      this();
      this.dbname = dbname;
      this.tbl_name = tbl_name;
      this.new_tbl = new_tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_table_args(alter_table_args other) {
      if (other.isSetDbname()) {
        this.dbname = other.dbname;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetNew_tbl()) {
        this.new_tbl = new Table(other.new_tbl);
      }
    }

    @Override
    public alter_table_args clone() {
      return new alter_table_args(this);
    }

    public String getDbname() {
      return this.dbname;
    }

    public void setDbname(String dbname) {
      this.dbname = dbname;
    }

    public void unsetDbname() {
      this.dbname = null;
    }

    // Returns true if field dbname is set (has been asigned a value) and false otherwise
    public boolean isSetDbname() {
      return this.dbname != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public Table getNew_tbl() {
      return this.new_tbl;
    }

    public void setNew_tbl(Table new_tbl) {
      this.new_tbl = new_tbl;
    }

    public void unsetNew_tbl() {
      this.new_tbl = null;
    }

    // Returns true if field new_tbl is set (has been asigned a value) and false otherwise
    public boolean isSetNew_tbl() {
      return this.new_tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DBNAME:
        if (value == null) {
          unsetDbname();
        } else {
          setDbname((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case NEW_TBL:
        if (value == null) {
          unsetNew_tbl();
        } else {
          setNew_tbl((Table)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return getDbname();

      case TBL_NAME:
        return getTbl_name();

      case NEW_TBL:
        return getNew_tbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DBNAME:
        return isSetDbname();
      case TBL_NAME:
        return isSetTbl_name();
      case NEW_TBL:
        return isSetNew_tbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_table_args)
        return this.equals((alter_table_args)that);
      return false;
    }

    public boolean equals(alter_table_args that) {
      if (that == null)
        return false;

      boolean this_present_dbname = true && this.isSetDbname();
      boolean that_present_dbname = true && that.isSetDbname();
      if (this_present_dbname || that_present_dbname) {
        if (!(this_present_dbname && that_present_dbname))
          return false;
        if (!this.dbname.equals(that.dbname))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_new_tbl = true && this.isSetNew_tbl();
      boolean that_present_new_tbl = true && that.isSetNew_tbl();
      if (this_present_new_tbl || that_present_new_tbl) {
        if (!(this_present_new_tbl && that_present_new_tbl))
          return false;
        if (!this.new_tbl.equals(that.new_tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DBNAME:
            if (field.type == TType.STRING) {
              this.dbname = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEW_TBL:
            if (field.type == TType.STRUCT) {
              this.new_tbl = new Table();
              this.new_tbl.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(this.dbname);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.new_tbl != null) {
        oprot.writeFieldBegin(NEW_TBL_FIELD_DESC);
        this.new_tbl.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_table_args(");
      boolean first = true;

      sb.append("dbname:");
      if (this.dbname == null) {
        sb.append("null");
      } else {
        sb.append(this.dbname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_tbl:");
      if (this.new_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.new_tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_table_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private InvalidOperationException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_table_result.class, metaDataMap);
    }

    public alter_table_result() {
    }

    public alter_table_result(
      InvalidOperationException o1,
      MetaException o2)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_table_result(alter_table_result other) {
      if (other.isSetO1()) {
        this.o1 = new InvalidOperationException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public alter_table_result clone() {
      return new alter_table_result(this);
    }

    public InvalidOperationException getO1() {
      return this.o1;
    }

    public void setO1(InvalidOperationException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidOperationException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_table_result)
        return this.equals((alter_table_result)that);
      return false;
    }

    public boolean equals(alter_table_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidOperationException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_table_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField LEVEL_FIELD_DESC = new TField("level", TType.I32, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private int level;
    public static final int LEVEL = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean level = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(LEVEL, new FieldMetaData("level", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_args.class, metaDataMap);
    }

    public get_partition_args() {
    }

    public get_partition_args(
      String db_name,
      String tbl_name,
      int level)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.level = level;
      this.__isset.level = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_args(get_partition_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      __isset.level = other.__isset.level;
      this.level = other.level;
    }

    @Override
    public get_partition_args clone() {
      return new get_partition_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public int getLevel() {
      return this.level;
    }

    public void setLevel(int level) {
      this.level = level;
      this.__isset.level = true;
    }

    public void unsetLevel() {
      this.__isset.level = false;
    }

    // Returns true if field level is set (has been asigned a value) and false otherwise
    public boolean isSetLevel() {
      return this.__isset.level;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case LEVEL:
        return new Integer(getLevel());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case LEVEL:
        return isSetLevel();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_args)
        return this.equals((get_partition_args)that);
      return false;
    }

    public boolean equals(get_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_level = true;
      boolean that_present_level = true;
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (this.level != that.level)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LEVEL:
            if (field.type == TType.I32) {
              this.level = iprot.readI32();
              this.__isset.level = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(this.level);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partition_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private Partition success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partition_result.class, metaDataMap);
    }

    public get_partition_result() {
    }

    public get_partition_result(
      Partition success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partition_result(get_partition_result other) {
      if (other.isSetSuccess()) {
        this.success = new Partition(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_partition_result clone() {
      return new get_partition_result(this);
    }

    public Partition getSuccess() {
      return this.success;
    }

    public void setSuccess(Partition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Partition)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partition_result)
        return this.equals((get_partition_result)that);
      return false;
    }

    public boolean equals(get_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Partition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_args.class, metaDataMap);
    }

    public get_partitions_args() {
    }

    public get_partitions_args(
      String db_name,
      String tbl_name)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_args(get_partitions_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
    }

    @Override
    public get_partitions_args clone() {
      return new get_partitions_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_args)
        return this.equals((get_partitions_args)that);
      return false;
    }

    public boolean equals(get_partitions_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_partitions_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_partitions_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<Partition> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, Partition.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_partitions_result.class, metaDataMap);
    }

    public get_partitions_result() {
    }

    public get_partitions_result(
      List<Partition> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_partitions_result(get_partitions_result other) {
      if (other.isSetSuccess()) {
        List<Partition> __this__success = new ArrayList<Partition>();
        for (Partition other_element : other.success) {
          __this__success.add(new Partition(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_partitions_result clone() {
      return new get_partitions_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Partition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Partition elem) {
      if (this.success == null) {
        this.success = new ArrayList<Partition>();
      }
      this.success.add(elem);
    }

    public List<Partition> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Partition> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Partition>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_partitions_result)
        return this.equals((get_partitions_result)that);
      return false;
    }

    public boolean equals(get_partitions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list86 = iprot.readListBegin();
                this.success = new ArrayList<Partition>(_list86.size);
                for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                {
                  Partition _elem88;
                  _elem88 = new Partition();
                  _elem88.read(iprot);
                  this.success.add(_elem88);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Partition _iter89 : this.success)          {
            _iter89.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_partitions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_partition_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_partition_args");
    private static final TField DB_NAME_FIELD_DESC = new TField("db_name", TType.STRING, (short)1);
    private static final TField TBL_NAME_FIELD_DESC = new TField("tbl_name", TType.STRING, (short)2);
    private static final TField NEW_PART_FIELD_DESC = new TField("new_part", TType.STRUCT, (short)3);

    private String db_name;
    public static final int DB_NAME = 1;
    private String tbl_name;
    public static final int TBL_NAME = 2;
    private Partition new_part;
    public static final int NEW_PART = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB_NAME, new FieldMetaData("db_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL_NAME, new FieldMetaData("tbl_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NEW_PART, new FieldMetaData("new_part", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Partition.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_partition_args.class, metaDataMap);
    }

    public alter_partition_args() {
    }

    public alter_partition_args(
      String db_name,
      String tbl_name,
      Partition new_part)
    {
      this();
      this.db_name = db_name;
      this.tbl_name = tbl_name;
      this.new_part = new_part;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_partition_args(alter_partition_args other) {
      if (other.isSetDb_name()) {
        this.db_name = other.db_name;
      }
      if (other.isSetTbl_name()) {
        this.tbl_name = other.tbl_name;
      }
      if (other.isSetNew_part()) {
        this.new_part = new Partition(other.new_part);
      }
    }

    @Override
    public alter_partition_args clone() {
      return new alter_partition_args(this);
    }

    public String getDb_name() {
      return this.db_name;
    }

    public void setDb_name(String db_name) {
      this.db_name = db_name;
    }

    public void unsetDb_name() {
      this.db_name = null;
    }

    // Returns true if field db_name is set (has been asigned a value) and false otherwise
    public boolean isSetDb_name() {
      return this.db_name != null;
    }

    public String getTbl_name() {
      return this.tbl_name;
    }

    public void setTbl_name(String tbl_name) {
      this.tbl_name = tbl_name;
    }

    public void unsetTbl_name() {
      this.tbl_name = null;
    }

    // Returns true if field tbl_name is set (has been asigned a value) and false otherwise
    public boolean isSetTbl_name() {
      return this.tbl_name != null;
    }

    public Partition getNew_part() {
      return this.new_part;
    }

    public void setNew_part(Partition new_part) {
      this.new_part = new_part;
    }

    public void unsetNew_part() {
      this.new_part = null;
    }

    // Returns true if field new_part is set (has been asigned a value) and false otherwise
    public boolean isSetNew_part() {
      return this.new_part != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB_NAME:
        if (value == null) {
          unsetDb_name();
        } else {
          setDb_name((String)value);
        }
        break;

      case TBL_NAME:
        if (value == null) {
          unsetTbl_name();
        } else {
          setTbl_name((String)value);
        }
        break;

      case NEW_PART:
        if (value == null) {
          unsetNew_part();
        } else {
          setNew_part((Partition)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return getDb_name();

      case TBL_NAME:
        return getTbl_name();

      case NEW_PART:
        return getNew_part();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB_NAME:
        return isSetDb_name();
      case TBL_NAME:
        return isSetTbl_name();
      case NEW_PART:
        return isSetNew_part();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_partition_args)
        return this.equals((alter_partition_args)that);
      return false;
    }

    public boolean equals(alter_partition_args that) {
      if (that == null)
        return false;

      boolean this_present_db_name = true && this.isSetDb_name();
      boolean that_present_db_name = true && that.isSetDb_name();
      if (this_present_db_name || that_present_db_name) {
        if (!(this_present_db_name && that_present_db_name))
          return false;
        if (!this.db_name.equals(that.db_name))
          return false;
      }

      boolean this_present_tbl_name = true && this.isSetTbl_name();
      boolean that_present_tbl_name = true && that.isSetTbl_name();
      if (this_present_tbl_name || that_present_tbl_name) {
        if (!(this_present_tbl_name && that_present_tbl_name))
          return false;
        if (!this.tbl_name.equals(that.tbl_name))
          return false;
      }

      boolean this_present_new_part = true && this.isSetNew_part();
      boolean that_present_new_part = true && that.isSetNew_part();
      if (this_present_new_part || that_present_new_part) {
        if (!(this_present_new_part && that_present_new_part))
          return false;
        if (!this.new_part.equals(that.new_part))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB_NAME:
            if (field.type == TType.STRING) {
              this.db_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL_NAME:
            if (field.type == TType.STRING) {
              this.tbl_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEW_PART:
            if (field.type == TType.STRUCT) {
              this.new_part = new Partition();
              this.new_part.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(this.db_name);
        oprot.writeFieldEnd();
      }
      if (this.tbl_name != null) {
        oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);
        oprot.writeString(this.tbl_name);
        oprot.writeFieldEnd();
      }
      if (this.new_part != null) {
        oprot.writeFieldBegin(NEW_PART_FIELD_DESC);
        this.new_part.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_partition_args(");
      boolean first = true;

      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl_name:");
      if (this.tbl_name == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_part:");
      if (this.new_part == null) {
        sb.append("null");
      } else {
        sb.append(this.new_part);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class alter_partition_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("alter_partition_result");
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private InvalidOperationException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(alter_partition_result.class, metaDataMap);
    }

    public alter_partition_result() {
    }

    public alter_partition_result(
      InvalidOperationException o1,
      MetaException o2)
    {
      this();
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_partition_result(alter_partition_result other) {
      if (other.isSetO1()) {
        this.o1 = new InvalidOperationException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public alter_partition_result clone() {
      return new alter_partition_result(this);
    }

    public InvalidOperationException getO1() {
      return this.o1;
    }

    public void setO1(InvalidOperationException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((InvalidOperationException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_partition_result)
        return this.equals((alter_partition_result)that);
      return false;
    }

    public boolean equals(alter_partition_result that) {
      if (that == null)
        return false;

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new InvalidOperationException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_partition_result(");
      boolean first = true;

      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_table_statistics_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_table_statistics_args");
    private static final TField NEW_TABLE_STATISTICS_FIELD_DESC = new TField("new_table_statistics", TType.STRUCT, (short)1);

    private tdw_sys_table_statistics new_table_statistics;
    public static final int NEW_TABLE_STATISTICS = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NEW_TABLE_STATISTICS, new FieldMetaData("new_table_statistics", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, tdw_sys_table_statistics.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_table_statistics_args.class, metaDataMap);
    }

    public add_table_statistics_args() {
    }

    public add_table_statistics_args(
      tdw_sys_table_statistics new_table_statistics)
    {
      this();
      this.new_table_statistics = new_table_statistics;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_table_statistics_args(add_table_statistics_args other) {
      if (other.isSetNew_table_statistics()) {
        this.new_table_statistics = new tdw_sys_table_statistics(other.new_table_statistics);
      }
    }

    @Override
    public add_table_statistics_args clone() {
      return new add_table_statistics_args(this);
    }

    public tdw_sys_table_statistics getNew_table_statistics() {
      return this.new_table_statistics;
    }

    public void setNew_table_statistics(tdw_sys_table_statistics new_table_statistics) {
      this.new_table_statistics = new_table_statistics;
    }

    public void unsetNew_table_statistics() {
      this.new_table_statistics = null;
    }

    // Returns true if field new_table_statistics is set (has been asigned a value) and false otherwise
    public boolean isSetNew_table_statistics() {
      return this.new_table_statistics != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NEW_TABLE_STATISTICS:
        if (value == null) {
          unsetNew_table_statistics();
        } else {
          setNew_table_statistics((tdw_sys_table_statistics)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NEW_TABLE_STATISTICS:
        return getNew_table_statistics();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NEW_TABLE_STATISTICS:
        return isSetNew_table_statistics();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_table_statistics_args)
        return this.equals((add_table_statistics_args)that);
      return false;
    }

    public boolean equals(add_table_statistics_args that) {
      if (that == null)
        return false;

      boolean this_present_new_table_statistics = true && this.isSetNew_table_statistics();
      boolean that_present_new_table_statistics = true && that.isSetNew_table_statistics();
      if (this_present_new_table_statistics || that_present_new_table_statistics) {
        if (!(this_present_new_table_statistics && that_present_new_table_statistics))
          return false;
        if (!this.new_table_statistics.equals(that.new_table_statistics))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NEW_TABLE_STATISTICS:
            if (field.type == TType.STRUCT) {
              this.new_table_statistics = new tdw_sys_table_statistics();
              this.new_table_statistics.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.new_table_statistics != null) {
        oprot.writeFieldBegin(NEW_TABLE_STATISTICS_FIELD_DESC);
        this.new_table_statistics.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_table_statistics_args(");
      boolean first = true;

      sb.append("new_table_statistics:");
      if (this.new_table_statistics == null) {
        sb.append("null");
      } else {
        sb.append(this.new_table_statistics);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_table_statistics_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_table_statistics_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private tdw_sys_table_statistics success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, tdw_sys_table_statistics.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_table_statistics_result.class, metaDataMap);
    }

    public add_table_statistics_result() {
    }

    public add_table_statistics_result(
      tdw_sys_table_statistics success,
      AlreadyExistsException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_table_statistics_result(add_table_statistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new tdw_sys_table_statistics(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public add_table_statistics_result clone() {
      return new add_table_statistics_result(this);
    }

    public tdw_sys_table_statistics getSuccess() {
      return this.success;
    }

    public void setSuccess(tdw_sys_table_statistics success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((tdw_sys_table_statistics)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_table_statistics_result)
        return this.equals((add_table_statistics_result)that);
      return false;
    }

    public boolean equals(add_table_statistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new tdw_sys_table_statistics();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_table_statistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class delete_table_statistics_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delete_table_statistics_args");
    private static final TField TABLE_STATISTICS_NAME_FIELD_DESC = new TField("table_statistics_name", TType.STRING, (short)1);

    private String table_statistics_name;
    public static final int TABLE_STATISTICS_NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TABLE_STATISTICS_NAME, new FieldMetaData("table_statistics_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(delete_table_statistics_args.class, metaDataMap);
    }

    public delete_table_statistics_args() {
    }

    public delete_table_statistics_args(
      String table_statistics_name)
    {
      this();
      this.table_statistics_name = table_statistics_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_table_statistics_args(delete_table_statistics_args other) {
      if (other.isSetTable_statistics_name()) {
        this.table_statistics_name = other.table_statistics_name;
      }
    }

    @Override
    public delete_table_statistics_args clone() {
      return new delete_table_statistics_args(this);
    }

    public String getTable_statistics_name() {
      return this.table_statistics_name;
    }

    public void setTable_statistics_name(String table_statistics_name) {
      this.table_statistics_name = table_statistics_name;
    }

    public void unsetTable_statistics_name() {
      this.table_statistics_name = null;
    }

    // Returns true if field table_statistics_name is set (has been asigned a value) and false otherwise
    public boolean isSetTable_statistics_name() {
      return this.table_statistics_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TABLE_STATISTICS_NAME:
        if (value == null) {
          unsetTable_statistics_name();
        } else {
          setTable_statistics_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TABLE_STATISTICS_NAME:
        return getTable_statistics_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TABLE_STATISTICS_NAME:
        return isSetTable_statistics_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_table_statistics_args)
        return this.equals((delete_table_statistics_args)that);
      return false;
    }

    public boolean equals(delete_table_statistics_args that) {
      if (that == null)
        return false;

      boolean this_present_table_statistics_name = true && this.isSetTable_statistics_name();
      boolean that_present_table_statistics_name = true && that.isSetTable_statistics_name();
      if (this_present_table_statistics_name || that_present_table_statistics_name) {
        if (!(this_present_table_statistics_name && that_present_table_statistics_name))
          return false;
        if (!this.table_statistics_name.equals(that.table_statistics_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TABLE_STATISTICS_NAME:
            if (field.type == TType.STRING) {
              this.table_statistics_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.table_statistics_name != null) {
        oprot.writeFieldBegin(TABLE_STATISTICS_NAME_FIELD_DESC);
        oprot.writeString(this.table_statistics_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_table_statistics_args(");
      boolean first = true;

      sb.append("table_statistics_name:");
      if (this.table_statistics_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_statistics_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class delete_table_statistics_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delete_table_statistics_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(delete_table_statistics_result.class, metaDataMap);
    }

    public delete_table_statistics_result() {
    }

    public delete_table_statistics_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_table_statistics_result(delete_table_statistics_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public delete_table_statistics_result clone() {
      return new delete_table_statistics_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_table_statistics_result)
        return this.equals((delete_table_statistics_result)that);
      return false;
    }

    public boolean equals(delete_table_statistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_table_statistics_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_statistics_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_statistics_args");
    private static final TField TABLE_STATISTICS_NAME_FIELD_DESC = new TField("table_statistics_name", TType.STRING, (short)1);

    private String table_statistics_name;
    public static final int TABLE_STATISTICS_NAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(TABLE_STATISTICS_NAME, new FieldMetaData("table_statistics_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_statistics_args.class, metaDataMap);
    }

    public get_table_statistics_args() {
    }

    public get_table_statistics_args(
      String table_statistics_name)
    {
      this();
      this.table_statistics_name = table_statistics_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_statistics_args(get_table_statistics_args other) {
      if (other.isSetTable_statistics_name()) {
        this.table_statistics_name = other.table_statistics_name;
      }
    }

    @Override
    public get_table_statistics_args clone() {
      return new get_table_statistics_args(this);
    }

    public String getTable_statistics_name() {
      return this.table_statistics_name;
    }

    public void setTable_statistics_name(String table_statistics_name) {
      this.table_statistics_name = table_statistics_name;
    }

    public void unsetTable_statistics_name() {
      this.table_statistics_name = null;
    }

    // Returns true if field table_statistics_name is set (has been asigned a value) and false otherwise
    public boolean isSetTable_statistics_name() {
      return this.table_statistics_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case TABLE_STATISTICS_NAME:
        if (value == null) {
          unsetTable_statistics_name();
        } else {
          setTable_statistics_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case TABLE_STATISTICS_NAME:
        return getTable_statistics_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case TABLE_STATISTICS_NAME:
        return isSetTable_statistics_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_statistics_args)
        return this.equals((get_table_statistics_args)that);
      return false;
    }

    public boolean equals(get_table_statistics_args that) {
      if (that == null)
        return false;

      boolean this_present_table_statistics_name = true && this.isSetTable_statistics_name();
      boolean that_present_table_statistics_name = true && that.isSetTable_statistics_name();
      if (this_present_table_statistics_name || that_present_table_statistics_name) {
        if (!(this_present_table_statistics_name && that_present_table_statistics_name))
          return false;
        if (!this.table_statistics_name.equals(that.table_statistics_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TABLE_STATISTICS_NAME:
            if (field.type == TType.STRING) {
              this.table_statistics_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.table_statistics_name != null) {
        oprot.writeFieldBegin(TABLE_STATISTICS_NAME_FIELD_DESC);
        oprot.writeString(this.table_statistics_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_statistics_args(");
      boolean first = true;

      sb.append("table_statistics_name:");
      if (this.table_statistics_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_statistics_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_statistics_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_statistics_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private tdw_sys_table_statistics success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, tdw_sys_table_statistics.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_statistics_result.class, metaDataMap);
    }

    public get_table_statistics_result() {
    }

    public get_table_statistics_result(
      tdw_sys_table_statistics success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_statistics_result(get_table_statistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new tdw_sys_table_statistics(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_table_statistics_result clone() {
      return new get_table_statistics_result(this);
    }

    public tdw_sys_table_statistics getSuccess() {
      return this.success;
    }

    public void setSuccess(tdw_sys_table_statistics success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((tdw_sys_table_statistics)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_statistics_result)
        return this.equals((get_table_statistics_result)that);
      return false;
    }

    public boolean equals(get_table_statistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new tdw_sys_table_statistics();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_statistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_statistics_multi_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_statistics_multi_args");
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I32, (short)1);

    private int max_parts;
    public static final int MAX_PARTS = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_statistics_multi_args.class, metaDataMap);
    }

    public get_table_statistics_multi_args() {
      this.max_parts = -1;

    }

    public get_table_statistics_multi_args(
      int max_parts)
    {
      this();
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_statistics_multi_args(get_table_statistics_multi_args other) {
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_table_statistics_multi_args clone() {
      return new get_table_statistics_multi_args(this);
    }

    public int getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(int max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case MAX_PARTS:
        return new Integer(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_statistics_multi_args)
        return this.equals((get_table_statistics_multi_args)that);
      return false;
    }

    public boolean equals(get_table_statistics_multi_args that) {
      if (that == null)
        return false;

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MAX_PARTS:
            if (field.type == TType.I32) {
              this.max_parts = iprot.readI32();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI32(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_statistics_multi_args(");
      boolean first = true;

      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_statistics_multi_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_statistics_multi_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<tdw_sys_table_statistics> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, tdw_sys_table_statistics.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_statistics_multi_result.class, metaDataMap);
    }

    public get_table_statistics_multi_result() {
    }

    public get_table_statistics_multi_result(
      List<tdw_sys_table_statistics> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_statistics_multi_result(get_table_statistics_multi_result other) {
      if (other.isSetSuccess()) {
        List<tdw_sys_table_statistics> __this__success = new ArrayList<tdw_sys_table_statistics>();
        for (tdw_sys_table_statistics other_element : other.success) {
          __this__success.add(new tdw_sys_table_statistics(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_table_statistics_multi_result clone() {
      return new get_table_statistics_multi_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<tdw_sys_table_statistics> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(tdw_sys_table_statistics elem) {
      if (this.success == null) {
        this.success = new ArrayList<tdw_sys_table_statistics>();
      }
      this.success.add(elem);
    }

    public List<tdw_sys_table_statistics> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<tdw_sys_table_statistics> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<tdw_sys_table_statistics>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_statistics_multi_result)
        return this.equals((get_table_statistics_multi_result)that);
      return false;
    }

    public boolean equals(get_table_statistics_multi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list90 = iprot.readListBegin();
                this.success = new ArrayList<tdw_sys_table_statistics>(_list90.size);
                for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                {
                  tdw_sys_table_statistics _elem92;
                  _elem92 = new tdw_sys_table_statistics();
                  _elem92.read(iprot);
                  this.success.add(_elem92);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (tdw_sys_table_statistics _iter93 : this.success)          {
            _iter93.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_statistics_multi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_statistics_names_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_statistics_names_args");
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I32, (short)1);

    private int max_parts;
    public static final int MAX_PARTS = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_statistics_names_args.class, metaDataMap);
    }

    public get_table_statistics_names_args() {
      this.max_parts = -1;

    }

    public get_table_statistics_names_args(
      int max_parts)
    {
      this();
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_statistics_names_args(get_table_statistics_names_args other) {
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_table_statistics_names_args clone() {
      return new get_table_statistics_names_args(this);
    }

    public int getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(int max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case MAX_PARTS:
        return new Integer(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_statistics_names_args)
        return this.equals((get_table_statistics_names_args)that);
      return false;
    }

    public boolean equals(get_table_statistics_names_args that) {
      if (that == null)
        return false;

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MAX_PARTS:
            if (field.type == TType.I32) {
              this.max_parts = iprot.readI32();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI32(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_statistics_names_args(");
      boolean first = true;

      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_table_statistics_names_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_table_statistics_names_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<String> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_table_statistics_names_result.class, metaDataMap);
    }

    public get_table_statistics_names_result() {
    }

    public get_table_statistics_names_result(
      List<String> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_statistics_names_result(get_table_statistics_names_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_table_statistics_names_result clone() {
      return new get_table_statistics_names_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_statistics_names_result)
        return this.equals((get_table_statistics_names_result)that);
      return false;
    }

    public boolean equals(get_table_statistics_names_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list94 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list94.size);
                for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                {
                  String _elem96;
                  _elem96 = iprot.readString();
                  this.success.add(_elem96);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter97 : this.success)          {
            oprot.writeString(_iter97);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_statistics_names_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_fields_statistics_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_fields_statistics_args");
    private static final TField NEW_FIELDS_STATISTICS_FIELD_DESC = new TField("new_fields_statistics", TType.STRUCT, (short)1);

    private tdw_sys_fields_statistics new_fields_statistics;
    public static final int NEW_FIELDS_STATISTICS = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(NEW_FIELDS_STATISTICS, new FieldMetaData("new_fields_statistics", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, tdw_sys_fields_statistics.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_fields_statistics_args.class, metaDataMap);
    }

    public add_fields_statistics_args() {
    }

    public add_fields_statistics_args(
      tdw_sys_fields_statistics new_fields_statistics)
    {
      this();
      this.new_fields_statistics = new_fields_statistics;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_fields_statistics_args(add_fields_statistics_args other) {
      if (other.isSetNew_fields_statistics()) {
        this.new_fields_statistics = new tdw_sys_fields_statistics(other.new_fields_statistics);
      }
    }

    @Override
    public add_fields_statistics_args clone() {
      return new add_fields_statistics_args(this);
    }

    public tdw_sys_fields_statistics getNew_fields_statistics() {
      return this.new_fields_statistics;
    }

    public void setNew_fields_statistics(tdw_sys_fields_statistics new_fields_statistics) {
      this.new_fields_statistics = new_fields_statistics;
    }

    public void unsetNew_fields_statistics() {
      this.new_fields_statistics = null;
    }

    // Returns true if field new_fields_statistics is set (has been asigned a value) and false otherwise
    public boolean isSetNew_fields_statistics() {
      return this.new_fields_statistics != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case NEW_FIELDS_STATISTICS:
        if (value == null) {
          unsetNew_fields_statistics();
        } else {
          setNew_fields_statistics((tdw_sys_fields_statistics)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case NEW_FIELDS_STATISTICS:
        return getNew_fields_statistics();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case NEW_FIELDS_STATISTICS:
        return isSetNew_fields_statistics();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_fields_statistics_args)
        return this.equals((add_fields_statistics_args)that);
      return false;
    }

    public boolean equals(add_fields_statistics_args that) {
      if (that == null)
        return false;

      boolean this_present_new_fields_statistics = true && this.isSetNew_fields_statistics();
      boolean that_present_new_fields_statistics = true && that.isSetNew_fields_statistics();
      if (this_present_new_fields_statistics || that_present_new_fields_statistics) {
        if (!(this_present_new_fields_statistics && that_present_new_fields_statistics))
          return false;
        if (!this.new_fields_statistics.equals(that.new_fields_statistics))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NEW_FIELDS_STATISTICS:
            if (field.type == TType.STRUCT) {
              this.new_fields_statistics = new tdw_sys_fields_statistics();
              this.new_fields_statistics.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.new_fields_statistics != null) {
        oprot.writeFieldBegin(NEW_FIELDS_STATISTICS_FIELD_DESC);
        this.new_fields_statistics.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_fields_statistics_args(");
      boolean first = true;

      sb.append("new_fields_statistics:");
      if (this.new_fields_statistics == null) {
        sb.append("null");
      } else {
        sb.append(this.new_fields_statistics);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class add_fields_statistics_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("add_fields_statistics_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private tdw_sys_fields_statistics success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, tdw_sys_fields_statistics.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(add_fields_statistics_result.class, metaDataMap);
    }

    public add_fields_statistics_result() {
    }

    public add_fields_statistics_result(
      tdw_sys_fields_statistics success,
      AlreadyExistsException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_fields_statistics_result(add_fields_statistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new tdw_sys_fields_statistics(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public add_fields_statistics_result clone() {
      return new add_fields_statistics_result(this);
    }

    public tdw_sys_fields_statistics getSuccess() {
      return this.success;
    }

    public void setSuccess(tdw_sys_fields_statistics success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((tdw_sys_fields_statistics)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_fields_statistics_result)
        return this.equals((add_fields_statistics_result)that);
      return false;
    }

    public boolean equals(add_fields_statistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new tdw_sys_fields_statistics();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_fields_statistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class delete_fields_statistics_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delete_fields_statistics_args");
    private static final TField STAT_TABLE_NAME_FIELD_DESC = new TField("stat_table_name", TType.STRING, (short)1);
    private static final TField STAT_FIELD_NAME_FIELD_DESC = new TField("stat_field_name", TType.STRING, (short)2);

    private String stat_table_name;
    public static final int STAT_TABLE_NAME = 1;
    private String stat_field_name;
    public static final int STAT_FIELD_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(STAT_TABLE_NAME, new FieldMetaData("stat_table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(STAT_FIELD_NAME, new FieldMetaData("stat_field_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(delete_fields_statistics_args.class, metaDataMap);
    }

    public delete_fields_statistics_args() {
    }

    public delete_fields_statistics_args(
      String stat_table_name,
      String stat_field_name)
    {
      this();
      this.stat_table_name = stat_table_name;
      this.stat_field_name = stat_field_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_fields_statistics_args(delete_fields_statistics_args other) {
      if (other.isSetStat_table_name()) {
        this.stat_table_name = other.stat_table_name;
      }
      if (other.isSetStat_field_name()) {
        this.stat_field_name = other.stat_field_name;
      }
    }

    @Override
    public delete_fields_statistics_args clone() {
      return new delete_fields_statistics_args(this);
    }

    public String getStat_table_name() {
      return this.stat_table_name;
    }

    public void setStat_table_name(String stat_table_name) {
      this.stat_table_name = stat_table_name;
    }

    public void unsetStat_table_name() {
      this.stat_table_name = null;
    }

    // Returns true if field stat_table_name is set (has been asigned a value) and false otherwise
    public boolean isSetStat_table_name() {
      return this.stat_table_name != null;
    }

    public String getStat_field_name() {
      return this.stat_field_name;
    }

    public void setStat_field_name(String stat_field_name) {
      this.stat_field_name = stat_field_name;
    }

    public void unsetStat_field_name() {
      this.stat_field_name = null;
    }

    // Returns true if field stat_field_name is set (has been asigned a value) and false otherwise
    public boolean isSetStat_field_name() {
      return this.stat_field_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        if (value == null) {
          unsetStat_table_name();
        } else {
          setStat_table_name((String)value);
        }
        break;

      case STAT_FIELD_NAME:
        if (value == null) {
          unsetStat_field_name();
        } else {
          setStat_field_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return getStat_table_name();

      case STAT_FIELD_NAME:
        return getStat_field_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return isSetStat_table_name();
      case STAT_FIELD_NAME:
        return isSetStat_field_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_fields_statistics_args)
        return this.equals((delete_fields_statistics_args)that);
      return false;
    }

    public boolean equals(delete_fields_statistics_args that) {
      if (that == null)
        return false;

      boolean this_present_stat_table_name = true && this.isSetStat_table_name();
      boolean that_present_stat_table_name = true && that.isSetStat_table_name();
      if (this_present_stat_table_name || that_present_stat_table_name) {
        if (!(this_present_stat_table_name && that_present_stat_table_name))
          return false;
        if (!this.stat_table_name.equals(that.stat_table_name))
          return false;
      }

      boolean this_present_stat_field_name = true && this.isSetStat_field_name();
      boolean that_present_stat_field_name = true && that.isSetStat_field_name();
      if (this_present_stat_field_name || that_present_stat_field_name) {
        if (!(this_present_stat_field_name && that_present_stat_field_name))
          return false;
        if (!this.stat_field_name.equals(that.stat_field_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STAT_TABLE_NAME:
            if (field.type == TType.STRING) {
              this.stat_table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STAT_FIELD_NAME:
            if (field.type == TType.STRING) {
              this.stat_field_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.stat_table_name != null) {
        oprot.writeFieldBegin(STAT_TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.stat_table_name);
        oprot.writeFieldEnd();
      }
      if (this.stat_field_name != null) {
        oprot.writeFieldBegin(STAT_FIELD_NAME_FIELD_DESC);
        oprot.writeString(this.stat_field_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_fields_statistics_args(");
      boolean first = true;

      sb.append("stat_table_name:");
      if (this.stat_table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stat_table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stat_field_name:");
      if (this.stat_field_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stat_field_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class delete_fields_statistics_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delete_fields_statistics_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(delete_fields_statistics_result.class, metaDataMap);
    }

    public delete_fields_statistics_result() {
    }

    public delete_fields_statistics_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_fields_statistics_result(delete_fields_statistics_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public delete_fields_statistics_result clone() {
      return new delete_fields_statistics_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_fields_statistics_result)
        return this.equals((delete_fields_statistics_result)that);
      return false;
    }

    public boolean equals(delete_fields_statistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_fields_statistics_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_statistics_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_statistics_args");
    private static final TField STAT_TABLE_NAME_FIELD_DESC = new TField("stat_table_name", TType.STRING, (short)1);
    private static final TField STAT_FIELD_NAME_FIELD_DESC = new TField("stat_field_name", TType.STRING, (short)2);

    private String stat_table_name;
    public static final int STAT_TABLE_NAME = 1;
    private String stat_field_name;
    public static final int STAT_FIELD_NAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(STAT_TABLE_NAME, new FieldMetaData("stat_table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(STAT_FIELD_NAME, new FieldMetaData("stat_field_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_statistics_args.class, metaDataMap);
    }

    public get_fields_statistics_args() {
    }

    public get_fields_statistics_args(
      String stat_table_name,
      String stat_field_name)
    {
      this();
      this.stat_table_name = stat_table_name;
      this.stat_field_name = stat_field_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_statistics_args(get_fields_statistics_args other) {
      if (other.isSetStat_table_name()) {
        this.stat_table_name = other.stat_table_name;
      }
      if (other.isSetStat_field_name()) {
        this.stat_field_name = other.stat_field_name;
      }
    }

    @Override
    public get_fields_statistics_args clone() {
      return new get_fields_statistics_args(this);
    }

    public String getStat_table_name() {
      return this.stat_table_name;
    }

    public void setStat_table_name(String stat_table_name) {
      this.stat_table_name = stat_table_name;
    }

    public void unsetStat_table_name() {
      this.stat_table_name = null;
    }

    // Returns true if field stat_table_name is set (has been asigned a value) and false otherwise
    public boolean isSetStat_table_name() {
      return this.stat_table_name != null;
    }

    public String getStat_field_name() {
      return this.stat_field_name;
    }

    public void setStat_field_name(String stat_field_name) {
      this.stat_field_name = stat_field_name;
    }

    public void unsetStat_field_name() {
      this.stat_field_name = null;
    }

    // Returns true if field stat_field_name is set (has been asigned a value) and false otherwise
    public boolean isSetStat_field_name() {
      return this.stat_field_name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        if (value == null) {
          unsetStat_table_name();
        } else {
          setStat_table_name((String)value);
        }
        break;

      case STAT_FIELD_NAME:
        if (value == null) {
          unsetStat_field_name();
        } else {
          setStat_field_name((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return getStat_table_name();

      case STAT_FIELD_NAME:
        return getStat_field_name();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return isSetStat_table_name();
      case STAT_FIELD_NAME:
        return isSetStat_field_name();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_statistics_args)
        return this.equals((get_fields_statistics_args)that);
      return false;
    }

    public boolean equals(get_fields_statistics_args that) {
      if (that == null)
        return false;

      boolean this_present_stat_table_name = true && this.isSetStat_table_name();
      boolean that_present_stat_table_name = true && that.isSetStat_table_name();
      if (this_present_stat_table_name || that_present_stat_table_name) {
        if (!(this_present_stat_table_name && that_present_stat_table_name))
          return false;
        if (!this.stat_table_name.equals(that.stat_table_name))
          return false;
      }

      boolean this_present_stat_field_name = true && this.isSetStat_field_name();
      boolean that_present_stat_field_name = true && that.isSetStat_field_name();
      if (this_present_stat_field_name || that_present_stat_field_name) {
        if (!(this_present_stat_field_name && that_present_stat_field_name))
          return false;
        if (!this.stat_field_name.equals(that.stat_field_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STAT_TABLE_NAME:
            if (field.type == TType.STRING) {
              this.stat_table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STAT_FIELD_NAME:
            if (field.type == TType.STRING) {
              this.stat_field_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.stat_table_name != null) {
        oprot.writeFieldBegin(STAT_TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.stat_table_name);
        oprot.writeFieldEnd();
      }
      if (this.stat_field_name != null) {
        oprot.writeFieldBegin(STAT_FIELD_NAME_FIELD_DESC);
        oprot.writeString(this.stat_field_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_statistics_args(");
      boolean first = true;

      sb.append("stat_table_name:");
      if (this.stat_table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stat_table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stat_field_name:");
      if (this.stat_field_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stat_field_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_statistics_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_statistics_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private tdw_sys_fields_statistics success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, tdw_sys_fields_statistics.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_statistics_result.class, metaDataMap);
    }

    public get_fields_statistics_result() {
    }

    public get_fields_statistics_result(
      tdw_sys_fields_statistics success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_statistics_result(get_fields_statistics_result other) {
      if (other.isSetSuccess()) {
        this.success = new tdw_sys_fields_statistics(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_fields_statistics_result clone() {
      return new get_fields_statistics_result(this);
    }

    public tdw_sys_fields_statistics getSuccess() {
      return this.success;
    }

    public void setSuccess(tdw_sys_fields_statistics success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((tdw_sys_fields_statistics)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_statistics_result)
        return this.equals((get_fields_statistics_result)that);
      return false;
    }

    public boolean equals(get_fields_statistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new tdw_sys_fields_statistics();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_statistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_statistics_multi_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_statistics_multi_args");
    private static final TField STAT_TABLE_NAME_FIELD_DESC = new TField("stat_table_name", TType.STRING, (short)1);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I32, (short)2);

    private String stat_table_name;
    public static final int STAT_TABLE_NAME = 1;
    private int max_parts;
    public static final int MAX_PARTS = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(STAT_TABLE_NAME, new FieldMetaData("stat_table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_statistics_multi_args.class, metaDataMap);
    }

    public get_fields_statistics_multi_args() {
      this.max_parts = -1;

    }

    public get_fields_statistics_multi_args(
      String stat_table_name,
      int max_parts)
    {
      this();
      this.stat_table_name = stat_table_name;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_statistics_multi_args(get_fields_statistics_multi_args other) {
      if (other.isSetStat_table_name()) {
        this.stat_table_name = other.stat_table_name;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_fields_statistics_multi_args clone() {
      return new get_fields_statistics_multi_args(this);
    }

    public String getStat_table_name() {
      return this.stat_table_name;
    }

    public void setStat_table_name(String stat_table_name) {
      this.stat_table_name = stat_table_name;
    }

    public void unsetStat_table_name() {
      this.stat_table_name = null;
    }

    // Returns true if field stat_table_name is set (has been asigned a value) and false otherwise
    public boolean isSetStat_table_name() {
      return this.stat_table_name != null;
    }

    public int getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(int max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        if (value == null) {
          unsetStat_table_name();
        } else {
          setStat_table_name((String)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return getStat_table_name();

      case MAX_PARTS:
        return new Integer(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return isSetStat_table_name();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_statistics_multi_args)
        return this.equals((get_fields_statistics_multi_args)that);
      return false;
    }

    public boolean equals(get_fields_statistics_multi_args that) {
      if (that == null)
        return false;

      boolean this_present_stat_table_name = true && this.isSetStat_table_name();
      boolean that_present_stat_table_name = true && that.isSetStat_table_name();
      if (this_present_stat_table_name || that_present_stat_table_name) {
        if (!(this_present_stat_table_name && that_present_stat_table_name))
          return false;
        if (!this.stat_table_name.equals(that.stat_table_name))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STAT_TABLE_NAME:
            if (field.type == TType.STRING) {
              this.stat_table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I32) {
              this.max_parts = iprot.readI32();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.stat_table_name != null) {
        oprot.writeFieldBegin(STAT_TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.stat_table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI32(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_statistics_multi_args(");
      boolean first = true;

      sb.append("stat_table_name:");
      if (this.stat_table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stat_table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_statistics_multi_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_statistics_multi_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<tdw_sys_fields_statistics> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, tdw_sys_fields_statistics.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_statistics_multi_result.class, metaDataMap);
    }

    public get_fields_statistics_multi_result() {
    }

    public get_fields_statistics_multi_result(
      List<tdw_sys_fields_statistics> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_statistics_multi_result(get_fields_statistics_multi_result other) {
      if (other.isSetSuccess()) {
        List<tdw_sys_fields_statistics> __this__success = new ArrayList<tdw_sys_fields_statistics>();
        for (tdw_sys_fields_statistics other_element : other.success) {
          __this__success.add(new tdw_sys_fields_statistics(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_fields_statistics_multi_result clone() {
      return new get_fields_statistics_multi_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<tdw_sys_fields_statistics> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(tdw_sys_fields_statistics elem) {
      if (this.success == null) {
        this.success = new ArrayList<tdw_sys_fields_statistics>();
      }
      this.success.add(elem);
    }

    public List<tdw_sys_fields_statistics> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<tdw_sys_fields_statistics> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<tdw_sys_fields_statistics>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_statistics_multi_result)
        return this.equals((get_fields_statistics_multi_result)that);
      return false;
    }

    public boolean equals(get_fields_statistics_multi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list98 = iprot.readListBegin();
                this.success = new ArrayList<tdw_sys_fields_statistics>(_list98.size);
                for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                {
                  tdw_sys_fields_statistics _elem100;
                  _elem100 = new tdw_sys_fields_statistics();
                  _elem100.read(iprot);
                  this.success.add(_elem100);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (tdw_sys_fields_statistics _iter101 : this.success)          {
            _iter101.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_statistics_multi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_statistics_names_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_statistics_names_args");
    private static final TField STAT_TABLE_NAME_FIELD_DESC = new TField("stat_table_name", TType.STRING, (short)1);
    private static final TField MAX_PARTS_FIELD_DESC = new TField("max_parts", TType.I32, (short)2);

    private String stat_table_name;
    public static final int STAT_TABLE_NAME = 1;
    private int max_parts;
    public static final int MAX_PARTS = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean max_parts = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(STAT_TABLE_NAME, new FieldMetaData("stat_table_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(MAX_PARTS, new FieldMetaData("max_parts", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_statistics_names_args.class, metaDataMap);
    }

    public get_fields_statistics_names_args() {
      this.max_parts = -1;

    }

    public get_fields_statistics_names_args(
      String stat_table_name,
      int max_parts)
    {
      this();
      this.stat_table_name = stat_table_name;
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_statistics_names_args(get_fields_statistics_names_args other) {
      if (other.isSetStat_table_name()) {
        this.stat_table_name = other.stat_table_name;
      }
      __isset.max_parts = other.__isset.max_parts;
      this.max_parts = other.max_parts;
    }

    @Override
    public get_fields_statistics_names_args clone() {
      return new get_fields_statistics_names_args(this);
    }

    public String getStat_table_name() {
      return this.stat_table_name;
    }

    public void setStat_table_name(String stat_table_name) {
      this.stat_table_name = stat_table_name;
    }

    public void unsetStat_table_name() {
      this.stat_table_name = null;
    }

    // Returns true if field stat_table_name is set (has been asigned a value) and false otherwise
    public boolean isSetStat_table_name() {
      return this.stat_table_name != null;
    }

    public int getMax_parts() {
      return this.max_parts;
    }

    public void setMax_parts(int max_parts) {
      this.max_parts = max_parts;
      this.__isset.max_parts = true;
    }

    public void unsetMax_parts() {
      this.__isset.max_parts = false;
    }

    // Returns true if field max_parts is set (has been asigned a value) and false otherwise
    public boolean isSetMax_parts() {
      return this.__isset.max_parts;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        if (value == null) {
          unsetStat_table_name();
        } else {
          setStat_table_name((String)value);
        }
        break;

      case MAX_PARTS:
        if (value == null) {
          unsetMax_parts();
        } else {
          setMax_parts((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return getStat_table_name();

      case MAX_PARTS:
        return new Integer(getMax_parts());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case STAT_TABLE_NAME:
        return isSetStat_table_name();
      case MAX_PARTS:
        return isSetMax_parts();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_statistics_names_args)
        return this.equals((get_fields_statistics_names_args)that);
      return false;
    }

    public boolean equals(get_fields_statistics_names_args that) {
      if (that == null)
        return false;

      boolean this_present_stat_table_name = true && this.isSetStat_table_name();
      boolean that_present_stat_table_name = true && that.isSetStat_table_name();
      if (this_present_stat_table_name || that_present_stat_table_name) {
        if (!(this_present_stat_table_name && that_present_stat_table_name))
          return false;
        if (!this.stat_table_name.equals(that.stat_table_name))
          return false;
      }

      boolean this_present_max_parts = true;
      boolean that_present_max_parts = true;
      if (this_present_max_parts || that_present_max_parts) {
        if (!(this_present_max_parts && that_present_max_parts))
          return false;
        if (this.max_parts != that.max_parts)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case STAT_TABLE_NAME:
            if (field.type == TType.STRING) {
              this.stat_table_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MAX_PARTS:
            if (field.type == TType.I32) {
              this.max_parts = iprot.readI32();
              this.__isset.max_parts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.stat_table_name != null) {
        oprot.writeFieldBegin(STAT_TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.stat_table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);
      oprot.writeI32(this.max_parts);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_statistics_names_args(");
      boolean first = true;

      sb.append("stat_table_name:");
      if (this.stat_table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stat_table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_parts:");
      sb.append(this.max_parts);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_fields_statistics_names_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_fields_statistics_names_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private List<String> success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_fields_statistics_names_result.class, metaDataMap);
    }

    public get_fields_statistics_names_result() {
    }

    public get_fields_statistics_names_result(
      List<String> success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_fields_statistics_names_result(get_fields_statistics_names_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_fields_statistics_names_result clone() {
      return new get_fields_statistics_names_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_fields_statistics_names_result)
        return this.equals((get_fields_statistics_names_result)that);
      return false;
    }

    public boolean equals(get_fields_statistics_names_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list102 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list102.size);
                for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                {
                  String _elem104;
                  _elem104 = iprot.readString();
                  this.success.add(_elem104);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter105 : this.success)          {
            oprot.writeString(_iter105);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_fields_statistics_names_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_user_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_user_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField NEW_USER_FIELD_DESC = new TField("newUser", TType.STRING, (short)2);
    private static final TField PASSWD_FIELD_DESC = new TField("passwd", TType.STRING, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String newUser;
    public static final int NEWUSER = 2;
    private String passwd;
    public static final int PASSWD = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NEWUSER, new FieldMetaData("newUser", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PASSWD, new FieldMetaData("passwd", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_user_args.class, metaDataMap);
    }

    public create_user_args() {
    }

    public create_user_args(
      String byWho,
      String newUser,
      String passwd)
    {
      this();
      this.byWho = byWho;
      this.newUser = newUser;
      this.passwd = passwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_args(create_user_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetNewUser()) {
        this.newUser = other.newUser;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
    }

    @Override
    public create_user_args clone() {
      return new create_user_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getNewUser() {
      return this.newUser;
    }

    public void setNewUser(String newUser) {
      this.newUser = newUser;
    }

    public void unsetNewUser() {
      this.newUser = null;
    }

    // Returns true if field newUser is set (has been asigned a value) and false otherwise
    public boolean isSetNewUser() {
      return this.newUser != null;
    }

    public String getPasswd() {
      return this.passwd;
    }

    public void setPasswd(String passwd) {
      this.passwd = passwd;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    // Returns true if field passwd is set (has been asigned a value) and false otherwise
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case NEWUSER:
        if (value == null) {
          unsetNewUser();
        } else {
          setNewUser((String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case NEWUSER:
        return getNewUser();

      case PASSWD:
        return getPasswd();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case NEWUSER:
        return isSetNewUser();
      case PASSWD:
        return isSetPasswd();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_args)
        return this.equals((create_user_args)that);
      return false;
    }

    public boolean equals(create_user_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_newUser = true && this.isSetNewUser();
      boolean that_present_newUser = true && that.isSetNewUser();
      if (this_present_newUser || that_present_newUser) {
        if (!(this_present_newUser && that_present_newUser))
          return false;
        if (!this.newUser.equals(that.newUser))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEWUSER:
            if (field.type == TType.STRING) {
              this.newUser = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PASSWD:
            if (field.type == TType.STRING) {
              this.passwd = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.newUser != null) {
        oprot.writeFieldBegin(NEW_USER_FIELD_DESC);
        oprot.writeString(this.newUser);
        oprot.writeFieldEnd();
      }
      if (this.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(this.passwd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newUser:");
      if (this.newUser == null) {
        sb.append("null");
      } else {
        sb.append(this.newUser);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_user_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_user_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_user_result.class, metaDataMap);
    }

    public create_user_result() {
    }

    public create_user_result(
      boolean success,
      AlreadyExistsException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_result(create_user_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public create_user_result clone() {
      return new create_user_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_result)
        return this.equals((create_user_result)that);
      return false;
    }

    public boolean equals(create_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_user_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_user_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String userName;
    public static final int USERNAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_user_args.class, metaDataMap);
    }

    public drop_user_args() {
    }

    public drop_user_args(
      String byWho,
      String userName)
    {
      this();
      this.byWho = byWho;
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_user_args(drop_user_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    @Override
    public drop_user_args clone() {
      return new drop_user_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case USERNAME:
        return getUserName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case USERNAME:
        return isSetUserName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_user_args)
        return this.equals((drop_user_args)that);
      return false;
    }

    public boolean equals(drop_user_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_user_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_user_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_user_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_user_result.class, metaDataMap);
    }

    public drop_user_result() {
    }

    public drop_user_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_user_result(drop_user_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_user_result clone() {
      return new drop_user_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_user_result)
        return this.equals((drop_user_result)that);
      return false;
    }

    public boolean equals(drop_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_user_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_user_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String userName;
    public static final int USERNAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_user_args.class, metaDataMap);
    }

    public get_user_args() {
    }

    public get_user_args(
      String byWho,
      String userName)
    {
      this();
      this.byWho = byWho;
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_user_args(get_user_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    @Override
    public get_user_args clone() {
      return new get_user_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case USERNAME:
        return getUserName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case USERNAME:
        return isSetUserName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_user_args)
        return this.equals((get_user_args)that);
      return false;
    }

    public boolean equals(get_user_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_user_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_user_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_user_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private User success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, User.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_user_result.class, metaDataMap);
    }

    public get_user_result() {
    }

    public get_user_result(
      User success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_user_result(get_user_result other) {
      if (other.isSetSuccess()) {
        this.success = new User(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_user_result clone() {
      return new get_user_result(this);
    }

    public User getSuccess() {
      return this.success;
    }

    public void setSuccess(User success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((User)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_user_result)
        return this.equals((get_user_result)that);
      return false;
    }

    public boolean equals(get_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new User();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_users_all_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_users_all_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);

    private String byWho;
    public static final int BYWHO = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_users_all_args.class, metaDataMap);
    }

    public get_users_all_args() {
    }

    public get_users_all_args(
      String byWho)
    {
      this();
      this.byWho = byWho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_users_all_args(get_users_all_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
    }

    @Override
    public get_users_all_args clone() {
      return new get_users_all_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_users_all_args)
        return this.equals((get_users_all_args)that);
      return false;
    }

    public boolean equals(get_users_all_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_users_all_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_users_all_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_users_all_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_users_all_result.class, metaDataMap);
    }

    public get_users_all_result() {
    }

    public get_users_all_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_users_all_result(get_users_all_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_users_all_result clone() {
      return new get_users_all_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_users_all_result)
        return this.equals((get_users_all_result)that);
      return false;
    }

    public boolean equals(get_users_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list106 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list106.size);
                for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                {
                  String _elem108;
                  _elem108 = iprot.readString();
                  this.success.add(_elem108);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter109 : this.success)          {
            oprot.writeString(_iter109);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_users_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class set_passwd_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("set_passwd_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);
    private static final TField NEW_PASSWD_FIELD_DESC = new TField("newPasswd", TType.STRING, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;
    private String newPasswd;
    public static final int NEWPASSWD = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NEWPASSWD, new FieldMetaData("newPasswd", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(set_passwd_args.class, metaDataMap);
    }

    public set_passwd_args() {
    }

    public set_passwd_args(
      String byWho,
      String forWho,
      String newPasswd)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
      this.newPasswd = newPasswd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_passwd_args(set_passwd_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
      if (other.isSetNewPasswd()) {
        this.newPasswd = other.newPasswd;
      }
    }

    @Override
    public set_passwd_args clone() {
      return new set_passwd_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public String getNewPasswd() {
      return this.newPasswd;
    }

    public void setNewPasswd(String newPasswd) {
      this.newPasswd = newPasswd;
    }

    public void unsetNewPasswd() {
      this.newPasswd = null;
    }

    // Returns true if field newPasswd is set (has been asigned a value) and false otherwise
    public boolean isSetNewPasswd() {
      return this.newPasswd != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      case NEWPASSWD:
        if (value == null) {
          unsetNewPasswd();
        } else {
          setNewPasswd((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      case NEWPASSWD:
        return getNewPasswd();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      case NEWPASSWD:
        return isSetNewPasswd();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_passwd_args)
        return this.equals((set_passwd_args)that);
      return false;
    }

    public boolean equals(set_passwd_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      boolean this_present_newPasswd = true && this.isSetNewPasswd();
      boolean that_present_newPasswd = true && that.isSetNewPasswd();
      if (this_present_newPasswd || that_present_newPasswd) {
        if (!(this_present_newPasswd && that_present_newPasswd))
          return false;
        if (!this.newPasswd.equals(that.newPasswd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NEWPASSWD:
            if (field.type == TType.STRING) {
              this.newPasswd = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      if (this.newPasswd != null) {
        oprot.writeFieldBegin(NEW_PASSWD_FIELD_DESC);
        oprot.writeString(this.newPasswd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_passwd_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPasswd:");
      if (this.newPasswd == null) {
        sb.append("null");
      } else {
        sb.append(this.newPasswd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class set_passwd_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("set_passwd_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(set_passwd_result.class, metaDataMap);
    }

    public set_passwd_result() {
    }

    public set_passwd_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_passwd_result(set_passwd_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public set_passwd_result clone() {
      return new set_passwd_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_passwd_result)
        return this.equals((set_passwd_result)that);
      return false;
    }

    public boolean equals(set_passwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_passwd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class is_a_user_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("is_a_user_args");
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)1);
    private static final TField PASSWD_FIELD_DESC = new TField("passwd", TType.STRING, (short)2);

    private String userName;
    public static final int USERNAME = 1;
    private String passwd;
    public static final int PASSWD = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PASSWD, new FieldMetaData("passwd", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(is_a_user_args.class, metaDataMap);
    }

    public is_a_user_args() {
    }

    public is_a_user_args(
      String userName,
      String passwd)
    {
      this();
      this.userName = userName;
      this.passwd = passwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public is_a_user_args(is_a_user_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
    }

    @Override
    public is_a_user_args clone() {
      return new is_a_user_args(this);
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public String getPasswd() {
      return this.passwd;
    }

    public void setPasswd(String passwd) {
      this.passwd = passwd;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    // Returns true if field passwd is set (has been asigned a value) and false otherwise
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case USERNAME:
        return getUserName();

      case PASSWD:
        return getPasswd();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case USERNAME:
        return isSetUserName();
      case PASSWD:
        return isSetPasswd();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof is_a_user_args)
        return this.equals((is_a_user_args)that);
      return false;
    }

    public boolean equals(is_a_user_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PASSWD:
            if (field.type == TType.STRING) {
              this.passwd = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      if (this.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(this.passwd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("is_a_user_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class is_a_user_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("is_a_user_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(is_a_user_result.class, metaDataMap);
    }

    public is_a_user_result() {
    }

    public is_a_user_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public is_a_user_result(is_a_user_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public is_a_user_result clone() {
      return new is_a_user_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof is_a_user_result)
        return this.equals((is_a_user_result)that);
      return false;
    }

    public boolean equals(is_a_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("is_a_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class is_a_role_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("is_a_role_args");
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)1);

    private String roleName;
    public static final int ROLENAME = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(is_a_role_args.class, metaDataMap);
    }

    public is_a_role_args() {
    }

    public is_a_role_args(
      String roleName)
    {
      this();
      this.roleName = roleName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public is_a_role_args(is_a_role_args other) {
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
    }

    @Override
    public is_a_role_args clone() {
      return new is_a_role_args(this);
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case ROLENAME:
        return getRoleName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case ROLENAME:
        return isSetRoleName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof is_a_role_args)
        return this.equals((is_a_role_args)that);
      return false;
    }

    public boolean equals(is_a_role_args that) {
      if (that == null)
        return false;

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("is_a_role_args(");
      boolean first = true;

      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class is_a_role_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("is_a_role_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(is_a_role_result.class, metaDataMap);
    }

    public is_a_role_result() {
    }

    public is_a_role_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public is_a_role_result(is_a_role_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public is_a_role_result clone() {
      return new is_a_role_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof is_a_role_result)
        return this.equals((is_a_role_result)that);
      return false;
    }

    public boolean equals(is_a_role_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("is_a_role_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_role_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_role_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_role_args.class, metaDataMap);
    }

    public create_role_args() {
    }

    public create_role_args(
      String byWho,
      String roleName)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_role_args(create_role_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
    }

    @Override
    public create_role_args clone() {
      return new create_role_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_role_args)
        return this.equals((create_role_args)that);
      return false;
    }

    public boolean equals(create_role_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_role_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_role_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_role_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private AlreadyExistsException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_role_result.class, metaDataMap);
    }

    public create_role_result() {
    }

    public create_role_result(
      boolean success,
      AlreadyExistsException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_role_result(create_role_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new AlreadyExistsException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public create_role_result clone() {
      return new create_role_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public AlreadyExistsException getO1() {
      return this.o1;
    }

    public void setO1(AlreadyExistsException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((AlreadyExistsException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_role_result)
        return this.equals((create_role_result)that);
      return false;
    }

    public boolean equals(create_role_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new AlreadyExistsException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_role_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_role_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_role_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_role_args.class, metaDataMap);
    }

    public drop_role_args() {
    }

    public drop_role_args(
      String byWho,
      String roleName)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_role_args(drop_role_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
    }

    @Override
    public drop_role_args clone() {
      return new drop_role_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_role_args)
        return this.equals((drop_role_args)that);
      return false;
    }

    public boolean equals(drop_role_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_role_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_role_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_role_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_role_result.class, metaDataMap);
    }

    public drop_role_result() {
    }

    public drop_role_result(
      boolean success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_role_result(drop_role_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public drop_role_result clone() {
      return new drop_role_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_role_result)
        return this.equals((drop_role_result)that);
      return false;
    }

    public boolean equals(drop_role_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_role_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_role_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_role_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_role_args.class, metaDataMap);
    }

    public get_role_args() {
    }

    public get_role_args(
      String byWho,
      String roleName)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_role_args(get_role_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
    }

    @Override
    public get_role_args clone() {
      return new get_role_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_role_args)
        return this.equals((get_role_args)that);
      return false;
    }

    public boolean equals(get_role_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_role_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_role_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_role_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);

    private Role success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private MetaException o2;
    public static final int O2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Role.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_role_result.class, metaDataMap);
    }

    public get_role_result() {
    }

    public get_role_result(
      Role success,
      NoSuchObjectException o1,
      MetaException o2)
    {
      this();
      this.success = success;
      this.o1 = o1;
      this.o2 = o2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_role_result(get_role_result other) {
      if (other.isSetSuccess()) {
        this.success = new Role(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new MetaException(other.o2);
      }
    }

    @Override
    public get_role_result clone() {
      return new get_role_result(this);
    }

    public Role getSuccess() {
      return this.success;
    }

    public void setSuccess(Role success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public MetaException getO2() {
      return this.o2;
    }

    public void setO2(MetaException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Role)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      case O2:
        return getO2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_role_result)
        return this.equals((get_role_result)that);
      return false;
    }

    public boolean equals(get_role_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Role();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new MetaException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_role_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_roles_all_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_roles_all_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);

    private String byWho;
    public static final int BYWHO = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_roles_all_args.class, metaDataMap);
    }

    public get_roles_all_args() {
    }

    public get_roles_all_args(
      String byWho)
    {
      this();
      this.byWho = byWho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_roles_all_args(get_roles_all_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
    }

    @Override
    public get_roles_all_args clone() {
      return new get_roles_all_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_roles_all_args)
        return this.equals((get_roles_all_args)that);
      return false;
    }

    public boolean equals(get_roles_all_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_roles_all_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_roles_all_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_roles_all_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<String> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_roles_all_result.class, metaDataMap);
    }

    public get_roles_all_result() {
    }

    public get_roles_all_result(
      List<String> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_roles_all_result(get_roles_all_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_roles_all_result clone() {
      return new get_roles_all_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_roles_all_result)
        return this.equals((get_roles_all_result)that);
      return false;
    }

    public boolean equals(get_roles_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list110 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list110.size);
                for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                {
                  String _elem112;
                  _elem112 = iprot.readString();
                  this.success.add(_elem112);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter113 : this.success)          {
            oprot.writeString(_iter113);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_roles_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_sys_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_sys_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String userName;
    public static final int USERNAME = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_sys_args.class, metaDataMap);
    }

    public grant_auth_sys_args() {
    }

    public grant_auth_sys_args(
      String byWho,
      String userName,
      List<String> privileges)
    {
      this();
      this.byWho = byWho;
      this.userName = userName;
      this.privileges = privileges;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_sys_args(grant_auth_sys_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
    }

    @Override
    public grant_auth_sys_args clone() {
      return new grant_auth_sys_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case USERNAME:
        return getUserName();

      case PRIVILEGES:
        return getPrivileges();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case USERNAME:
        return isSetUserName();
      case PRIVILEGES:
        return isSetPrivileges();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_sys_args)
        return this.equals((grant_auth_sys_args)that);
      return false;
    }

    public boolean equals(grant_auth_sys_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list114 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list114.size);
                for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                {
                  String _elem116;
                  _elem116 = iprot.readString();
                  this.privileges.add(_elem116);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter117 : this.privileges)          {
            oprot.writeString(_iter117);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_sys_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_sys_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_sys_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_sys_result.class, metaDataMap);
    }

    public grant_auth_sys_result() {
    }

    public grant_auth_sys_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_sys_result(grant_auth_sys_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public grant_auth_sys_result clone() {
      return new grant_auth_sys_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_sys_result)
        return this.equals((grant_auth_sys_result)that);
      return false;
    }

    public boolean equals(grant_auth_sys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_sys_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_role_sys_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_role_sys_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_role_sys_args.class, metaDataMap);
    }

    public grant_auth_role_sys_args() {
    }

    public grant_auth_role_sys_args(
      String byWho,
      String roleName,
      List<String> privileges)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
      this.privileges = privileges;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_role_sys_args(grant_auth_role_sys_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
    }

    @Override
    public grant_auth_role_sys_args clone() {
      return new grant_auth_role_sys_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      case PRIVILEGES:
        return getPrivileges();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      case PRIVILEGES:
        return isSetPrivileges();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_role_sys_args)
        return this.equals((grant_auth_role_sys_args)that);
      return false;
    }

    public boolean equals(grant_auth_role_sys_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list118 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list118.size);
                for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                {
                  String _elem120;
                  _elem120 = iprot.readString();
                  this.privileges.add(_elem120);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter121 : this.privileges)          {
            oprot.writeString(_iter121);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_role_sys_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_role_sys_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_role_sys_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_role_sys_result.class, metaDataMap);
    }

    public grant_auth_role_sys_result() {
    }

    public grant_auth_role_sys_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_role_sys_result(grant_auth_role_sys_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public grant_auth_role_sys_result clone() {
      return new grant_auth_role_sys_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_role_sys_result)
        return this.equals((grant_auth_role_sys_result)that);
      return false;
    }

    public boolean equals(grant_auth_role_sys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_role_sys_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_role_to_user_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_role_to_user_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);
    private static final TField ROLE_NAMES_FIELD_DESC = new TField("roleNames", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String userName;
    public static final int USERNAME = 2;
    private List<String> roleNames;
    public static final int ROLENAMES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAMES, new FieldMetaData("roleNames", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_role_to_user_args.class, metaDataMap);
    }

    public grant_role_to_user_args() {
    }

    public grant_role_to_user_args(
      String byWho,
      String userName,
      List<String> roleNames)
    {
      this();
      this.byWho = byWho;
      this.userName = userName;
      this.roleNames = roleNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_role_to_user_args(grant_role_to_user_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetRoleNames()) {
        List<String> __this__roleNames = new ArrayList<String>();
        for (String other_element : other.roleNames) {
          __this__roleNames.add(other_element);
        }
        this.roleNames = __this__roleNames;
      }
    }

    @Override
    public grant_role_to_user_args clone() {
      return new grant_role_to_user_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public int getRoleNamesSize() {
      return (this.roleNames == null) ? 0 : this.roleNames.size();
    }

    public java.util.Iterator<String> getRoleNamesIterator() {
      return (this.roleNames == null) ? null : this.roleNames.iterator();
    }

    public void addToRoleNames(String elem) {
      if (this.roleNames == null) {
        this.roleNames = new ArrayList<String>();
      }
      this.roleNames.add(elem);
    }

    public List<String> getRoleNames() {
      return this.roleNames;
    }

    public void setRoleNames(List<String> roleNames) {
      this.roleNames = roleNames;
    }

    public void unsetRoleNames() {
      this.roleNames = null;
    }

    // Returns true if field roleNames is set (has been asigned a value) and false otherwise
    public boolean isSetRoleNames() {
      return this.roleNames != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case ROLENAMES:
        if (value == null) {
          unsetRoleNames();
        } else {
          setRoleNames((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case USERNAME:
        return getUserName();

      case ROLENAMES:
        return getRoleNames();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case USERNAME:
        return isSetUserName();
      case ROLENAMES:
        return isSetRoleNames();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_role_to_user_args)
        return this.equals((grant_role_to_user_args)that);
      return false;
    }

    public boolean equals(grant_role_to_user_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_roleNames = true && this.isSetRoleNames();
      boolean that_present_roleNames = true && that.isSetRoleNames();
      if (this_present_roleNames || that_present_roleNames) {
        if (!(this_present_roleNames && that_present_roleNames))
          return false;
        if (!this.roleNames.equals(that.roleNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAMES:
            if (field.type == TType.LIST) {
              {
                TList _list122 = iprot.readListBegin();
                this.roleNames = new ArrayList<String>(_list122.size);
                for (int _i123 = 0; _i123 < _list122.size; ++_i123)
                {
                  String _elem124;
                  _elem124 = iprot.readString();
                  this.roleNames.add(_elem124);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      if (this.roleNames != null) {
        oprot.writeFieldBegin(ROLE_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.roleNames.size()));
          for (String _iter125 : this.roleNames)          {
            oprot.writeString(_iter125);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_role_to_user_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleNames:");
      if (this.roleNames == null) {
        sb.append("null");
      } else {
        sb.append(this.roleNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_role_to_user_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_role_to_user_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_role_to_user_result.class, metaDataMap);
    }

    public grant_role_to_user_result() {
    }

    public grant_role_to_user_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_role_to_user_result(grant_role_to_user_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public grant_role_to_user_result clone() {
      return new grant_role_to_user_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_role_to_user_result)
        return this.equals((grant_role_to_user_result)that);
      return false;
    }

    public boolean equals(grant_role_to_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_role_to_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_role_to_role_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_role_to_role_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);
    private static final TField ROLE_NAMES_FIELD_DESC = new TField("roleNames", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;
    private List<String> roleNames;
    public static final int ROLENAMES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAMES, new FieldMetaData("roleNames", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_role_to_role_args.class, metaDataMap);
    }

    public grant_role_to_role_args() {
    }

    public grant_role_to_role_args(
      String byWho,
      String roleName,
      List<String> roleNames)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
      this.roleNames = roleNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_role_to_role_args(grant_role_to_role_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetRoleNames()) {
        List<String> __this__roleNames = new ArrayList<String>();
        for (String other_element : other.roleNames) {
          __this__roleNames.add(other_element);
        }
        this.roleNames = __this__roleNames;
      }
    }

    @Override
    public grant_role_to_role_args clone() {
      return new grant_role_to_role_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public int getRoleNamesSize() {
      return (this.roleNames == null) ? 0 : this.roleNames.size();
    }

    public java.util.Iterator<String> getRoleNamesIterator() {
      return (this.roleNames == null) ? null : this.roleNames.iterator();
    }

    public void addToRoleNames(String elem) {
      if (this.roleNames == null) {
        this.roleNames = new ArrayList<String>();
      }
      this.roleNames.add(elem);
    }

    public List<String> getRoleNames() {
      return this.roleNames;
    }

    public void setRoleNames(List<String> roleNames) {
      this.roleNames = roleNames;
    }

    public void unsetRoleNames() {
      this.roleNames = null;
    }

    // Returns true if field roleNames is set (has been asigned a value) and false otherwise
    public boolean isSetRoleNames() {
      return this.roleNames != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case ROLENAMES:
        if (value == null) {
          unsetRoleNames();
        } else {
          setRoleNames((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      case ROLENAMES:
        return getRoleNames();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      case ROLENAMES:
        return isSetRoleNames();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_role_to_role_args)
        return this.equals((grant_role_to_role_args)that);
      return false;
    }

    public boolean equals(grant_role_to_role_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_roleNames = true && this.isSetRoleNames();
      boolean that_present_roleNames = true && that.isSetRoleNames();
      if (this_present_roleNames || that_present_roleNames) {
        if (!(this_present_roleNames && that_present_roleNames))
          return false;
        if (!this.roleNames.equals(that.roleNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAMES:
            if (field.type == TType.LIST) {
              {
                TList _list126 = iprot.readListBegin();
                this.roleNames = new ArrayList<String>(_list126.size);
                for (int _i127 = 0; _i127 < _list126.size; ++_i127)
                {
                  String _elem128;
                  _elem128 = iprot.readString();
                  this.roleNames.add(_elem128);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      if (this.roleNames != null) {
        oprot.writeFieldBegin(ROLE_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.roleNames.size()));
          for (String _iter129 : this.roleNames)          {
            oprot.writeString(_iter129);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_role_to_role_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleNames:");
      if (this.roleNames == null) {
        sb.append("null");
      } else {
        sb.append(this.roleNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_role_to_role_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_role_to_role_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_role_to_role_result.class, metaDataMap);
    }

    public grant_role_to_role_result() {
    }

    public grant_role_to_role_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_role_to_role_result(grant_role_to_role_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public grant_role_to_role_result clone() {
      return new grant_role_to_role_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_role_to_role_result)
        return this.equals((grant_role_to_role_result)that);
      return false;
    }

    public boolean equals(grant_role_to_role_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_role_to_role_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_on_db_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_on_db_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)4);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;
    private String db;
    public static final int DB = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_on_db_args.class, metaDataMap);
    }

    public grant_auth_on_db_args() {
    }

    public grant_auth_on_db_args(
      String byWho,
      String forWho,
      List<String> privileges,
      String db)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
      this.privileges = privileges;
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_on_db_args(grant_auth_on_db_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
    }

    @Override
    public grant_auth_on_db_args clone() {
      return new grant_auth_on_db_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      case PRIVILEGES:
        return getPrivileges();

      case DB:
        return getDb();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      case PRIVILEGES:
        return isSetPrivileges();
      case DB:
        return isSetDb();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_on_db_args)
        return this.equals((grant_auth_on_db_args)that);
      return false;
    }

    public boolean equals(grant_auth_on_db_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list130 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list130.size);
                for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                {
                  String _elem132;
                  _elem132 = iprot.readString();
                  this.privileges.add(_elem132);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter133 : this.privileges)          {
            oprot.writeString(_iter133);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_on_db_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_on_db_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_on_db_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_on_db_result.class, metaDataMap);
    }

    public grant_auth_on_db_result() {
    }

    public grant_auth_on_db_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_on_db_result(grant_auth_on_db_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public grant_auth_on_db_result clone() {
      return new grant_auth_on_db_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_on_db_result)
        return this.equals((grant_auth_on_db_result)that);
      return false;
    }

    public boolean equals(grant_auth_on_db_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_on_db_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_on_tbl_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_on_tbl_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)4);
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRING, (short)5);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;
    private String db;
    public static final int DB = 4;
    private String tbl;
    public static final int TBL = 5;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_on_tbl_args.class, metaDataMap);
    }

    public grant_auth_on_tbl_args() {
    }

    public grant_auth_on_tbl_args(
      String byWho,
      String forWho,
      List<String> privileges,
      String db,
      String tbl)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
      this.privileges = privileges;
      this.db = db;
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_on_tbl_args(grant_auth_on_tbl_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTbl()) {
        this.tbl = other.tbl;
      }
    }

    @Override
    public grant_auth_on_tbl_args clone() {
      return new grant_auth_on_tbl_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTbl() {
      return this.tbl;
    }

    public void setTbl(String tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      case PRIVILEGES:
        return getPrivileges();

      case DB:
        return getDb();

      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      case PRIVILEGES:
        return isSetPrivileges();
      case DB:
        return isSetDb();
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_on_tbl_args)
        return this.equals((grant_auth_on_tbl_args)that);
      return false;
    }

    public boolean equals(grant_auth_on_tbl_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list134 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list134.size);
                for (int _i135 = 0; _i135 < _list134.size; ++_i135)
                {
                  String _elem136;
                  _elem136 = iprot.readString();
                  this.privileges.add(_elem136);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL:
            if (field.type == TType.STRING) {
              this.tbl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter137 : this.privileges)          {
            oprot.writeString(_iter137);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(this.tbl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_on_tbl_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class grant_auth_on_tbl_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("grant_auth_on_tbl_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(grant_auth_on_tbl_result.class, metaDataMap);
    }

    public grant_auth_on_tbl_result() {
    }

    public grant_auth_on_tbl_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grant_auth_on_tbl_result(grant_auth_on_tbl_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public grant_auth_on_tbl_result clone() {
      return new grant_auth_on_tbl_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grant_auth_on_tbl_result)
        return this.equals((grant_auth_on_tbl_result)that);
      return false;
    }

    public boolean equals(grant_auth_on_tbl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grant_auth_on_tbl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_db_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_db_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField WHO_FIELD_DESC = new TField("who", TType.STRING, (short)2);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String who;
    public static final int WHO = 2;
    private String db;
    public static final int DB = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(WHO, new FieldMetaData("who", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_db_args.class, metaDataMap);
    }

    public get_auth_on_db_args() {
    }

    public get_auth_on_db_args(
      String byWho,
      String who,
      String db)
    {
      this();
      this.byWho = byWho;
      this.who = who;
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_db_args(get_auth_on_db_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetWho()) {
        this.who = other.who;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
    }

    @Override
    public get_auth_on_db_args clone() {
      return new get_auth_on_db_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getWho() {
      return this.who;
    }

    public void setWho(String who) {
      this.who = who;
    }

    public void unsetWho() {
      this.who = null;
    }

    // Returns true if field who is set (has been asigned a value) and false otherwise
    public boolean isSetWho() {
      return this.who != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case WHO:
        if (value == null) {
          unsetWho();
        } else {
          setWho((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case WHO:
        return getWho();

      case DB:
        return getDb();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case WHO:
        return isSetWho();
      case DB:
        return isSetDb();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_db_args)
        return this.equals((get_auth_on_db_args)that);
      return false;
    }

    public boolean equals(get_auth_on_db_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_who = true && this.isSetWho();
      boolean that_present_who = true && that.isSetWho();
      if (this_present_who || that_present_who) {
        if (!(this_present_who && that_present_who))
          return false;
        if (!this.who.equals(that.who))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHO:
            if (field.type == TType.STRING) {
              this.who = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.who != null) {
        oprot.writeFieldBegin(WHO_FIELD_DESC);
        oprot.writeString(this.who);
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_db_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("who:");
      if (this.who == null) {
        sb.append("null");
      } else {
        sb.append(this.who);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_db_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_db_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private DbPriv success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, DbPriv.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_db_result.class, metaDataMap);
    }

    public get_auth_on_db_result() {
    }

    public get_auth_on_db_result(
      DbPriv success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_db_result(get_auth_on_db_result other) {
      if (other.isSetSuccess()) {
        this.success = new DbPriv(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_auth_on_db_result clone() {
      return new get_auth_on_db_result(this);
    }

    public DbPriv getSuccess() {
      return this.success;
    }

    public void setSuccess(DbPriv success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DbPriv)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_db_result)
        return this.equals((get_auth_on_db_result)that);
      return false;
    }

    public boolean equals(get_auth_on_db_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new DbPriv();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_db_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_dbs_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_dbs_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField WHO_FIELD_DESC = new TField("who", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String who;
    public static final int WHO = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(WHO, new FieldMetaData("who", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_dbs_args.class, metaDataMap);
    }

    public get_auth_on_dbs_args() {
    }

    public get_auth_on_dbs_args(
      String byWho,
      String who)
    {
      this();
      this.byWho = byWho;
      this.who = who;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_dbs_args(get_auth_on_dbs_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetWho()) {
        this.who = other.who;
      }
    }

    @Override
    public get_auth_on_dbs_args clone() {
      return new get_auth_on_dbs_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getWho() {
      return this.who;
    }

    public void setWho(String who) {
      this.who = who;
    }

    public void unsetWho() {
      this.who = null;
    }

    // Returns true if field who is set (has been asigned a value) and false otherwise
    public boolean isSetWho() {
      return this.who != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case WHO:
        if (value == null) {
          unsetWho();
        } else {
          setWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case WHO:
        return getWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case WHO:
        return isSetWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_dbs_args)
        return this.equals((get_auth_on_dbs_args)that);
      return false;
    }

    public boolean equals(get_auth_on_dbs_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_who = true && this.isSetWho();
      boolean that_present_who = true && that.isSetWho();
      if (this_present_who || that_present_who) {
        if (!(this_present_who && that_present_who))
          return false;
        if (!this.who.equals(that.who))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHO:
            if (field.type == TType.STRING) {
              this.who = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.who != null) {
        oprot.writeFieldBegin(WHO_FIELD_DESC);
        oprot.writeString(this.who);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_dbs_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("who:");
      if (this.who == null) {
        sb.append("null");
      } else {
        sb.append(this.who);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_dbs_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_dbs_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<DbPriv> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, DbPriv.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_dbs_result.class, metaDataMap);
    }

    public get_auth_on_dbs_result() {
    }

    public get_auth_on_dbs_result(
      List<DbPriv> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_dbs_result(get_auth_on_dbs_result other) {
      if (other.isSetSuccess()) {
        List<DbPriv> __this__success = new ArrayList<DbPriv>();
        for (DbPriv other_element : other.success) {
          __this__success.add(new DbPriv(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_auth_on_dbs_result clone() {
      return new get_auth_on_dbs_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DbPriv> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DbPriv elem) {
      if (this.success == null) {
        this.success = new ArrayList<DbPriv>();
      }
      this.success.add(elem);
    }

    public List<DbPriv> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<DbPriv> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DbPriv>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_dbs_result)
        return this.equals((get_auth_on_dbs_result)that);
      return false;
    }

    public boolean equals(get_auth_on_dbs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list138 = iprot.readListBegin();
                this.success = new ArrayList<DbPriv>(_list138.size);
                for (int _i139 = 0; _i139 < _list138.size; ++_i139)
                {
                  DbPriv _elem140;
                  _elem140 = new DbPriv();
                  _elem140.read(iprot);
                  this.success.add(_elem140);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (DbPriv _iter141 : this.success)          {
            _iter141.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_dbs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_db_auth_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_db_auth_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String db;
    public static final int DB = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_db_auth_args.class, metaDataMap);
    }

    public get_db_auth_args() {
    }

    public get_db_auth_args(
      String byWho,
      String db)
    {
      this();
      this.byWho = byWho;
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_db_auth_args(get_db_auth_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
    }

    @Override
    public get_db_auth_args clone() {
      return new get_db_auth_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case DB:
        return getDb();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case DB:
        return isSetDb();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_db_auth_args)
        return this.equals((get_db_auth_args)that);
      return false;
    }

    public boolean equals(get_db_auth_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_db_auth_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_db_auth_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_db_auth_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<DbPriv> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, DbPriv.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_db_auth_result.class, metaDataMap);
    }

    public get_db_auth_result() {
    }

    public get_db_auth_result(
      List<DbPriv> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_db_auth_result(get_db_auth_result other) {
      if (other.isSetSuccess()) {
        List<DbPriv> __this__success = new ArrayList<DbPriv>();
        for (DbPriv other_element : other.success) {
          __this__success.add(new DbPriv(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_db_auth_result clone() {
      return new get_db_auth_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DbPriv> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DbPriv elem) {
      if (this.success == null) {
        this.success = new ArrayList<DbPriv>();
      }
      this.success.add(elem);
    }

    public List<DbPriv> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<DbPriv> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DbPriv>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_db_auth_result)
        return this.equals((get_db_auth_result)that);
      return false;
    }

    public boolean equals(get_db_auth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list142 = iprot.readListBegin();
                this.success = new ArrayList<DbPriv>(_list142.size);
                for (int _i143 = 0; _i143 < _list142.size; ++_i143)
                {
                  DbPriv _elem144;
                  _elem144 = new DbPriv();
                  _elem144.read(iprot);
                  this.success.add(_elem144);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (DbPriv _iter145 : this.success)          {
            _iter145.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_db_auth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_db_auth_all_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_db_auth_all_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);

    private String byWho;
    public static final int BYWHO = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_db_auth_all_args.class, metaDataMap);
    }

    public get_db_auth_all_args() {
    }

    public get_db_auth_all_args(
      String byWho)
    {
      this();
      this.byWho = byWho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_db_auth_all_args(get_db_auth_all_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
    }

    @Override
    public get_db_auth_all_args clone() {
      return new get_db_auth_all_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_db_auth_all_args)
        return this.equals((get_db_auth_all_args)that);
      return false;
    }

    public boolean equals(get_db_auth_all_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_db_auth_all_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_db_auth_all_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_db_auth_all_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<DbPriv> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, DbPriv.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_db_auth_all_result.class, metaDataMap);
    }

    public get_db_auth_all_result() {
    }

    public get_db_auth_all_result(
      List<DbPriv> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_db_auth_all_result(get_db_auth_all_result other) {
      if (other.isSetSuccess()) {
        List<DbPriv> __this__success = new ArrayList<DbPriv>();
        for (DbPriv other_element : other.success) {
          __this__success.add(new DbPriv(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_db_auth_all_result clone() {
      return new get_db_auth_all_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DbPriv> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DbPriv elem) {
      if (this.success == null) {
        this.success = new ArrayList<DbPriv>();
      }
      this.success.add(elem);
    }

    public List<DbPriv> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<DbPriv> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DbPriv>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_db_auth_all_result)
        return this.equals((get_db_auth_all_result)that);
      return false;
    }

    public boolean equals(get_db_auth_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list146 = iprot.readListBegin();
                this.success = new ArrayList<DbPriv>(_list146.size);
                for (int _i147 = 0; _i147 < _list146.size; ++_i147)
                {
                  DbPriv _elem148;
                  _elem148 = new DbPriv();
                  _elem148.read(iprot);
                  this.success.add(_elem148);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (DbPriv _iter149 : this.success)          {
            _iter149.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_db_auth_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_tbl_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_tbl_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField WHO_FIELD_DESC = new TField("who", TType.STRING, (short)2);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)3);
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRING, (short)4);

    private String byWho;
    public static final int BYWHO = 1;
    private String who;
    public static final int WHO = 2;
    private String db;
    public static final int DB = 3;
    private String tbl;
    public static final int TBL = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(WHO, new FieldMetaData("who", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_tbl_args.class, metaDataMap);
    }

    public get_auth_on_tbl_args() {
    }

    public get_auth_on_tbl_args(
      String byWho,
      String who,
      String db,
      String tbl)
    {
      this();
      this.byWho = byWho;
      this.who = who;
      this.db = db;
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_tbl_args(get_auth_on_tbl_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetWho()) {
        this.who = other.who;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTbl()) {
        this.tbl = other.tbl;
      }
    }

    @Override
    public get_auth_on_tbl_args clone() {
      return new get_auth_on_tbl_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getWho() {
      return this.who;
    }

    public void setWho(String who) {
      this.who = who;
    }

    public void unsetWho() {
      this.who = null;
    }

    // Returns true if field who is set (has been asigned a value) and false otherwise
    public boolean isSetWho() {
      return this.who != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTbl() {
      return this.tbl;
    }

    public void setTbl(String tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case WHO:
        if (value == null) {
          unsetWho();
        } else {
          setWho((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case WHO:
        return getWho();

      case DB:
        return getDb();

      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case WHO:
        return isSetWho();
      case DB:
        return isSetDb();
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_tbl_args)
        return this.equals((get_auth_on_tbl_args)that);
      return false;
    }

    public boolean equals(get_auth_on_tbl_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_who = true && this.isSetWho();
      boolean that_present_who = true && that.isSetWho();
      if (this_present_who || that_present_who) {
        if (!(this_present_who && that_present_who))
          return false;
        if (!this.who.equals(that.who))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHO:
            if (field.type == TType.STRING) {
              this.who = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL:
            if (field.type == TType.STRING) {
              this.tbl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.who != null) {
        oprot.writeFieldBegin(WHO_FIELD_DESC);
        oprot.writeString(this.who);
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(this.tbl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_tbl_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("who:");
      if (this.who == null) {
        sb.append("null");
      } else {
        sb.append(this.who);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_tbl_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_tbl_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private TblPriv success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, TblPriv.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_tbl_result.class, metaDataMap);
    }

    public get_auth_on_tbl_result() {
    }

    public get_auth_on_tbl_result(
      TblPriv success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_tbl_result(get_auth_on_tbl_result other) {
      if (other.isSetSuccess()) {
        this.success = new TblPriv(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_auth_on_tbl_result clone() {
      return new get_auth_on_tbl_result(this);
    }

    public TblPriv getSuccess() {
      return this.success;
    }

    public void setSuccess(TblPriv success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TblPriv)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_tbl_result)
        return this.equals((get_auth_on_tbl_result)that);
      return false;
    }

    public boolean equals(get_auth_on_tbl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new TblPriv();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_tbl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_tbls_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_tbls_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField WHO_FIELD_DESC = new TField("who", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String who;
    public static final int WHO = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(WHO, new FieldMetaData("who", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_tbls_args.class, metaDataMap);
    }

    public get_auth_on_tbls_args() {
    }

    public get_auth_on_tbls_args(
      String byWho,
      String who)
    {
      this();
      this.byWho = byWho;
      this.who = who;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_tbls_args(get_auth_on_tbls_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetWho()) {
        this.who = other.who;
      }
    }

    @Override
    public get_auth_on_tbls_args clone() {
      return new get_auth_on_tbls_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getWho() {
      return this.who;
    }

    public void setWho(String who) {
      this.who = who;
    }

    public void unsetWho() {
      this.who = null;
    }

    // Returns true if field who is set (has been asigned a value) and false otherwise
    public boolean isSetWho() {
      return this.who != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case WHO:
        if (value == null) {
          unsetWho();
        } else {
          setWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case WHO:
        return getWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case WHO:
        return isSetWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_tbls_args)
        return this.equals((get_auth_on_tbls_args)that);
      return false;
    }

    public boolean equals(get_auth_on_tbls_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_who = true && this.isSetWho();
      boolean that_present_who = true && that.isSetWho();
      if (this_present_who || that_present_who) {
        if (!(this_present_who && that_present_who))
          return false;
        if (!this.who.equals(that.who))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHO:
            if (field.type == TType.STRING) {
              this.who = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.who != null) {
        oprot.writeFieldBegin(WHO_FIELD_DESC);
        oprot.writeString(this.who);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_tbls_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("who:");
      if (this.who == null) {
        sb.append("null");
      } else {
        sb.append(this.who);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_auth_on_tbls_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_auth_on_tbls_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<TblPriv> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, TblPriv.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_auth_on_tbls_result.class, metaDataMap);
    }

    public get_auth_on_tbls_result() {
    }

    public get_auth_on_tbls_result(
      List<TblPriv> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_auth_on_tbls_result(get_auth_on_tbls_result other) {
      if (other.isSetSuccess()) {
        List<TblPriv> __this__success = new ArrayList<TblPriv>();
        for (TblPriv other_element : other.success) {
          __this__success.add(new TblPriv(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_auth_on_tbls_result clone() {
      return new get_auth_on_tbls_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TblPriv> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TblPriv elem) {
      if (this.success == null) {
        this.success = new ArrayList<TblPriv>();
      }
      this.success.add(elem);
    }

    public List<TblPriv> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<TblPriv> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TblPriv>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_auth_on_tbls_result)
        return this.equals((get_auth_on_tbls_result)that);
      return false;
    }

    public boolean equals(get_auth_on_tbls_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list150 = iprot.readListBegin();
                this.success = new ArrayList<TblPriv>(_list150.size);
                for (int _i151 = 0; _i151 < _list150.size; ++_i151)
                {
                  TblPriv _elem152;
                  _elem152 = new TblPriv();
                  _elem152.read(iprot);
                  this.success.add(_elem152);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (TblPriv _iter153 : this.success)          {
            _iter153.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_auth_on_tbls_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tbl_auth_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tbl_auth_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)2);
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRING, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String db;
    public static final int DB = 2;
    private String tbl;
    public static final int TBL = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tbl_auth_args.class, metaDataMap);
    }

    public get_tbl_auth_args() {
    }

    public get_tbl_auth_args(
      String byWho,
      String db,
      String tbl)
    {
      this();
      this.byWho = byWho;
      this.db = db;
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tbl_auth_args(get_tbl_auth_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTbl()) {
        this.tbl = other.tbl;
      }
    }

    @Override
    public get_tbl_auth_args clone() {
      return new get_tbl_auth_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTbl() {
      return this.tbl;
    }

    public void setTbl(String tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case DB:
        return getDb();

      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case DB:
        return isSetDb();
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tbl_auth_args)
        return this.equals((get_tbl_auth_args)that);
      return false;
    }

    public boolean equals(get_tbl_auth_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL:
            if (field.type == TType.STRING) {
              this.tbl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(this.tbl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tbl_auth_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tbl_auth_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tbl_auth_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<TblPriv> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, TblPriv.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tbl_auth_result.class, metaDataMap);
    }

    public get_tbl_auth_result() {
    }

    public get_tbl_auth_result(
      List<TblPriv> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tbl_auth_result(get_tbl_auth_result other) {
      if (other.isSetSuccess()) {
        List<TblPriv> __this__success = new ArrayList<TblPriv>();
        for (TblPriv other_element : other.success) {
          __this__success.add(new TblPriv(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_tbl_auth_result clone() {
      return new get_tbl_auth_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TblPriv> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TblPriv elem) {
      if (this.success == null) {
        this.success = new ArrayList<TblPriv>();
      }
      this.success.add(elem);
    }

    public List<TblPriv> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<TblPriv> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TblPriv>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tbl_auth_result)
        return this.equals((get_tbl_auth_result)that);
      return false;
    }

    public boolean equals(get_tbl_auth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list154 = iprot.readListBegin();
                this.success = new ArrayList<TblPriv>(_list154.size);
                for (int _i155 = 0; _i155 < _list154.size; ++_i155)
                {
                  TblPriv _elem156;
                  _elem156 = new TblPriv();
                  _elem156.read(iprot);
                  this.success.add(_elem156);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (TblPriv _iter157 : this.success)          {
            _iter157.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tbl_auth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tbl_auth_all_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tbl_auth_all_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);

    private String byWho;
    public static final int BYWHO = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tbl_auth_all_args.class, metaDataMap);
    }

    public get_tbl_auth_all_args() {
    }

    public get_tbl_auth_all_args(
      String byWho)
    {
      this();
      this.byWho = byWho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tbl_auth_all_args(get_tbl_auth_all_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
    }

    @Override
    public get_tbl_auth_all_args clone() {
      return new get_tbl_auth_all_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tbl_auth_all_args)
        return this.equals((get_tbl_auth_all_args)that);
      return false;
    }

    public boolean equals(get_tbl_auth_all_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tbl_auth_all_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_tbl_auth_all_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_tbl_auth_all_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<TblPriv> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, TblPriv.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_tbl_auth_all_result.class, metaDataMap);
    }

    public get_tbl_auth_all_result() {
    }

    public get_tbl_auth_all_result(
      List<TblPriv> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tbl_auth_all_result(get_tbl_auth_all_result other) {
      if (other.isSetSuccess()) {
        List<TblPriv> __this__success = new ArrayList<TblPriv>();
        for (TblPriv other_element : other.success) {
          __this__success.add(new TblPriv(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_tbl_auth_all_result clone() {
      return new get_tbl_auth_all_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TblPriv> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TblPriv elem) {
      if (this.success == null) {
        this.success = new ArrayList<TblPriv>();
      }
      this.success.add(elem);
    }

    public List<TblPriv> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<TblPriv> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TblPriv>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tbl_auth_all_result)
        return this.equals((get_tbl_auth_all_result)that);
      return false;
    }

    public boolean equals(get_tbl_auth_all_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list158 = iprot.readListBegin();
                this.success = new ArrayList<TblPriv>(_list158.size);
                for (int _i159 = 0; _i159 < _list158.size; ++_i159)
                {
                  TblPriv _elem160;
                  _elem160 = new TblPriv();
                  _elem160.read(iprot);
                  this.success.add(_elem160);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (TblPriv _iter161 : this.success)          {
            _iter161.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tbl_auth_all_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_sys_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_sys_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String userName;
    public static final int USERNAME = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_sys_args.class, metaDataMap);
    }

    public revoke_auth_sys_args() {
    }

    public revoke_auth_sys_args(
      String byWho,
      String userName,
      List<String> privileges)
    {
      this();
      this.byWho = byWho;
      this.userName = userName;
      this.privileges = privileges;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_sys_args(revoke_auth_sys_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
    }

    @Override
    public revoke_auth_sys_args clone() {
      return new revoke_auth_sys_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case USERNAME:
        return getUserName();

      case PRIVILEGES:
        return getPrivileges();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case USERNAME:
        return isSetUserName();
      case PRIVILEGES:
        return isSetPrivileges();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_sys_args)
        return this.equals((revoke_auth_sys_args)that);
      return false;
    }

    public boolean equals(revoke_auth_sys_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list162 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list162.size);
                for (int _i163 = 0; _i163 < _list162.size; ++_i163)
                {
                  String _elem164;
                  _elem164 = iprot.readString();
                  this.privileges.add(_elem164);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter165 : this.privileges)          {
            oprot.writeString(_iter165);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_sys_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_sys_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_sys_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_sys_result.class, metaDataMap);
    }

    public revoke_auth_sys_result() {
    }

    public revoke_auth_sys_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_sys_result(revoke_auth_sys_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public revoke_auth_sys_result clone() {
      return new revoke_auth_sys_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_sys_result)
        return this.equals((revoke_auth_sys_result)that);
      return false;
    }

    public boolean equals(revoke_auth_sys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_sys_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_role_sys_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_role_sys_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_role_sys_args.class, metaDataMap);
    }

    public revoke_auth_role_sys_args() {
    }

    public revoke_auth_role_sys_args(
      String byWho,
      String roleName,
      List<String> privileges)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
      this.privileges = privileges;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_role_sys_args(revoke_auth_role_sys_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
    }

    @Override
    public revoke_auth_role_sys_args clone() {
      return new revoke_auth_role_sys_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      case PRIVILEGES:
        return getPrivileges();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      case PRIVILEGES:
        return isSetPrivileges();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_role_sys_args)
        return this.equals((revoke_auth_role_sys_args)that);
      return false;
    }

    public boolean equals(revoke_auth_role_sys_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list166 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list166.size);
                for (int _i167 = 0; _i167 < _list166.size; ++_i167)
                {
                  String _elem168;
                  _elem168 = iprot.readString();
                  this.privileges.add(_elem168);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter169 : this.privileges)          {
            oprot.writeString(_iter169);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_role_sys_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_role_sys_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_role_sys_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_role_sys_result.class, metaDataMap);
    }

    public revoke_auth_role_sys_result() {
    }

    public revoke_auth_role_sys_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_role_sys_result(revoke_auth_role_sys_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public revoke_auth_role_sys_result clone() {
      return new revoke_auth_role_sys_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_role_sys_result)
        return this.equals((revoke_auth_role_sys_result)that);
      return false;
    }

    public boolean equals(revoke_auth_role_sys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_role_sys_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_role_from_user_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_role_from_user_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);
    private static final TField ROLE_NAMES_FIELD_DESC = new TField("roleNames", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String userName;
    public static final int USERNAME = 2;
    private List<String> roleNames;
    public static final int ROLENAMES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(USERNAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAMES, new FieldMetaData("roleNames", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_role_from_user_args.class, metaDataMap);
    }

    public revoke_role_from_user_args() {
    }

    public revoke_role_from_user_args(
      String byWho,
      String userName,
      List<String> roleNames)
    {
      this();
      this.byWho = byWho;
      this.userName = userName;
      this.roleNames = roleNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_role_from_user_args(revoke_role_from_user_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetRoleNames()) {
        List<String> __this__roleNames = new ArrayList<String>();
        for (String other_element : other.roleNames) {
          __this__roleNames.add(other_element);
        }
        this.roleNames = __this__roleNames;
      }
    }

    @Override
    public revoke_role_from_user_args clone() {
      return new revoke_role_from_user_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getUserName() {
      return this.userName;
    }

    public void setUserName(String userName) {
      this.userName = userName;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    // Returns true if field userName is set (has been asigned a value) and false otherwise
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public int getRoleNamesSize() {
      return (this.roleNames == null) ? 0 : this.roleNames.size();
    }

    public java.util.Iterator<String> getRoleNamesIterator() {
      return (this.roleNames == null) ? null : this.roleNames.iterator();
    }

    public void addToRoleNames(String elem) {
      if (this.roleNames == null) {
        this.roleNames = new ArrayList<String>();
      }
      this.roleNames.add(elem);
    }

    public List<String> getRoleNames() {
      return this.roleNames;
    }

    public void setRoleNames(List<String> roleNames) {
      this.roleNames = roleNames;
    }

    public void unsetRoleNames() {
      this.roleNames = null;
    }

    // Returns true if field roleNames is set (has been asigned a value) and false otherwise
    public boolean isSetRoleNames() {
      return this.roleNames != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case ROLENAMES:
        if (value == null) {
          unsetRoleNames();
        } else {
          setRoleNames((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case USERNAME:
        return getUserName();

      case ROLENAMES:
        return getRoleNames();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case USERNAME:
        return isSetUserName();
      case ROLENAMES:
        return isSetRoleNames();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_role_from_user_args)
        return this.equals((revoke_role_from_user_args)that);
      return false;
    }

    public boolean equals(revoke_role_from_user_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_roleNames = true && this.isSetRoleNames();
      boolean that_present_roleNames = true && that.isSetRoleNames();
      if (this_present_roleNames || that_present_roleNames) {
        if (!(this_present_roleNames && that_present_roleNames))
          return false;
        if (!this.roleNames.equals(that.roleNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.userName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAMES:
            if (field.type == TType.LIST) {
              {
                TList _list170 = iprot.readListBegin();
                this.roleNames = new ArrayList<String>(_list170.size);
                for (int _i171 = 0; _i171 < _list170.size; ++_i171)
                {
                  String _elem172;
                  _elem172 = iprot.readString();
                  this.roleNames.add(_elem172);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(this.userName);
        oprot.writeFieldEnd();
      }
      if (this.roleNames != null) {
        oprot.writeFieldBegin(ROLE_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.roleNames.size()));
          for (String _iter173 : this.roleNames)          {
            oprot.writeString(_iter173);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_role_from_user_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleNames:");
      if (this.roleNames == null) {
        sb.append("null");
      } else {
        sb.append(this.roleNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_role_from_user_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_role_from_user_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_role_from_user_result.class, metaDataMap);
    }

    public revoke_role_from_user_result() {
    }

    public revoke_role_from_user_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_role_from_user_result(revoke_role_from_user_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public revoke_role_from_user_result clone() {
      return new revoke_role_from_user_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_role_from_user_result)
        return this.equals((revoke_role_from_user_result)that);
      return false;
    }

    public boolean equals(revoke_role_from_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_role_from_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_role_from_role_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_role_from_role_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField ROLE_NAME_FIELD_DESC = new TField("roleName", TType.STRING, (short)2);
    private static final TField ROLE_NAMES_FIELD_DESC = new TField("roleNames", TType.LIST, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String roleName;
    public static final int ROLENAME = 2;
    private List<String> roleNames;
    public static final int ROLENAMES = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAME, new FieldMetaData("roleName", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(ROLENAMES, new FieldMetaData("roleNames", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_role_from_role_args.class, metaDataMap);
    }

    public revoke_role_from_role_args() {
    }

    public revoke_role_from_role_args(
      String byWho,
      String roleName,
      List<String> roleNames)
    {
      this();
      this.byWho = byWho;
      this.roleName = roleName;
      this.roleNames = roleNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_role_from_role_args(revoke_role_from_role_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetRoleNames()) {
        List<String> __this__roleNames = new ArrayList<String>();
        for (String other_element : other.roleNames) {
          __this__roleNames.add(other_element);
        }
        this.roleNames = __this__roleNames;
      }
    }

    @Override
    public revoke_role_from_role_args clone() {
      return new revoke_role_from_role_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public void setRoleName(String roleName) {
      this.roleName = roleName;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    // Returns true if field roleName is set (has been asigned a value) and false otherwise
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public int getRoleNamesSize() {
      return (this.roleNames == null) ? 0 : this.roleNames.size();
    }

    public java.util.Iterator<String> getRoleNamesIterator() {
      return (this.roleNames == null) ? null : this.roleNames.iterator();
    }

    public void addToRoleNames(String elem) {
      if (this.roleNames == null) {
        this.roleNames = new ArrayList<String>();
      }
      this.roleNames.add(elem);
    }

    public List<String> getRoleNames() {
      return this.roleNames;
    }

    public void setRoleNames(List<String> roleNames) {
      this.roleNames = roleNames;
    }

    public void unsetRoleNames() {
      this.roleNames = null;
    }

    // Returns true if field roleNames is set (has been asigned a value) and false otherwise
    public boolean isSetRoleNames() {
      return this.roleNames != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case ROLENAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case ROLENAMES:
        if (value == null) {
          unsetRoleNames();
        } else {
          setRoleNames((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case ROLENAME:
        return getRoleName();

      case ROLENAMES:
        return getRoleNames();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case ROLENAME:
        return isSetRoleName();
      case ROLENAMES:
        return isSetRoleNames();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_role_from_role_args)
        return this.equals((revoke_role_from_role_args)that);
      return false;
    }

    public boolean equals(revoke_role_from_role_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_roleNames = true && this.isSetRoleNames();
      boolean that_present_roleNames = true && that.isSetRoleNames();
      if (this_present_roleNames || that_present_roleNames) {
        if (!(this_present_roleNames && that_present_roleNames))
          return false;
        if (!this.roleNames.equals(that.roleNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAME:
            if (field.type == TType.STRING) {
              this.roleName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROLENAMES:
            if (field.type == TType.LIST) {
              {
                TList _list174 = iprot.readListBegin();
                this.roleNames = new ArrayList<String>(_list174.size);
                for (int _i175 = 0; _i175 < _list174.size; ++_i175)
                {
                  String _elem176;
                  _elem176 = iprot.readString();
                  this.roleNames.add(_elem176);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(this.roleName);
        oprot.writeFieldEnd();
      }
      if (this.roleNames != null) {
        oprot.writeFieldBegin(ROLE_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.roleNames.size()));
          for (String _iter177 : this.roleNames)          {
            oprot.writeString(_iter177);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_role_from_role_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleNames:");
      if (this.roleNames == null) {
        sb.append("null");
      } else {
        sb.append(this.roleNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_role_from_role_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_role_from_role_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_role_from_role_result.class, metaDataMap);
    }

    public revoke_role_from_role_result() {
    }

    public revoke_role_from_role_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_role_from_role_result(revoke_role_from_role_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public revoke_role_from_role_result clone() {
      return new revoke_role_from_role_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_role_from_role_result)
        return this.equals((revoke_role_from_role_result)that);
      return false;
    }

    public boolean equals(revoke_role_from_role_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_role_from_role_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_on_db_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_on_db_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField WHO_FIELD_DESC = new TField("who", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)4);

    private String byWho;
    public static final int BYWHO = 1;
    private String who;
    public static final int WHO = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;
    private String db;
    public static final int DB = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(WHO, new FieldMetaData("who", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_on_db_args.class, metaDataMap);
    }

    public revoke_auth_on_db_args() {
    }

    public revoke_auth_on_db_args(
      String byWho,
      String who,
      List<String> privileges,
      String db)
    {
      this();
      this.byWho = byWho;
      this.who = who;
      this.privileges = privileges;
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_on_db_args(revoke_auth_on_db_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetWho()) {
        this.who = other.who;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
    }

    @Override
    public revoke_auth_on_db_args clone() {
      return new revoke_auth_on_db_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getWho() {
      return this.who;
    }

    public void setWho(String who) {
      this.who = who;
    }

    public void unsetWho() {
      this.who = null;
    }

    // Returns true if field who is set (has been asigned a value) and false otherwise
    public boolean isSetWho() {
      return this.who != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case WHO:
        if (value == null) {
          unsetWho();
        } else {
          setWho((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case WHO:
        return getWho();

      case PRIVILEGES:
        return getPrivileges();

      case DB:
        return getDb();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case WHO:
        return isSetWho();
      case PRIVILEGES:
        return isSetPrivileges();
      case DB:
        return isSetDb();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_on_db_args)
        return this.equals((revoke_auth_on_db_args)that);
      return false;
    }

    public boolean equals(revoke_auth_on_db_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_who = true && this.isSetWho();
      boolean that_present_who = true && that.isSetWho();
      if (this_present_who || that_present_who) {
        if (!(this_present_who && that_present_who))
          return false;
        if (!this.who.equals(that.who))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHO:
            if (field.type == TType.STRING) {
              this.who = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list178 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list178.size);
                for (int _i179 = 0; _i179 < _list178.size; ++_i179)
                {
                  String _elem180;
                  _elem180 = iprot.readString();
                  this.privileges.add(_elem180);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.who != null) {
        oprot.writeFieldBegin(WHO_FIELD_DESC);
        oprot.writeString(this.who);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter181 : this.privileges)          {
            oprot.writeString(_iter181);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_on_db_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("who:");
      if (this.who == null) {
        sb.append("null");
      } else {
        sb.append(this.who);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_on_db_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_on_db_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_on_db_result.class, metaDataMap);
    }

    public revoke_auth_on_db_result() {
    }

    public revoke_auth_on_db_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_on_db_result(revoke_auth_on_db_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public revoke_auth_on_db_result clone() {
      return new revoke_auth_on_db_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_on_db_result)
        return this.equals((revoke_auth_on_db_result)that);
      return false;
    }

    public boolean equals(revoke_auth_on_db_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_on_db_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_on_tbl_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_on_tbl_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField WHO_FIELD_DESC = new TField("who", TType.STRING, (short)2);
    private static final TField PRIVILEGES_FIELD_DESC = new TField("privileges", TType.LIST, (short)3);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)4);
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRING, (short)5);

    private String byWho;
    public static final int BYWHO = 1;
    private String who;
    public static final int WHO = 2;
    private List<String> privileges;
    public static final int PRIVILEGES = 3;
    private String db;
    public static final int DB = 4;
    private String tbl;
    public static final int TBL = 5;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(WHO, new FieldMetaData("who", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(PRIVILEGES, new FieldMetaData("privileges", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_on_tbl_args.class, metaDataMap);
    }

    public revoke_auth_on_tbl_args() {
    }

    public revoke_auth_on_tbl_args(
      String byWho,
      String who,
      List<String> privileges,
      String db,
      String tbl)
    {
      this();
      this.byWho = byWho;
      this.who = who;
      this.privileges = privileges;
      this.db = db;
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_on_tbl_args(revoke_auth_on_tbl_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetWho()) {
        this.who = other.who;
      }
      if (other.isSetPrivileges()) {
        List<String> __this__privileges = new ArrayList<String>();
        for (String other_element : other.privileges) {
          __this__privileges.add(other_element);
        }
        this.privileges = __this__privileges;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTbl()) {
        this.tbl = other.tbl;
      }
    }

    @Override
    public revoke_auth_on_tbl_args clone() {
      return new revoke_auth_on_tbl_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getWho() {
      return this.who;
    }

    public void setWho(String who) {
      this.who = who;
    }

    public void unsetWho() {
      this.who = null;
    }

    // Returns true if field who is set (has been asigned a value) and false otherwise
    public boolean isSetWho() {
      return this.who != null;
    }

    public int getPrivilegesSize() {
      return (this.privileges == null) ? 0 : this.privileges.size();
    }

    public java.util.Iterator<String> getPrivilegesIterator() {
      return (this.privileges == null) ? null : this.privileges.iterator();
    }

    public void addToPrivileges(String elem) {
      if (this.privileges == null) {
        this.privileges = new ArrayList<String>();
      }
      this.privileges.add(elem);
    }

    public List<String> getPrivileges() {
      return this.privileges;
    }

    public void setPrivileges(List<String> privileges) {
      this.privileges = privileges;
    }

    public void unsetPrivileges() {
      this.privileges = null;
    }

    // Returns true if field privileges is set (has been asigned a value) and false otherwise
    public boolean isSetPrivileges() {
      return this.privileges != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTbl() {
      return this.tbl;
    }

    public void setTbl(String tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case WHO:
        if (value == null) {
          unsetWho();
        } else {
          setWho((String)value);
        }
        break;

      case PRIVILEGES:
        if (value == null) {
          unsetPrivileges();
        } else {
          setPrivileges((List<String>)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case WHO:
        return getWho();

      case PRIVILEGES:
        return getPrivileges();

      case DB:
        return getDb();

      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case WHO:
        return isSetWho();
      case PRIVILEGES:
        return isSetPrivileges();
      case DB:
        return isSetDb();
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_on_tbl_args)
        return this.equals((revoke_auth_on_tbl_args)that);
      return false;
    }

    public boolean equals(revoke_auth_on_tbl_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_who = true && this.isSetWho();
      boolean that_present_who = true && that.isSetWho();
      if (this_present_who || that_present_who) {
        if (!(this_present_who && that_present_who))
          return false;
        if (!this.who.equals(that.who))
          return false;
      }

      boolean this_present_privileges = true && this.isSetPrivileges();
      boolean that_present_privileges = true && that.isSetPrivileges();
      if (this_present_privileges || that_present_privileges) {
        if (!(this_present_privileges && that_present_privileges))
          return false;
        if (!this.privileges.equals(that.privileges))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHO:
            if (field.type == TType.STRING) {
              this.who = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PRIVILEGES:
            if (field.type == TType.LIST) {
              {
                TList _list182 = iprot.readListBegin();
                this.privileges = new ArrayList<String>(_list182.size);
                for (int _i183 = 0; _i183 < _list182.size; ++_i183)
                {
                  String _elem184;
                  _elem184 = iprot.readString();
                  this.privileges.add(_elem184);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL:
            if (field.type == TType.STRING) {
              this.tbl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.who != null) {
        oprot.writeFieldBegin(WHO_FIELD_DESC);
        oprot.writeString(this.who);
        oprot.writeFieldEnd();
      }
      if (this.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.privileges.size()));
          for (String _iter185 : this.privileges)          {
            oprot.writeString(_iter185);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(this.tbl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_on_tbl_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("who:");
      if (this.who == null) {
        sb.append("null");
      } else {
        sb.append(this.who);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("privileges:");
      if (this.privileges == null) {
        sb.append("null");
      } else {
        sb.append(this.privileges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class revoke_auth_on_tbl_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("revoke_auth_on_tbl_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);
    private static final TField O2_FIELD_DESC = new TField("o2", TType.STRUCT, (short)2);
    private static final TField O3_FIELD_DESC = new TField("o3", TType.STRUCT, (short)3);

    private boolean success;
    public static final int SUCCESS = 0;
    private NoSuchObjectException o1;
    public static final int O1 = 1;
    private InvalidObjectException o2;
    public static final int O2 = 2;
    private MetaException o3;
    public static final int O3 = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O2, new FieldMetaData("o2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(O3, new FieldMetaData("o3", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(revoke_auth_on_tbl_result.class, metaDataMap);
    }

    public revoke_auth_on_tbl_result() {
    }

    public revoke_auth_on_tbl_result(
      boolean success,
      NoSuchObjectException o1,
      InvalidObjectException o2,
      MetaException o3)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
      this.o2 = o2;
      this.o3 = o3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revoke_auth_on_tbl_result(revoke_auth_on_tbl_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new NoSuchObjectException(other.o1);
      }
      if (other.isSetO2()) {
        this.o2 = new InvalidObjectException(other.o2);
      }
      if (other.isSetO3()) {
        this.o3 = new MetaException(other.o3);
      }
    }

    @Override
    public revoke_auth_on_tbl_result clone() {
      return new revoke_auth_on_tbl_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public NoSuchObjectException getO1() {
      return this.o1;
    }

    public void setO1(NoSuchObjectException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public InvalidObjectException getO2() {
      return this.o2;
    }

    public void setO2(InvalidObjectException o2) {
      this.o2 = o2;
    }

    public void unsetO2() {
      this.o2 = null;
    }

    // Returns true if field o2 is set (has been asigned a value) and false otherwise
    public boolean isSetO2() {
      return this.o2 != null;
    }

    public MetaException getO3() {
      return this.o3;
    }

    public void setO3(MetaException o3) {
      this.o3 = o3;
    }

    public void unsetO3() {
      this.o3 = null;
    }

    // Returns true if field o3 is set (has been asigned a value) and false otherwise
    public boolean isSetO3() {
      return this.o3 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((NoSuchObjectException)value);
        }
        break;

      case O2:
        if (value == null) {
          unsetO2();
        } else {
          setO2((InvalidObjectException)value);
        }
        break;

      case O3:
        if (value == null) {
          unsetO3();
        } else {
          setO3((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      case O2:
        return getO2();

      case O3:
        return getO3();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      case O3:
        return isSetO3();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revoke_auth_on_tbl_result)
        return this.equals((revoke_auth_on_tbl_result)that);
      return false;
    }

    public boolean equals(revoke_auth_on_tbl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      boolean this_present_o2 = true && this.isSetO2();
      boolean that_present_o2 = true && that.isSetO2();
      if (this_present_o2 || that_present_o2) {
        if (!(this_present_o2 && that_present_o2))
          return false;
        if (!this.o2.equals(that.o2))
          return false;
      }

      boolean this_present_o3 = true && this.isSetO3();
      boolean that_present_o3 = true && that.isSetO3();
      if (this_present_o3 || that_present_o3) {
        if (!(this_present_o3 && that_present_o3))
          return false;
        if (!this.o3.equals(that.o3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new NoSuchObjectException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O2:
            if (field.type == TType.STRUCT) {
              this.o2 = new InvalidObjectException();
              this.o2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O3:
            if (field.type == TType.STRUCT) {
              this.o3 = new MetaException();
              this.o3.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO2()) {
        oprot.writeFieldBegin(O2_FIELD_DESC);
        this.o2.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO3()) {
        oprot.writeFieldBegin(O3_FIELD_DESC);
        this.o3.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revoke_auth_on_tbl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o2:");
      if (this.o2 == null) {
        sb.append("null");
      } else {
        sb.append(this.o2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o3:");
      if (this.o3 == null) {
        sb.append("null");
      } else {
        sb.append(this.o3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_on_db_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_on_db_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)3);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;
    private String db;
    public static final int DB = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_on_db_args.class, metaDataMap);
    }

    public drop_auth_on_db_args() {
    }

    public drop_auth_on_db_args(
      String byWho,
      String forWho,
      String db)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_on_db_args(drop_auth_on_db_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
    }

    @Override
    public drop_auth_on_db_args clone() {
      return new drop_auth_on_db_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      case DB:
        return getDb();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      case DB:
        return isSetDb();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_on_db_args)
        return this.equals((drop_auth_on_db_args)that);
      return false;
    }

    public boolean equals(drop_auth_on_db_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_on_db_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_on_db_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_on_db_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_on_db_result.class, metaDataMap);
    }

    public drop_auth_on_db_result() {
    }

    public drop_auth_on_db_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_on_db_result(drop_auth_on_db_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public drop_auth_on_db_result clone() {
      return new drop_auth_on_db_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_on_db_result)
        return this.equals((drop_auth_on_db_result)that);
      return false;
    }

    public boolean equals(drop_auth_on_db_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_on_db_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_in_db_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_in_db_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_in_db_args.class, metaDataMap);
    }

    public drop_auth_in_db_args() {
    }

    public drop_auth_in_db_args(
      String byWho,
      String forWho)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_in_db_args(drop_auth_in_db_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
    }

    @Override
    public drop_auth_in_db_args clone() {
      return new drop_auth_in_db_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_in_db_args)
        return this.equals((drop_auth_in_db_args)that);
      return false;
    }

    public boolean equals(drop_auth_in_db_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_in_db_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_in_db_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_in_db_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_in_db_result.class, metaDataMap);
    }

    public drop_auth_in_db_result() {
    }

    public drop_auth_in_db_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_in_db_result(drop_auth_in_db_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public drop_auth_in_db_result clone() {
      return new drop_auth_in_db_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_in_db_result)
        return this.equals((drop_auth_in_db_result)that);
      return false;
    }

    public boolean equals(drop_auth_in_db_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_in_db_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_on_tbl_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_on_tbl_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)3);
    private static final TField TBL_FIELD_DESC = new TField("tbl", TType.STRING, (short)4);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;
    private String db;
    public static final int DB = 3;
    private String tbl;
    public static final int TBL = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TBL, new FieldMetaData("tbl", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_on_tbl_args.class, metaDataMap);
    }

    public drop_auth_on_tbl_args() {
    }

    public drop_auth_on_tbl_args(
      String byWho,
      String forWho,
      String db,
      String tbl)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
      this.db = db;
      this.tbl = tbl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_on_tbl_args(drop_auth_on_tbl_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTbl()) {
        this.tbl = other.tbl;
      }
    }

    @Override
    public drop_auth_on_tbl_args clone() {
      return new drop_auth_on_tbl_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTbl() {
      return this.tbl;
    }

    public void setTbl(String tbl) {
      this.tbl = tbl;
    }

    public void unsetTbl() {
      this.tbl = null;
    }

    // Returns true if field tbl is set (has been asigned a value) and false otherwise
    public boolean isSetTbl() {
      return this.tbl != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TBL:
        if (value == null) {
          unsetTbl();
        } else {
          setTbl((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      case DB:
        return getDb();

      case TBL:
        return getTbl();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      case DB:
        return isSetDb();
      case TBL:
        return isSetTbl();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_on_tbl_args)
        return this.equals((drop_auth_on_tbl_args)that);
      return false;
    }

    public boolean equals(drop_auth_on_tbl_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tbl = true && this.isSetTbl();
      boolean that_present_tbl = true && that.isSetTbl();
      if (this_present_tbl || that_present_tbl) {
        if (!(this_present_tbl && that_present_tbl))
          return false;
        if (!this.tbl.equals(that.tbl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TBL:
            if (field.type == TType.STRING) {
              this.tbl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(this.tbl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_on_tbl_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tbl:");
      if (this.tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_on_tbl_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_on_tbl_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_on_tbl_result.class, metaDataMap);
    }

    public drop_auth_on_tbl_result() {
    }

    public drop_auth_on_tbl_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_on_tbl_result(drop_auth_on_tbl_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public drop_auth_on_tbl_result clone() {
      return new drop_auth_on_tbl_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_on_tbl_result)
        return this.equals((drop_auth_on_tbl_result)that);
      return false;
    }

    public boolean equals(drop_auth_on_tbl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_on_tbl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_in_tbl_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_in_tbl_args");
    private static final TField BY_WHO_FIELD_DESC = new TField("byWho", TType.STRING, (short)1);
    private static final TField FOR_WHO_FIELD_DESC = new TField("forWho", TType.STRING, (short)2);

    private String byWho;
    public static final int BYWHO = 1;
    private String forWho;
    public static final int FORWHO = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BYWHO, new FieldMetaData("byWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FORWHO, new FieldMetaData("forWho", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_in_tbl_args.class, metaDataMap);
    }

    public drop_auth_in_tbl_args() {
    }

    public drop_auth_in_tbl_args(
      String byWho,
      String forWho)
    {
      this();
      this.byWho = byWho;
      this.forWho = forWho;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_in_tbl_args(drop_auth_in_tbl_args other) {
      if (other.isSetByWho()) {
        this.byWho = other.byWho;
      }
      if (other.isSetForWho()) {
        this.forWho = other.forWho;
      }
    }

    @Override
    public drop_auth_in_tbl_args clone() {
      return new drop_auth_in_tbl_args(this);
    }

    public String getByWho() {
      return this.byWho;
    }

    public void setByWho(String byWho) {
      this.byWho = byWho;
    }

    public void unsetByWho() {
      this.byWho = null;
    }

    // Returns true if field byWho is set (has been asigned a value) and false otherwise
    public boolean isSetByWho() {
      return this.byWho != null;
    }

    public String getForWho() {
      return this.forWho;
    }

    public void setForWho(String forWho) {
      this.forWho = forWho;
    }

    public void unsetForWho() {
      this.forWho = null;
    }

    // Returns true if field forWho is set (has been asigned a value) and false otherwise
    public boolean isSetForWho() {
      return this.forWho != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BYWHO:
        if (value == null) {
          unsetByWho();
        } else {
          setByWho((String)value);
        }
        break;

      case FORWHO:
        if (value == null) {
          unsetForWho();
        } else {
          setForWho((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return getByWho();

      case FORWHO:
        return getForWho();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BYWHO:
        return isSetByWho();
      case FORWHO:
        return isSetForWho();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_in_tbl_args)
        return this.equals((drop_auth_in_tbl_args)that);
      return false;
    }

    public boolean equals(drop_auth_in_tbl_args that) {
      if (that == null)
        return false;

      boolean this_present_byWho = true && this.isSetByWho();
      boolean that_present_byWho = true && that.isSetByWho();
      if (this_present_byWho || that_present_byWho) {
        if (!(this_present_byWho && that_present_byWho))
          return false;
        if (!this.byWho.equals(that.byWho))
          return false;
      }

      boolean this_present_forWho = true && this.isSetForWho();
      boolean that_present_forWho = true && that.isSetForWho();
      if (this_present_forWho || that_present_forWho) {
        if (!(this_present_forWho && that_present_forWho))
          return false;
        if (!this.forWho.equals(that.forWho))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BYWHO:
            if (field.type == TType.STRING) {
              this.byWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FORWHO:
            if (field.type == TType.STRING) {
              this.forWho = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.byWho != null) {
        oprot.writeFieldBegin(BY_WHO_FIELD_DESC);
        oprot.writeString(this.byWho);
        oprot.writeFieldEnd();
      }
      if (this.forWho != null) {
        oprot.writeFieldBegin(FOR_WHO_FIELD_DESC);
        oprot.writeString(this.forWho);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_in_tbl_args(");
      boolean first = true;

      sb.append("byWho:");
      if (this.byWho == null) {
        sb.append("null");
      } else {
        sb.append(this.byWho);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forWho:");
      if (this.forWho == null) {
        sb.append("null");
      } else {
        sb.append(this.forWho);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_auth_in_tbl_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_auth_in_tbl_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_auth_in_tbl_result.class, metaDataMap);
    }

    public drop_auth_in_tbl_result() {
    }

    public drop_auth_in_tbl_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_auth_in_tbl_result(drop_auth_in_tbl_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public drop_auth_in_tbl_result clone() {
      return new drop_auth_in_tbl_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_auth_in_tbl_result)
        return this.equals((drop_auth_in_tbl_result)that);
      return false;
    }

    public boolean equals(drop_auth_in_tbl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_auth_in_tbl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_index_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_index_args");
    private static final TField INDEX_FIELD_DESC = new TField("index", TType.STRUCT, (short)1);

    private IndexItem index;
    public static final int INDEX = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(INDEX, new FieldMetaData("index", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IndexItem.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_index_args.class, metaDataMap);
    }

    public create_index_args() {
    }

    public create_index_args(
      IndexItem index)
    {
      this();
      this.index = index;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_index_args(create_index_args other) {
      if (other.isSetIndex()) {
        this.index = new IndexItem(other.index);
      }
    }

    @Override
    public create_index_args clone() {
      return new create_index_args(this);
    }

    public IndexItem getIndex() {
      return this.index;
    }

    public void setIndex(IndexItem index) {
      this.index = index;
    }

    public void unsetIndex() {
      this.index = null;
    }

    // Returns true if field index is set (has been asigned a value) and false otherwise
    public boolean isSetIndex() {
      return this.index != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((IndexItem)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case INDEX:
        return getIndex();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case INDEX:
        return isSetIndex();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_index_args)
        return this.equals((create_index_args)that);
      return false;
    }

    public boolean equals(create_index_args that) {
      if (that == null)
        return false;

      boolean this_present_index = true && this.isSetIndex();
      boolean that_present_index = true && that.isSetIndex();
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (!this.index.equals(that.index))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case INDEX:
            if (field.type == TType.STRUCT) {
              this.index = new IndexItem();
              this.index.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.index != null) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        this.index.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_index_args(");
      boolean first = true;

      sb.append("index:");
      if (this.index == null) {
        sb.append("null");
      } else {
        sb.append(this.index);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class create_index_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("create_index_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(create_index_result.class, metaDataMap);
    }

    public create_index_result() {
    }

    public create_index_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_index_result(create_index_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public create_index_result clone() {
      return new create_index_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_index_result)
        return this.equals((create_index_result)that);
      return false;
    }

    public boolean equals(create_index_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_index_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_index_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_index_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_index_args.class, metaDataMap);
    }

    public drop_index_args() {
    }

    public drop_index_args(
      String db,
      String table,
      String name)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_index_args(drop_index_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public drop_index_args clone() {
      return new drop_index_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_index_args)
        return this.equals((drop_index_args)that);
      return false;
    }

    public boolean equals(drop_index_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_index_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class drop_index_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("drop_index_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(drop_index_result.class, metaDataMap);
    }

    public drop_index_result() {
    }

    public drop_index_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_index_result(drop_index_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public drop_index_result clone() {
      return new drop_index_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_index_result)
        return this.equals((drop_index_result)that);
      return false;
    }

    public boolean equals(drop_index_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_index_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_num_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_num_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_num_args.class, metaDataMap);
    }

    public get_index_num_args() {
    }

    public get_index_num_args(
      String db,
      String table)
    {
      this();
      this.db = db;
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_num_args(get_index_num_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    @Override
    public get_index_num_args clone() {
      return new get_index_num_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_num_args)
        return this.equals((get_index_num_args)that);
      return false;
    }

    public boolean equals(get_index_num_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_num_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_num_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_num_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private int success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_num_result.class, metaDataMap);
    }

    public get_index_num_result() {
    }

    public get_index_num_result(
      int success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_num_result(get_index_num_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_index_num_result clone() {
      return new get_index_num_result(this);
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Integer(getSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_num_result)
        return this.equals((get_index_num_result)that);
      return false;
    }

    public boolean equals(get_index_num_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_num_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_type_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_type_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_type_args.class, metaDataMap);
    }

    public get_index_type_args() {
    }

    public get_index_type_args(
      String db,
      String table,
      String name)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_type_args(get_index_type_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_index_type_args clone() {
      return new get_index_type_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_type_args)
        return this.equals((get_index_type_args)that);
      return false;
    }

    public boolean equals(get_index_type_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_type_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_type_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_type_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private int success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_type_result.class, metaDataMap);
    }

    public get_index_type_result() {
    }

    public get_index_type_result(
      int success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_type_result(get_index_type_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_index_type_result clone() {
      return new get_index_type_result(this);
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Integer(getSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_type_result)
        return this.equals((get_index_type_result)that);
      return false;
    }

    public boolean equals(get_index_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_type_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_field_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_field_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_field_args.class, metaDataMap);
    }

    public get_index_field_args() {
    }

    public get_index_field_args(
      String db,
      String table,
      String name)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_field_args(get_index_field_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_index_field_args clone() {
      return new get_index_field_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_field_args)
        return this.equals((get_index_field_args)that);
      return false;
    }

    public boolean equals(get_index_field_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_field_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_field_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_field_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private String success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_field_result.class, metaDataMap);
    }

    public get_index_field_result() {
    }

    public get_index_field_result(
      String success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_field_result(get_index_field_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_index_field_result clone() {
      return new get_index_field_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_field_result)
        return this.equals((get_index_field_result)that);
      return false;
    }

    public boolean equals(get_index_field_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_field_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_location_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_location_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_location_args.class, metaDataMap);
    }

    public get_index_location_args() {
    }

    public get_index_location_args(
      String db,
      String table,
      String name)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_location_args(get_index_location_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_index_location_args clone() {
      return new get_index_location_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_location_args)
        return this.equals((get_index_location_args)that);
      return false;
    }

    public boolean equals(get_index_location_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_location_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_location_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_location_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private String success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_location_result.class, metaDataMap);
    }

    public get_index_location_result() {
    }

    public get_index_location_result(
      String success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_location_result(get_index_location_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_index_location_result clone() {
      return new get_index_location_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_location_result)
        return this.equals((get_index_location_result)that);
      return false;
    }

    public boolean equals(get_index_location_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_location_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class set_index_location_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("set_index_location_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
    private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRING, (short)4);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;
    private String location;
    public static final int LOCATION = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(LOCATION, new FieldMetaData("location", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(set_index_location_args.class, metaDataMap);
    }

    public set_index_location_args() {
    }

    public set_index_location_args(
      String db,
      String table,
      String name,
      String location)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_index_location_args(set_index_location_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetLocation()) {
        this.location = other.location;
      }
    }

    @Override
    public set_index_location_args clone() {
      return new set_index_location_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public String getLocation() {
      return this.location;
    }

    public void setLocation(String location) {
      this.location = location;
    }

    public void unsetLocation() {
      this.location = null;
    }

    // Returns true if field location is set (has been asigned a value) and false otherwise
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      case LOCATION:
        return getLocation();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      case LOCATION:
        return isSetLocation();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_index_location_args)
        return this.equals((set_index_location_args)that);
      return false;
    }

    public boolean equals(set_index_location_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LOCATION:
            if (field.type == TType.STRING) {
              this.location = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(this.location);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_index_location_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class set_index_location_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("set_index_location_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(set_index_location_result.class, metaDataMap);
    }

    public set_index_location_result() {
    }

    public set_index_location_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_index_location_result(set_index_location_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public set_index_location_result clone() {
      return new set_index_location_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_index_location_result)
        return this.equals((set_index_location_result)that);
      return false;
    }

    public boolean equals(set_index_location_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_index_location_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class set_index_status_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("set_index_status_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
    private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)4);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;
    private int status;
    public static final int STATUS = 4;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean status = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(set_index_status_args.class, metaDataMap);
    }

    public set_index_status_args() {
    }

    public set_index_status_args(
      String db,
      String table,
      String name,
      int status)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
      this.status = status;
      this.__isset.status = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_index_status_args(set_index_status_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      __isset.status = other.__isset.status;
      this.status = other.status;
    }

    @Override
    public set_index_status_args clone() {
      return new set_index_status_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public int getStatus() {
      return this.status;
    }

    public void setStatus(int status) {
      this.status = status;
      this.__isset.status = true;
    }

    public void unsetStatus() {
      this.__isset.status = false;
    }

    // Returns true if field status is set (has been asigned a value) and false otherwise
    public boolean isSetStatus() {
      return this.__isset.status;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      case STATUS:
        return new Integer(getStatus());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      case STATUS:
        return isSetStatus();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_index_status_args)
        return this.equals((set_index_status_args)that);
      return false;
    }

    public boolean equals(set_index_status_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STATUS:
            if (field.type == TType.I32) {
              this.status = iprot.readI32();
              this.__isset.status = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_index_status_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class set_index_status_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("set_index_status_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private boolean success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(set_index_status_result.class, metaDataMap);
    }

    public set_index_status_result() {
    }

    public set_index_status_result(
      boolean success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_index_status_result(set_index_status_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public set_index_status_result clone() {
      return new set_index_status_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_index_status_result)
        return this.equals((set_index_status_result)that);
      return false;
    }

    public boolean equals(set_index_status_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_index_status_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_index_table_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_index_table_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_index_table_args.class, metaDataMap);
    }

    public get_all_index_table_args() {
    }

    public get_all_index_table_args(
      String db,
      String table)
    {
      this();
      this.db = db;
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_index_table_args(get_all_index_table_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    @Override
    public get_all_index_table_args clone() {
      return new get_all_index_table_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_index_table_args)
        return this.equals((get_all_index_table_args)that);
      return false;
    }

    public boolean equals(get_all_index_table_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_index_table_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_index_table_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_index_table_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<IndexItem> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, IndexItem.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_index_table_result.class, metaDataMap);
    }

    public get_all_index_table_result() {
    }

    public get_all_index_table_result(
      List<IndexItem> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_index_table_result(get_all_index_table_result other) {
      if (other.isSetSuccess()) {
        List<IndexItem> __this__success = new ArrayList<IndexItem>();
        for (IndexItem other_element : other.success) {
          __this__success.add(new IndexItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_all_index_table_result clone() {
      return new get_all_index_table_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IndexItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IndexItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<IndexItem>();
      }
      this.success.add(elem);
    }

    public List<IndexItem> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<IndexItem> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IndexItem>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_index_table_result)
        return this.equals((get_all_index_table_result)that);
      return false;
    }

    public boolean equals(get_all_index_table_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list186 = iprot.readListBegin();
                this.success = new ArrayList<IndexItem>(_list186.size);
                for (int _i187 = 0; _i187 < _list186.size; ++_i187)
                {
                  IndexItem _elem188;
                  _elem188 = new IndexItem();
                  _elem188.read(iprot);
                  this.success.add(_elem188);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (IndexItem _iter189 : this.success)          {
            _iter189.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_index_table_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_info_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_info_args");
    private static final TField DB_FIELD_DESC = new TField("db", TType.STRING, (short)1);
    private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    private String db;
    public static final int DB = 1;
    private String table;
    public static final int TABLE = 2;
    private String name;
    public static final int NAME = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(DB, new FieldMetaData("db", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_info_args.class, metaDataMap);
    }

    public get_index_info_args() {
    }

    public get_index_info_args(
      String db,
      String table,
      String name)
    {
      this();
      this.db = db;
      this.table = table;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_info_args(get_index_info_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public get_index_info_args clone() {
      return new get_index_info_args(this);
    }

    public String getDb() {
      return this.db;
    }

    public void setDb(String db) {
      this.db = db;
    }

    public void unsetDb() {
      this.db = null;
    }

    // Returns true if field db is set (has been asigned a value) and false otherwise
    public boolean isSetDb() {
      return this.db != null;
    }

    public String getTable() {
      return this.table;
    }

    public void setTable(String table) {
      this.table = table;
    }

    public void unsetTable() {
      this.table = null;
    }

    // Returns true if field table is set (has been asigned a value) and false otherwise
    public boolean isSetTable() {
      return this.table != null;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    // Returns true if field name is set (has been asigned a value) and false otherwise
    public boolean isSetName() {
      return this.name != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case DB:
        return getDb();

      case TABLE:
        return getTable();

      case NAME:
        return getName();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case DB:
        return isSetDb();
      case TABLE:
        return isSetTable();
      case NAME:
        return isSetName();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_info_args)
        return this.equals((get_index_info_args)that);
      return false;
    }

    public boolean equals(get_index_info_args that) {
      if (that == null)
        return false;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DB:
            if (field.type == TType.STRING) {
              this.db = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TABLE:
            if (field.type == TType.STRING) {
              this.table = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(this.db);
        oprot.writeFieldEnd();
      }
      if (this.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(this.table);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_info_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_index_info_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_index_info_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private IndexItem success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IndexItem.class)));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_index_info_result.class, metaDataMap);
    }

    public get_index_info_result() {
    }

    public get_index_info_result(
      IndexItem success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_index_info_result(get_index_info_result other) {
      if (other.isSetSuccess()) {
        this.success = new IndexItem(other.success);
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_index_info_result clone() {
      return new get_index_info_result(this);
    }

    public IndexItem getSuccess() {
      return this.success;
    }

    public void setSuccess(IndexItem success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IndexItem)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_index_info_result)
        return this.equals((get_index_info_result)that);
      return false;
    }

    public boolean equals(get_index_info_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new IndexItem();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_index_info_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_index_sys_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_index_sys_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_index_sys_args.class, metaDataMap);
    }

    public get_all_index_sys_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_index_sys_args(get_all_index_sys_args other) {
    }

    @Override
    public get_all_index_sys_args clone() {
      return new get_all_index_sys_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_index_sys_args)
        return this.equals((get_all_index_sys_args)that);
      return false;
    }

    public boolean equals(get_all_index_sys_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_index_sys_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class get_all_index_sys_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_all_index_sys_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField O1_FIELD_DESC = new TField("o1", TType.STRUCT, (short)1);

    private List<IndexItem> success;
    public static final int SUCCESS = 0;
    private MetaException o1;
    public static final int O1 = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, IndexItem.class))));
      put(O1, new FieldMetaData("o1", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(get_all_index_sys_result.class, metaDataMap);
    }

    public get_all_index_sys_result() {
    }

    public get_all_index_sys_result(
      List<IndexItem> success,
      MetaException o1)
    {
      this();
      this.success = success;
      this.o1 = o1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_all_index_sys_result(get_all_index_sys_result other) {
      if (other.isSetSuccess()) {
        List<IndexItem> __this__success = new ArrayList<IndexItem>();
        for (IndexItem other_element : other.success) {
          __this__success.add(new IndexItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetO1()) {
        this.o1 = new MetaException(other.o1);
      }
    }

    @Override
    public get_all_index_sys_result clone() {
      return new get_all_index_sys_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IndexItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IndexItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<IndexItem>();
      }
      this.success.add(elem);
    }

    public List<IndexItem> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<IndexItem> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public MetaException getO1() {
      return this.o1;
    }

    public void setO1(MetaException o1) {
      this.o1 = o1;
    }

    public void unsetO1() {
      this.o1 = null;
    }

    // Returns true if field o1 is set (has been asigned a value) and false otherwise
    public boolean isSetO1() {
      return this.o1 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IndexItem>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case O1:
        return getO1();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case O1:
        return isSetO1();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_all_index_sys_result)
        return this.equals((get_all_index_sys_result)that);
      return false;
    }

    public boolean equals(get_all_index_sys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_o1 = true && this.isSetO1();
      boolean that_present_o1 = true && that.isSetO1();
      if (this_present_o1 || that_present_o1) {
        if (!(this_present_o1 && that_present_o1))
          return false;
        if (!this.o1.equals(that.o1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list190 = iprot.readListBegin();
                this.success = new ArrayList<IndexItem>(_list190.size);
                for (int _i191 = 0; _i191 < _list190.size; ++_i191)
                {
                  IndexItem _elem192;
                  _elem192 = new IndexItem();
                  _elem192.read(iprot);
                  this.success.add(_elem192);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case O1:
            if (field.type == TType.STRUCT) {
              this.o1 = new MetaException();
              this.o1.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (IndexItem _iter193 : this.success)          {
            _iter193.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetO1()) {
        oprot.writeFieldBegin(O1_FIELD_DESC);
        this.o1.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_all_index_sys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("o1:");
      if (this.o1 == null) {
        sb.append("null");
      } else {
        sb.append(this.o1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
