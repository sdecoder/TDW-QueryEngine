query: CREATE TABLE dest1(c1 INT, c2 STRING) STORED AS TEXTFILE
query: EXPLAIN
FROM src JOIN srcpart ON src.key = srcpart.key AND srcpart.ds = '2008-04-08' and src.key > 100
INSERT OVERWRITE TABLE dest1 SELECT src.key, srcpart.value
ABSTRACT SYNTAX TREE:
  (TOK_QUERY (TOK_FROM (TOK_JOIN (TOK_TABREF (TOK_TAB src)) (TOK_TABREF (TOK_TAB srcpart)) (and (AND (= (. (TOK_TABLE_OR_COL src) key) (. (TOK_TABLE_OR_COL srcpart) key)) (= (. (TOK_TABLE_OR_COL srcpart) ds) '2008-04-08')) (> (. (TOK_TABLE_OR_COL src) key) 100)))) (TOK_INSERT (TOK_DESTINATION (TOK_TAB dest1)) (TOK_SELECT (TOK_SELEXPR (. (TOK_TABLE_OR_COL src) key)) (TOK_SELEXPR (. (TOK_TABLE_OR_COL srcpart) value)))))

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Alias -> Map Operator Tree:
        default_db/src 
          TableScan
            alias: default_db/src
            Filter Operator
              predicate:
                  expr: (UDFToDouble(key) > UDFToDouble(100))
                  type: boolean
              Filter Operator
                predicate:
                    expr: (UDFToDouble(key) > UDFToDouble(100))
                    type: boolean
                Reduce Output Operator
                  key expressions:
                        expr: key
                        type: string
                  sort order: +
                  Map-reduce partition columns:
                        expr: key
                        type: string
                  tag: 0
                  value expressions:
                        expr: key
                        type: string
        default_db/srcpart 
          TableScan
            alias: default_db/srcpart
            Filter Operator
              predicate:
                  expr: (ds = '2008-04-08')
                  type: boolean
              Filter Operator
                predicate:
                    expr: (ds = '2008-04-08')
                    type: boolean
                Reduce Output Operator
                  key expressions:
                        expr: key
                        type: string
                  sort order: +
                  Map-reduce partition columns:
                        expr: key
                        type: string
                  tag: 1
                  value expressions:
                        expr: value
                        type: string
      Path -> Alias:
        file:/data/allison/merged/build/ql/test/data/warehouse/default_db/src 
        file:/data/allison/merged/build/ql/test/data/warehouse/default_db/srcpart/p0/sp1 
        file:/data/allison/merged/build/ql/test/data/warehouse/default_db/srcpart/p0/sp2 
      Reduce Operator Tree:
        Join Operator
          condition map:
               Inner Join 0 to 1
          condition expressions:
            0 {VALUE._col0}
            1 {VALUE._col1}
          outputColumnNames: _col0, _col3
          Select Operator
            expressions:
                  expr: _col0
                  type: string
                  expr: _col3
                  type: string
            outputColumnNames: _col0, _col1
            Select Operator
              expressions:
                    expr: UDFToInteger(_col0)
                    type: int
                    expr: _col1
                    type: string
              outputColumnNames: _col0, _col1
              File Output Operator
                compressed: false
                GlobalTableId: 1
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
                    name: dest1

  Stage: Stage-0
    Move Operator
      tables:
          replace: true
          table:
              input format: org.apache.hadoop.mapred.TextInputFormat
              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              name: dest1


query: FROM src JOIN srcpart ON src.key = srcpart.key AND srcpart.ds = '2008-04-08' and src.key > 100
INSERT OVERWRITE TABLE dest1 SELECT src.key, srcpart.value
Output: default_db/dest1
query: select dest1.* from dest1
Input: default_db/dest1
Output: file:/data/allison/merged/build/ql/tmp/1194606491/10000
103	val_103
103	val_103
111	val_111
113	val_113
113	val_113
118	val_118
118	val_118
118	val_118
118	val_118
119	val_119
119	val_119
119	val_119
120	val_120
120	val_120
125	val_125
125	val_125
128	val_128
128	val_128
128	val_128
128	val_128
128	val_128
128	val_128
129	val_129
129	val_129
129	val_129
129	val_129
131	val_131
134	val_134
134	val_134
137	val_137
137	val_137
137	val_137
137	val_137
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
138	val_138
145	val_145
146	val_146
146	val_146
149	val_149
149	val_149
150	val_150
152	val_152
152	val_152
153	val_153
155	val_155
156	val_156
157	val_157
158	val_158
162	val_162
165	val_165
165	val_165
165	val_165
165	val_165
166	val_166
167	val_167
167	val_167
167	val_167
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
169	val_169
170	val_170
172	val_172
172	val_172
174	val_174
174	val_174
174	val_174
174	val_174
176	val_176
176	val_176
176	val_176
176	val_176
179	val_179
179	val_179
179	val_179
179	val_179
180	val_180
181	val_181
187	val_187
187	val_187
187	val_187
187	val_187
187	val_187
187	val_187
191	val_191
191	val_191
192	val_192
193	val_193
193	val_193
193	val_193
193	val_193
193	val_193
193	val_193
195	val_195
195	val_195
196	val_196
197	val_197
197	val_197
197	val_197
197	val_197
199	val_199
199	val_199
199	val_199
199	val_199
199	val_199
199	val_199
203	val_203
203	val_203
205	val_205
205	val_205
205	val_205
205	val_205
207	val_207
207	val_207
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
208	val_208
209	val_209
209	val_209
213	val_213
213	val_213
213	val_213
213	val_213
216	val_216
216	val_216
217	val_217
217	val_217
219	val_219
219	val_219
221	val_221
221	val_221
221	val_221
221	val_221
224	val_224
224	val_224
224	val_224
224	val_224
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
230	val_230
237	val_237
237	val_237
238	val_238
238	val_238
238	val_238
238	val_238
239	val_239
239	val_239
241	val_241
247	val_247
252	val_252
255	val_255
255	val_255
260	val_260
265	val_265
265	val_265
266	val_266
272	val_272
272	val_272
273	val_273
273	val_273
273	val_273
273	val_273
273	val_273
273	val_273
275	val_275
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
277	val_277
278	val_278
278	val_278
278	val_278
278	val_278
280	val_280
280	val_280
281	val_281
281	val_281
282	val_282
282	val_282
282	val_282
282	val_282
284	val_284
286	val_286
287	val_287
288	val_288
288	val_288
289	val_289
292	val_292
298	val_298
298	val_298
298	val_298
302	val_302
306	val_306
307	val_307
307	val_307
308	val_308
309	val_309
309	val_309
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
311	val_311
316	val_316
316	val_316
316	val_316
316	val_316
316	val_316
316	val_316
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
318	val_318
322	val_322
322	val_322
325	val_325
325	val_325
327	val_327
327	val_327
327	val_327
327	val_327
327	val_327
327	val_327
332	val_332
333	val_333
333	val_333
338	val_338
339	val_339
342	val_342
342	val_342
345	val_345
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
348	val_348
353	val_353
353	val_353
356	val_356
364	val_364
365	val_365
367	val_367
367	val_367
369	val_369
369	val_369
369	val_369
369	val_369
369	val_369
369	val_369
373	val_373
374	val_374
377	val_377
378	val_378
382	val_382
382	val_382
384	val_384
384	val_384
384	val_384
386	val_386
393	val_393
394	val_394
395	val_395
395	val_395
396	val_396
396	val_396
396	val_396
397	val_397
397	val_397
399	val_399
399	val_399
399	val_399
399	val_399
401	val_401
401	val_401
401	val_401
401	val_401
401	val_401
403	val_403
403	val_403
403	val_403
404	val_404
404	val_404
404	val_404
404	val_404
406	val_406
406	val_406
406	val_406
406	val_406
409	val_409
409	val_409
409	val_409
409	val_409
409	val_409
409	val_409
411	val_411
413	val_413
413	val_413
413	val_413
413	val_413
417	val_417
417	val_417
417	val_417
417	val_417
417	val_417
417	val_417
418	val_418
419	val_419
427	val_427
429	val_429
429	val_429
430	val_430
430	val_430
430	val_430
430	val_430
430	val_430
430	val_430
431	val_431
431	val_431
431	val_431
435	val_435
436	val_436
437	val_437
438	val_438
438	val_438
438	val_438
439	val_439
439	val_439
446	val_446
454	val_454
454	val_454
454	val_454
455	val_455
457	val_457
459	val_459
459	val_459
459	val_459
459	val_459
463	val_463
463	val_463
466	val_466
466	val_466
466	val_466
466	val_466
466	val_466
466	val_466
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
468	val_468
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
469	val_469
470	val_470
475	val_475
481	val_481
482	val_482
484	val_484
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
489	val_489
490	val_490
494	val_494
495	val_495
496	val_496
498	val_498
498	val_498
498	val_498
