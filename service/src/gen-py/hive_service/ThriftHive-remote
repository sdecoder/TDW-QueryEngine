#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ThriftHive
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string execute(string query)'
  print '  string fetchOne()'
  print '   fetchN(i32 numRows)'
  print '   fetchAll()'
  print '  Schema getSchema()'
  print '  Schema getThriftSchema()'
  print '  HiveClusterStatus getClusterStatus()'
  print '   createSession(string name)'
  print '  string requireSession(string sid, string svid)'
  print '  i32 detachSession(string sid, string svid)'
  print '  i32 dropSession(string sid, string svid)'
  print '   showSessions()'
  print '  i32 uploadJob(string job)'
  print '  i32 killJob()'
  print '  i32 configJob(string config)'
  print '   getJobStatus(i32 jobid)'
  print '   getEnv()'
  print '  i32 audit(string user, string passwd, string dbname)'
  print '  void setHistory(string sid, i32 jobid)'
  print '  string getHistory(i32 jobid)'
  print '  string compile(string query)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ThriftHive.Client(protocol)
transport.open()

if cmd == 'execute':
  if len(args) != 1:
    print 'execute requires 1 args'
    sys.exit(1)
  pp.pprint(client.execute(args[0],))

elif cmd == 'fetchOne':
  if len(args) != 0:
    print 'fetchOne requires 0 args'
    sys.exit(1)
  pp.pprint(client.fetchOne())

elif cmd == 'fetchN':
  if len(args) != 1:
    print 'fetchN requires 1 args'
    sys.exit(1)
  pp.pprint(client.fetchN(eval(args[0]),))

elif cmd == 'fetchAll':
  if len(args) != 0:
    print 'fetchAll requires 0 args'
    sys.exit(1)
  pp.pprint(client.fetchAll())

elif cmd == 'getSchema':
  if len(args) != 0:
    print 'getSchema requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSchema())

elif cmd == 'getThriftSchema':
  if len(args) != 0:
    print 'getThriftSchema requires 0 args'
    sys.exit(1)
  pp.pprint(client.getThriftSchema())

elif cmd == 'getClusterStatus':
  if len(args) != 0:
    print 'getClusterStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getClusterStatus())

elif cmd == 'createSession':
  if len(args) != 1:
    print 'createSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.createSession(args[0],))

elif cmd == 'requireSession':
  if len(args) != 2:
    print 'requireSession requires 2 args'
    sys.exit(1)
  pp.pprint(client.requireSession(args[0],args[1],))

elif cmd == 'detachSession':
  if len(args) != 2:
    print 'detachSession requires 2 args'
    sys.exit(1)
  pp.pprint(client.detachSession(args[0],args[1],))

elif cmd == 'dropSession':
  if len(args) != 2:
    print 'dropSession requires 2 args'
    sys.exit(1)
  pp.pprint(client.dropSession(args[0],args[1],))

elif cmd == 'showSessions':
  if len(args) != 0:
    print 'showSessions requires 0 args'
    sys.exit(1)
  pp.pprint(client.showSessions())

elif cmd == 'uploadJob':
  if len(args) != 1:
    print 'uploadJob requires 1 args'
    sys.exit(1)
  pp.pprint(client.uploadJob(args[0],))

elif cmd == 'killJob':
  if len(args) != 0:
    print 'killJob requires 0 args'
    sys.exit(1)
  pp.pprint(client.killJob())

elif cmd == 'configJob':
  if len(args) != 1:
    print 'configJob requires 1 args'
    sys.exit(1)
  pp.pprint(client.configJob(args[0],))

elif cmd == 'getJobStatus':
  if len(args) != 1:
    print 'getJobStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.getJobStatus(eval(args[0]),))

elif cmd == 'getEnv':
  if len(args) != 0:
    print 'getEnv requires 0 args'
    sys.exit(1)
  pp.pprint(client.getEnv())

elif cmd == 'audit':
  if len(args) != 3:
    print 'audit requires 3 args'
    sys.exit(1)
  pp.pprint(client.audit(args[0],args[1],args[2],))

elif cmd == 'setHistory':
  if len(args) != 2:
    print 'setHistory requires 2 args'
    sys.exit(1)
  pp.pprint(client.setHistory(args[0],eval(args[1]),))

elif cmd == 'getHistory':
  if len(args) != 1:
    print 'getHistory requires 1 args'
    sys.exit(1)
  pp.pprint(client.getHistory(eval(args[0]),))

elif cmd == 'compile':
  if len(args) != 1:
    print 'compile requires 1 args'
    sys.exit(1)
  pp.pprint(client.compile(args[0],))

transport.close()
